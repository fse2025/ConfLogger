```java
protected void setupTicks(boolean isSpout) {
    final Integer tickTimeSecs = ObjectReader.getInt(topoConf.get(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS), null);
    if (tickTimeSecs != null) {
        boolean enableMessageTimeout = (Boolean) topoConf.get(Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS);
        boolean isAcker = Acker.ACKER_COMPONENT_ID.equals(componentId);
        if ((!isAcker && Utils.isSystemId(componentId))
                || (!enableMessageTimeout && isSpout)
                || (!enableMessageTimeout && isAcker)) {
            // ConfLogger Inserted Start
            logger.info("Tick tuple scheduling skipped. Conditions: isAcker={}, isSystemId={}, enableMessageTimeout={}, isSpout={}. Proper configuration needed for tick tuple scheduling.", isAcker, Utils.isSystemId(componentId), enableMessageTimeout, isSpout);
            // ConfLogger Inserted End
        } else {
            StormTimer timerTask = workerData.getUserTimer();
            timerTask.scheduleRecurring(tickTimeSecs, tickTimeSecs,
                    () -> {
                        TupleImpl tuple = new TupleImpl(workerTopologyContext, new Values(tickTimeSecs),
                                Constants.SYSTEM_COMPONENT_ID,
                                (int) Constants.SYSTEM_TASK_ID,
                                Constants.SYSTEM_TICK_STREAM_ID);
                        AddressedTuple tickTuple = new AddressedTuple(AddressedTuple.BROADCAST_DEST, tuple);
                        try {
                            receiveQueue.publish(tickTuple);
                            receiveQueue.flush(); // avoid buffering
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                            return;
                        }
                    }
            );
            // ConfLogger Inserted Start
            logger.info("Tick tuple scheduled with frequency: {} seconds. Configuration parameter: {}", tickTimeSecs, Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS);
            // ConfLogger Inserted End
        }
    } else {
        // ConfLogger Inserted Start
        logger.warn("Tick tuple frequency not set. Configuration parameter: {} is null. Please set a valid frequency to enable tick tuple scheduling.", Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS);
        // ConfLogger Inserted End
    }
}
```