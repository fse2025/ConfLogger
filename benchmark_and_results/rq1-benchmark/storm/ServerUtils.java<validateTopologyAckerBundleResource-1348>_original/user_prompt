<code-whole>
boolean oneExecutorPerWorker = (Boolean) topoConf.getOrDefault(Config.TOPOLOGY_RAS_ONE_EXECUTOR_PER_WORKER, false);
boolean oneComponentPerWorker = (Boolean) topoConf.getOrDefault(Config.TOPOLOGY_RAS_ONE_COMPONENT_PER_WORKER, false);

double topologyWorkerMaxHeapSize =
ObjectReader.getDouble(topoConf.get(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB));

int numOfAckerExecutorsPerWorker = ObjectReader.getInt(topoConf.get(Config.TOPOLOGY_RAS_ACKER_EXECUTORS_PER_WORKER));
double maxTopoExecMem = getMaxExecutorMemoryUsageForTopo(topology, topoConf);
double ackerExecMem = getAckerExecutorMemoryUsageForTopo(topology, topoConf);
double minMemReqForWorker = maxTopoExecMem + ackerExecMem * numOfAckerExecutorsPerWorker;

// A worker need to have enough resources for a bigest topo executor + topology.acker.executors.per.worker ackers
if (!oneExecutorPerWorker
&& !oneComponentPerWorker
&& topologyWorkerMaxHeapSize < minMemReqForWorker) {
String warnMsg
= String.format("For topology %s. Worker max on-heap limit %s is %s. "
+ "The biggest topo executor requires %s MB on-heap memory, "
+ "there might not be enough space for %s ackers. "
+ "Real acker-per-worker will be determined by scheduler.",
topoName, Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB, topologyWorkerMaxHeapSize,
maxTopoExecMem, numOfAckerExecutorsPerWorker);
LOG.warn(warnMsg);
}
}
</code-whole>

<code-specified>
if (!oneExecutorPerWorker
</code-specified>
<param>
topology.ras.acker.executors.per.worker
</param>