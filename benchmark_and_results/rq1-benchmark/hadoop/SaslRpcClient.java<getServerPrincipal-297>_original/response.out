```java
String getServerPrincipal(SaslAuth authType) throws IOException {
    KerberosInfo krbInfo = SecurityUtil.getKerberosInfo(protocol, conf);
    LOG.debug("Get kerberos info proto:" + protocol + " info:" + krbInfo);
    if (krbInfo == null) { // protocol has no support for kerberos
        return null;
    }
    String serverKey = krbInfo.serverPrincipal();
    if (serverKey == null) {
        throw new IllegalArgumentException(
            "Can't obtain server Kerberos config key from protocol="
            + protocol.getCanonicalName());
    }
    // construct server advertised principal for comparision
    String serverPrincipal = new KerberosPrincipal(
        authType.getProtocol() + "/" + authType.getServerId(),
        KerberosPrincipal.KRB_NT_SRV_HST).getName();

    // use the pattern if defined
    String serverKeyPattern = conf.get(serverKey + ".pattern");
    if (serverKeyPattern != null && !serverKeyPattern.isEmpty()) {
        Pattern pattern = GlobPattern.compile(serverKeyPattern);
        if (!pattern.matcher(serverPrincipal).matches()) {
            throw new IllegalArgumentException(String.format(
                "Server has invalid Kerberos principal: %s,"
                + " doesn't match the pattern: %s",
                serverPrincipal, serverKeyPattern));
        }
    } else {
        // check that the server advertised principal matches our conf
        String confPrincipal = SecurityUtil.getServerPrincipal(
            conf.get(serverKey), serverAddr.getAddress());
        // ConfLogger Skipped: Existing debug log provides configuration key and value information
        if (LOG.isDebugEnabled()) {
            LOG.debug("getting serverKey: " + serverKey + " conf value: " + conf.get(serverKey)
                + " principal: " + confPrincipal);
        }
        if (confPrincipal == null || confPrincipal.isEmpty()) {
            // ConfLogger Inserted Start
            logger.error("Configuration error: Server's Kerberos principal name is not specified. Ensure that the configuration for key '" 
                + serverKey + "' is set correctly.");
            // ConfLogger Inserted End
            throw new IllegalArgumentException(
                "Failed to specify server's Kerberos principal name");
        }
        KerberosName name = new KerberosName(confPrincipal);
        if (name.getHostName() == null) {
            throw new IllegalArgumentException(
                "Kerberos principal name does NOT have the expected hostname part: "
                + confPrincipal);
        }
        if (!serverPrincipal.equals(confPrincipal)) {
            throw new IllegalArgumentException(String.format(
                "Server has invalid Kerberos principal: %s, expecting: %s",
                serverPrincipal, confPrincipal));
        }
    }
    return serverPrincipal;
}
```