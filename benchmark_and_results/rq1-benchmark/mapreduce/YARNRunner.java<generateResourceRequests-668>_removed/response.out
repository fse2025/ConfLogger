```java
private List<ResourceRequest> generateResourceRequests() throws IOException {
    Resource capability = recordFactory.newRecordInstance(Resource.class);
    boolean memorySet = false;
    boolean cpuVcoresSet = false;
    List<ResourceInformation> resourceRequests = ResourceUtils
            .getRequestedResourcesFromConfig(conf, MR_AM_RESOURCE_PREFIX);
    for (ResourceInformation resourceReq : resourceRequests) {
        String resourceName = resourceReq.getName();
        if (MRJobConfig.RESOURCE_TYPE_NAME_MEMORY.equals(resourceName) ||
                MRJobConfig.RESOURCE_TYPE_ALTERNATIVE_NAME_MEMORY.equals(
                        resourceName)) {
            if (memorySet) {
                // ConfLogger Inserted Start
                logger.error("Multiple memory configuration keys detected. Only one of the following keys can be specified for a single job: " +
                        MRJobConfig.RESOURCE_TYPE_ALTERNATIVE_NAME_MEMORY + ", " +
                        MRJobConfig.RESOURCE_TYPE_NAME_MEMORY + ". Current resource name: " + resourceName);
                // ConfLogger Inserted End
                throw new IllegalArgumentException(
                        "Only one of the following keys " +
                                "can be specified for a single job: " +
                                MRJobConfig.RESOURCE_TYPE_ALTERNATIVE_NAME_MEMORY + ", " +
                                MRJobConfig.RESOURCE_TYPE_NAME_MEMORY);
            }
            String units = isEmpty(resourceReq.getUnits()) ?
                    ResourceUtils.getDefaultUnit(ResourceInformation.MEMORY_URI) :
                    resourceReq.getUnits();
            capability.setMemorySize(
                    UnitsConversionUtil.convert(units, "Mi", resourceReq.getValue()));
            memorySet = true;
            if (conf.get(MRJobConfig.MR_AM_VMEM_MB) != null) {
                LOG.warn("Configuration " + MR_AM_RESOURCE_PREFIX +
                        resourceName + "=" + resourceReq.getValue() +
                        resourceReq.getUnits() + " is overriding the " +
                        MRJobConfig.MR_AM_VMEM_MB + "=" +
                        conf.get(MRJobConfig.MR_AM_VMEM_MB) + " configuration");
            }
        } else if (MRJobConfig.RESOURCE_TYPE_NAME_VCORE.equals(resourceName)) {
            capability.setVirtualCores(
                    (int) UnitsConversionUtil.convert(resourceReq.getUnits(), "",
                            resourceReq.getValue()));
            cpuVcoresSet = true;
            if (conf.get(MRJobConfig.MR_AM_CPU_VCORES) != null) {
                LOG.warn("Configuration " + MR_AM_RESOURCE_PREFIX +
                        resourceName + "=" + resourceReq.getValue() +
                        resourceReq.getUnits() + " is overriding the " +
                        MRJobConfig.MR_AM_CPU_VCORES + "=" +
                        conf.get(MRJobConfig.MR_AM_CPU_VCORES) + " configuration");
            }
        } else if (!MRJobConfig.MR_AM_VMEM_MB.equals(
                MR_AM_RESOURCE_PREFIX + resourceName) &&
                !MRJobConfig.MR_AM_CPU_VCORES.equals(
                        MR_AM_RESOURCE_PREFIX + resourceName)) {
            // the "mb", "cpu-vcores" resource types are not processed here
            // since the yarn.app.mapreduce.am.resource.mb,
            // yarn.app.mapreduce.am.resource.cpu-vcores keys are used for
            // backward-compatibility - which is handled after this loop
            ResourceInformation resourceInformation = capability
                    .getResourceInformation(resourceName);
            resourceInformation.setUnits(resourceReq.getUnits());
            resourceInformation.setValue(resourceReq.getValue());
            capability.setResourceInformation(resourceName, resourceInformation);
        }
    }
    if (!memorySet) {
        // ConfLogger Inserted Start
        logger.info("Memory not explicitly set. Using default memory configuration: " +
                MRJobConfig.DEFAULT_MR_AM_VMEM_MB + " MB.");
        // ConfLogger Inserted End
        capability.setMemorySize(
                conf.getInt(
                        MRJobConfig.MR_AM_VMEM_MB, MRJobConfig.DEFAULT_MR_AM_VMEM_MB
                )
        );
    }
    if (!cpuVcoresSet) {
        // ConfLogger Inserted Start
        logger.info("CPU vCores not explicitly set. Using default CPU vCores configuration: " +
                MRJobConfig.DEFAULT_MR_AM_CPU_VCORES + " vCores.");
        // ConfLogger Inserted End
        capability.setVirtualCores(
                conf.getInt(
                        MRJobConfig.MR_AM_CPU_VCORES, MRJobConfig.DEFAULT_MR_AM_CPU_VCORES
                )
        );
    }
    if (LOG.isDebugEnabled()) {
        LOG.debug("AppMaster capability = " + capability);
    }

    List<ResourceRequest> amResourceRequests = new ArrayList<>();
    // Always have an ANY request
    ResourceRequest amAnyResourceRequest =
            createAMResourceRequest(ResourceRequest.ANY, capability);
    Map<String, ResourceRequest> rackRequests = new HashMap<>();
    amResourceRequests.add(amAnyResourceRequest);
    Collection<String> amStrictResources = conf.getStringCollection(
            MRJobConfig.AM_STRICT_LOCALITY);
    for (String amStrictResource : amStrictResources) {
        amAnyResourceRequest.setRelaxLocality(false);
        Matcher matcher = RACK_NODE_PATTERN.matcher(amStrictResource);
        if (matcher.matches()) {
            String nodeName;
            String rackName = matcher.group(RACK_GROUP);
            if (rackName == null) {
                rackName = "/default-rack";
                nodeName = matcher.group(NODE_IF_NO_RACK_GROUP);
            } else {
                nodeName = matcher.group(NODE_IF_RACK_GROUP);
            }
            ResourceRequest amRackResourceRequest = rackRequests.get(rackName);
            if (amRackResourceRequest == null) {
                amRackResourceRequest = createAMResourceRequest(rackName, capability);
                amResourceRequests.add(amRackResourceRequest);
                rackRequests.put(rackName, amRackResourceRequest);
            }
            if (nodeName != null) {
                amRackResourceRequest.setRelaxLocality(false);
                ResourceRequest amNodeResourceRequest =
                        createAMResourceRequest(nodeName, capability);
                amResourceRequests.add(amNodeResourceRequest);
            }
        } else {
            String errMsg =
                    "Invalid resource name: " + amStrictResource + " specified.";
            LOG.warn(errMsg);
            throw new IOException(errMsg);
        }
    }
    if (LOG.isDebugEnabled()) {
        for (ResourceRequest amResourceRequest : amResourceRequests) {
            LOG.debug("ResourceRequest: resource = "
                    + amResourceRequest.getResourceName() + ", locality = "
                    + amResourceRequest.getRelaxLocality());
        }
    }
    return amResourceRequests;
}
```