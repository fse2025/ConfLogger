```java
public static Collection<InMemoryAliasMapProtocol> init(Configuration conf) {
    Collection<InMemoryAliasMapProtocol> aliasMaps = new ArrayList<>();
    // Try to connect to all configured nameservices as it is not known which
    // nameservice supports the AliasMap.
    for (String nsId : getNameServiceIds(conf)) {
        try {
            URI namenodeURI = null;
            Configuration newConf = new Configuration(conf);
            if (HAUtil.isHAEnabled(conf, nsId)) {
                // set the failover-proxy provider if HA is enabled.
                newConf.setClass(
                    addKeySuffixes(PROXY_PROVIDER_KEY_PREFIX, nsId),
                    InMemoryAliasMapFailoverProxyProvider.class,
                    AbstractNNFailoverProxyProvider.class);
                namenodeURI = new URI(HdfsConstants.HDFS_URI_SCHEME + "://" + nsId);
            } else {
                String key =
                    addKeySuffixes(DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS, nsId);
                String addr = conf.get(key);
                if (addr != null) {
                    namenodeURI = createUri(HdfsConstants.HDFS_URI_SCHEME,
                        NetUtils.createSocketAddr(addr));
                }
                // ConfLogger Inserted Start
                else {
                    logger.warn("The address for the nameservice '{}' is not set. Please ensure that the configuration parameter '{}' is properly set to enable connection.", nsId, key);
                }
                // ConfLogger Inserted End
            }
            if (namenodeURI != null) {
                aliasMaps.add(NameNodeProxies
                    .createProxy(newConf, namenodeURI, InMemoryAliasMapProtocol.class)
                    .getProxy());
            }
        } catch (IOException | URISyntaxException e) {
            LOG.warn("Exception in connecting to InMemoryAliasMap for nameservice "
                + "{}: {}", nsId, e);
        }
    }
    // if a separate AliasMap is configured using
    // DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS, try to connect it.
    if (conf.get(DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS) != null) {
        URI uri = createUri("hdfs", NetUtils.createSocketAddr(
            conf.get(DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS)));
        try {
            aliasMaps.add(NameNodeProxies
                .createProxy(conf, uri, InMemoryAliasMapProtocol.class).getProxy());
            LOG.info("Connected to InMemoryAliasMap at {}", uri);
        } catch (IOException e) {
            LOG.warn("Exception in connecting to InMemoryAliasMap at {}: {}", uri,
                e);
        }
    }
    // ConfLogger Inserted Start
    else {
        logger.warn("The configuration parameter '{}' is not set. Please ensure that it is properly configured to enable connection to the AliasMap.", DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS);
    }
    // ConfLogger Inserted End
    return aliasMaps;
}
```