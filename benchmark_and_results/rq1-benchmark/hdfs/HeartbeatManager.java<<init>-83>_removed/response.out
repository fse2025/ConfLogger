```java
HeartbeatManager(final Namesystem namesystem,
final BlockManager blockManager, final Configuration conf) {
this.namesystem = namesystem;
this.blockManager = blockManager;
boolean avoidStaleDataNodesForWrite = conf.getBoolean(
DFSConfigKeys.DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_KEY,
DFSConfigKeys.DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_DEFAULT);
long recheckInterval = conf.getInt(
DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,
DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_DEFAULT); // 5 min
long staleInterval = conf.getLong(
DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY,
DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_DEFAULT);// 30s
enableLogStaleNodes = conf.getBoolean(
DFSConfigKeys.DFS_NAMENODE_ENABLE_LOG_STALE_DATANODE_KEY,
DFSConfigKeys.DFS_NAMENODE_ENABLE_LOG_STALE_DATANODE_DEFAULT);

if (avoidStaleDataNodesForWrite && staleInterval < recheckInterval) {
    // ConfLogger Inserted Start
    logger.info("Setting heartbeatRecheckInterval to staleInterval due to avoidStaleDataNodesForWrite being true and staleInterval being less than recheckInterval. " +
                "Configuration parameter: " + DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY + 
                ", staleInterval: " + staleInterval + 
                ", recheckInterval: " + recheckInterval);
    // ConfLogger Inserted End
    this.heartbeatRecheckInterval = staleInterval;
} else {
    // ConfLogger Inserted Start
    logger.info("Setting heartbeatRecheckInterval to recheckInterval. " +
                "Either avoidStaleDataNodesForWrite is false or staleInterval is not less than recheckInterval. " +
                "Configuration parameter: " + DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY + 
                ", staleInterval: " + staleInterval + 
                ", recheckInterval: " + recheckInterval);
    // ConfLogger Inserted End
    this.heartbeatRecheckInterval = recheckInterval;
}
}
```