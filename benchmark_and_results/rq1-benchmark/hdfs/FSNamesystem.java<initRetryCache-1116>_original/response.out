```java
static RetryCache initRetryCache(Configuration conf) {
    boolean enable = conf.getBoolean(DFS_NAMENODE_ENABLE_RETRY_CACHE_KEY,
            DFS_NAMENODE_ENABLE_RETRY_CACHE_DEFAULT);
    // ConfLogger Skipped: The log contains configuration parameter key and value
    LOG.info("Retry cache on namenode is " + (enable ? "enabled" : "disabled"));
    if (enable) {
        float heapPercent = conf.getFloat(
                DFS_NAMENODE_RETRY_CACHE_HEAP_PERCENT_KEY,
                DFS_NAMENODE_RETRY_CACHE_HEAP_PERCENT_DEFAULT);
        long entryExpiryMillis = conf.getLong(
                DFS_NAMENODE_RETRY_CACHE_EXPIRYTIME_MILLIS_KEY,
                DFS_NAMENODE_RETRY_CACHE_EXPIRYTIME_MILLIS_DEFAULT);
        // ConfLogger Skipped: The log contains configuration parameter key and value
        LOG.info("Retry cache will use " + heapPercent
                + " of total heap and retry cache entry expiry time is "
                + entryExpiryMillis + " millis");
        long entryExpiryNanos = entryExpiryMillis * 1000 * 1000;
        return new RetryCache("NameNodeRetryCache", heapPercent,
                entryExpiryNanos);
    } else {
        // ConfLogger Inserted Start
        logger.info("Retry cache is disabled. To enable, set " + DFS_NAMENODE_ENABLE_RETRY_CACHE_KEY + " to true.");
        // ConfLogger Inserted End
    }
    return null;
}
```