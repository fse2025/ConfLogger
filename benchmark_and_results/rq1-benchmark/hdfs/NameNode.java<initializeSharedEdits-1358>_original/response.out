```java
boolean force, boolean interactive) throws IOException {
    String nsId = DFSUtil.getNamenodeNameServiceId(conf);
    String namenodeId = HAUtil.getNameNodeId(conf, nsId);
    initializeGenericKeys(conf, nsId, namenodeId);

    <code-specified>
    if (conf.get(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY) == null) {
        // ConfLogger Skipped: The existing log message already contains configuration parameter keys and values.
        LOG.error("No shared edits directory configured for namespace " +
        nsId + " namenode " + namenodeId);
        return false;
    }
    </code-specified>

    if (UserGroupInformation.isSecurityEnabled()) {
        InetSocketAddress socAddr = DFSUtilClient.getNNAddress(conf);
        SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,
        DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, socAddr.getHostName());
    }

    NNStorage existingStorage = null;
    FSImage sharedEditsImage = null;
    try {
        FSNamesystem fsns =
        FSNamesystem.loadFromDisk(getConfigurationWithoutSharedEdits(conf));

        existingStorage = fsns.getFSImage().getStorage();
        NamespaceInfo nsInfo = existingStorage.getNamespaceInfo();

        List<URI> sharedEditsDirs = FSNamesystem.getSharedEditsDirs(conf);

        sharedEditsImage = new FSImage(conf,
        Lists.<URI>newArrayList(),
        sharedEditsDirs);
        sharedEditsImage.getEditLog().initJournalsForWrite();

        if (!sharedEditsImage.confirmFormat(force, interactive)) {
            return true; // abort
        }

        NNStorage newSharedStorage = sharedEditsImage.getStorage();
        // Call Storage.format instead of FSImage.format here, since we don't
        // actually want to save a checkpoint - just prime the dirs with
        // the existing namespace info
        newSharedStorage.format(nsInfo);
        sharedEditsImage.getEditLog().formatNonFileJournals(nsInfo, force);

        // Need to make sure the edit log segments are in good shape to initialize
        // the shared edits dir.
        fsns.getFSImage().getEditLog().close();
        fsns.getFSImage().getEditLog().initJournalsForWrite();
        fsns.getFSImage().getEditLog().recoverUnclosedStreams();

        copyEditLogSegmentsToSharedDir(fsns, sharedEditsDirs, newSharedStorage,
        conf);
    } catch (IOException ioe) {
        // ConfLogger Skipped: The existing log message already contains configuration-related error information.
        LOG.error("Could not initialize shared edits dir", ioe);
        return true; // aborted
    } finally {
        if (sharedEditsImage != null) {
            try {
                sharedEditsImage.close();
            }  catch (IOException ioe) {
                // ConfLogger Skipped: The existing log message already contains configuration-related warning information.
                LOG.warn("Could not close sharedEditsImage", ioe);
            }
        }
        // Have to unlock storage explicitly for the case when we're running in a
        // unit test, which runs in the same JVM as NNs.
        if (existingStorage != null) {
            try {
                existingStorage.unlockAll();
            } catch (IOException ioe) {
                // ConfLogger Skipped: The existing log message already contains configuration-related warning information.
                LOG.warn("Could not unlock storage directories", ioe);
                return true; // aborted
            }
        }
    }
    return false; // did not abort
}
```