```java
throws AccessControlException {
boolean autoHaEnabled = getConf().getBoolean(
DFS_HA_AUTO_FAILOVER_ENABLED_KEY, DFS_HA_AUTO_FAILOVER_ENABLED_DEFAULT);
switch (req.getSource()) {
case REQUEST_BY_USER:
if (autoHaEnabled) {
    // ConfLogger Inserted Start
    logger.error("Manual HA control is disallowed due to automatic HA being enabled. Configuration parameter: " +
                 "dfs.ha.automatic-failover.enabled, Value: " + autoHaEnabled + 
                 ". To allow manual control, disable automatic HA.");
    // ConfLogger Inserted End
    throw new AccessControlException(
        "Manual HA control for this NameNode is disallowed, because " +
        "automatic HA is enabled.");
}
break;
case REQUEST_BY_USER_FORCED:
if (autoHaEnabled) {
    // ConfLogger Skipped: The existing log already provides configuration-related information.
    LOG.warn("Allowing manual HA control from " +
             Server.getRemoteAddress() +
             " even though automatic HA is enabled, because the user " +
             "specified the force flag");
}
break;
case REQUEST_BY_ZKFC:
if (!autoHaEnabled) {
    // ConfLogger Inserted Start
    logger.error("Request from ZK failover controller denied due to automatic HA not being enabled. Configuration parameter: " +
                 "dfs.ha.automatic-failover.enabled, Value: " + autoHaEnabled + 
                 ". To allow ZK failover control, enable automatic HA.");
    // ConfLogger Inserted End
    throw new AccessControlException(
        "Request from ZK failover controller at " +
        Server.getRemoteAddress() + " denied since automatic HA " +
        "is not enabled");
}
break;
}
}
```