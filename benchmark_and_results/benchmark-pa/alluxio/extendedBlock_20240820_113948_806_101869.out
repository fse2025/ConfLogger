====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	RocksStore.java	methodSinagture:	alluxio.rocks.RocksStore.setFlagAndBlockingWait(Z)V	methodLines:	588:651
blockLines:	637:-1
paras:	null
TaintedStat:	NORMAL setFlagAndBlockingWait:conditional branch(eq, to iindex=111) 62,4 Node: < Application, Lalluxio/rocks/RocksStore, setFlagAndBlockingWait(Z)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lalluxio/rocks/RocksStore, setFlagAndBlockingWait(Z)V > Context: Everywhere[95]62 = invokestatic < Application, Lalluxio/conf/Configuration, getBoolean(Lalluxio/conf/PropertyKey;)Z > 60 @198 exception:61
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lalluxio/rocks/RocksStore, setFlagAndBlockingWait(Z)V > Context: Everywhere[95]62 = invokestatic < Application, Lalluxio/conf/Configuration, getBoolean(Lalluxio/conf/PropertyKey;)Z > 60 @198 exception:61
NORMAL setFlagAndBlockingWait:conditional branch(eq, to iindex=111) 62,4 Node: < Application, Lalluxio/rocks/RocksStore, setFlagAndBlockingWait(Z)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    // Another known operation has acquired the exclusive lock
    if (yieldToAnotherCloser && mRocksDbStopServing.getReference()) {
      throw new UnavailableRuntimeException(ExceptionMessage.ROCKS_DB_CLOSING.getMessage());
    }

    int version = mRocksDbStopServing.getStamp();
    if (yieldToAnotherCloser) {
      if (!mRocksDbStopServing.compareAndSet(false, true, version, version)) {
        throw new UnavailableRuntimeException(ExceptionMessage.ROCKS_DB_CLOSING.getMessage());
      }
    } else {
      // Just set the state with no respect to concurrent actions
      mRocksDbStopServing.set(true, version);
    }

    /*
    * Wait until:
    * 1. Ref count is zero, meaning all concurrent r/w have completed or aborted
    * 2. Timeout is reached, meaning we force close/restart without waiting
    *
    * According to Java doc
    * https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html
    * In absence of concurrent updates, sum() returns an accurate result.
    * But sum() does not see concurrent updates and therefore can miss an update.
    *
    * The correctness then relies on the 2nd check in checkAndAcquireSharedLock()
    * because the reader will see the flag and just abort voluntarily. An example sequence
    * of events is like below:
    * 1. Reader checks flag, the flag is not set by the closer
    * 2. Closer sets flag
    * 3. Closer sees refCount=0
    * 4. Reader increments refCount
    * 5. Closer closes RocksDB
    * 6. Reader checks flag again and sees the flag
    * 7. Reader decrements refCount aborts in checkAndAcquireSharedLock()
    */
    Instant waitStart = Instant.now();
    CountingRetry retry = new CountingRetry((int) ROCKS_CLOSE_WAIT_TIMEOUT.getSeconds() * 10);
    while (mRefCount.sum() != 0 && retry.attempt()) {
      SleepUtils.sleepMs(100);
    }
    Duration elapsed = Duration.between(waitStart, Instant.now());
    LOG.info("Waited {}ms for ongoing read/write to complete/abort", elapsed.toMillis());

    /*
     * Reset the ref count to forget about the aborted operations
     */
    long unclosedOperations = mRefCount.sum();
    if (unclosedOperations != 0) {
      if (Configuration.getBoolean(PropertyKey.TEST_MODE)) {
        throw new RuntimeException(ExceptionMessage.ROCKS_DB_EXCLUSIVE_LOCK_FORCED
            .getMessage(unclosedOperations));
      }
      /*
       * Set the flag so shared locks know that the ref count has been reset,
       * no need to update the ref count on unlock.
       * If one shared lock did not decrement the ref count before this reset, it should not
       * decrement the ref count when it is released.
       */
      resetRefCounter();
      LOG.warn("{} readers/writers fail to complete/abort before we stop/restart the RocksDB",
          unclosedOperations);
    }
  }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lalluxio/rocks/RocksStore, lockForClosing()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle; > Context: Everywhere, blocks=[BB[SSA:0..2]1 - alluxio.rocks.RocksStore.lockForClosing()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle;, BB[SSA:-1..-2]0 - alluxio.rocks.RocksStore.lockForClosing()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle;, BB[SSA:3..3]2 - alluxio.rocks.RocksStore.lockForClosing()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle;, BB[SSA:-1..-2]6 - alluxio.rocks.RocksStore.lockForClosing()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle;], numberOfBasicBlocks=4, firstLineNumber=688, lastLineNumber=690, firstMethodNumber=688, lastMethodNumber=690, isFirstLineValid=false, methodSrcCode=
    // Just grab the lock and close
    setFlagAndBlockingWait(false);
    return new RocksExclusiveLockHandle(mCheckRefCount);
  }
}
CtxCodeBlock{node=Node: < Application, Lalluxio/rocks/RocksStore, lockForCheckpoint()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle; > Context: Everywhere, blocks=[BB[SSA:0..2]1 - alluxio.rocks.RocksStore.lockForCheckpoint()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle;, BB[SSA:-1..-2]0 - alluxio.rocks.RocksStore.lockForCheckpoint()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle;, BB[SSA:3..3]2 - alluxio.rocks.RocksStore.lockForCheckpoint()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle;, BB[SSA:-1..-2]6 - alluxio.rocks.RocksStore.lockForCheckpoint()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle;], numberOfBasicBlocks=4, firstLineNumber=707, lastLineNumber=709, firstMethodNumber=707, lastMethodNumber=709, isFirstLineValid=false, methodSrcCode=
    // Grab the lock with respect to contenders
    setFlagAndBlockingWait(true);
    return new RocksExclusiveLockHandle(() -> {
      mCheckRefCount.call();
}
CtxCodeBlock{node=Node: < Application, Lalluxio/rocks/RocksStore, lockForRewrite()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle; > Context: Everywhere, blocks=[BB[SSA:0..2]1 - alluxio.rocks.RocksStore.lockForRewrite()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle;, BB[SSA:-1..-2]0 - alluxio.rocks.RocksStore.lockForRewrite()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle;, BB[SSA:3..3]2 - alluxio.rocks.RocksStore.lockForRewrite()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle;, BB[SSA:-1..-2]6 - alluxio.rocks.RocksStore.lockForRewrite()Lalluxio/master/metastore/rocks/RocksExclusiveLockHandle;], numberOfBasicBlocks=4, firstLineNumber=734, lastLineNumber=736, firstMethodNumber=734, lastMethodNumber=736, isFirstLineValid=false, methodSrcCode=
    // Grab the lock with respect to contenders
    setFlagAndBlockingWait(true);
    return new RocksExclusiveLockHandle(() -> {
      mCheckRefCount.call();
}
