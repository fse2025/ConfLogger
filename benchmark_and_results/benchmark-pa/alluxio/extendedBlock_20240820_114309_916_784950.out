====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	EtcdMembershipManager.java	methodSinagture:	alluxio.membership.EtcdMembershipManager.join(Lalluxio/wire/WorkerInfo;)V	methodLines:	98:165
blockLines:	115:-1
paras:	null
TaintedStat:	NORMAL join:conditional branch(eq, to iindex=47) 42,38 Node: < Application, Lalluxio/membership/EtcdMembershipManager, join(Lalluxio/wire/WorkerInfo;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lalluxio/membership/EtcdMembershipManager, join(Lalluxio/wire/WorkerInfo;)V > Context: Everywhere[42]42 = invokeinterface < Application, Lalluxio/conf/AlluxioConfiguration, getBoolean(Lalluxio/conf/PropertyKey;)Z > 39,40 @99 exception:41
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lalluxio/membership/EtcdMembershipManager, join(Lalluxio/wire/WorkerInfo;)V > Context: Everywhere[42]42 = invokeinterface < Application, Lalluxio/conf/AlluxioConfiguration, getBoolean(Lalluxio/conf/PropertyKey;)Z > 39,40 @99 exception:41
NORMAL join:conditional branch(eq, to iindex=47) 42,38 Node: < Application, Lalluxio/membership/EtcdMembershipManager, join(Lalluxio/wire/WorkerInfo;)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  public void join(WorkerInfo workerInfo) throws IOException {
    LOG.info("Try joining on etcd for worker:{} ", workerInfo);
    WorkerServiceEntity entity =
        new WorkerServiceEntity(workerInfo.getIdentity(), workerInfo.getAddress());
    entity.setLeaseTTLInSec(
        mConf.getDuration(PropertyKey.WORKER_FAILURE_DETECTION_TIMEOUT).getSeconds());
    String pathOnRing = new StringBuffer()
        .append(getRingPathPrefix())
        .append(entity.getServiceEntityName()).toString();
    byte[] serializedEntity = entity.serialize();
    // 1) register to the ring.
    // CompareAndSet if no existing registered entry, if exist such key, two cases:
    // a) it's k8s env, still register, overwriting the existing entry
    // b) it's not k8s env, compare the registered entity content, if it's me
    //    then no op, if not, we don't allow overwriting the existing entity.
    try {
      boolean isK8s = mConf.isSet(PropertyKey.K8S_ENV_DEPLOYMENT)
          && mConf.getBoolean(PropertyKey.K8S_ENV_DEPLOYMENT);
      Txn txn = mAlluxioEtcdClient.getEtcdClient().getKVClient().txn();
      ByteSequence keyToPut = ByteSequence.from(pathOnRing, StandardCharsets.UTF_8);
      ByteSequence valToPut = ByteSequence.from(serializedEntity);
      CompletableFuture<TxnResponse> txnResponseFut = txn
          // version of the key indicates number of modification, 0 means
          // this key does not exist
          .If(new Cmp(keyToPut, Cmp.Op.EQUAL, CmpTarget.version(0L)))
          .Then(Op.put(keyToPut, valToPut, PutOption.newBuilder().build()))
          .Else(isK8s ? Op.put(keyToPut, valToPut, PutOption.newBuilder().build()) :
              Op.get(keyToPut, GetOption.DEFAULT))
          .commit();
      TxnResponse txnResponse = txnResponseFut.get();
      if (!isK8s && !txnResponse.isSucceeded()) {
        // service kv already exists, for non-k8s env, check if it's me.
        // bail if it's someone else.
        List<KeyValue> kvs = new ArrayList<>();
        txnResponse.getGetResponses().stream().map(
            r -> kvs.addAll(r.getKvs())).collect(Collectors.toList());
        Optional<KeyValue> latestKV = kvs.stream()
            .max((kv1, kv2) -> (int) (kv1.getModRevision() - kv2.getModRevision()));
        if (latestKV.isPresent()
            && !Arrays.equals(latestKV.get().getValue().getBytes(), serializedEntity)) {
          Optional<WorkerServiceEntity> existingEntity = parseWorkerServiceEntity(latestKV.get());
          if (!existingEntity.isPresent()) {
            throw new IOException(String.format(
                "Existing WorkerServiceEntity for path:%s corrupted",
                pathOnRing));
          }
          if (existingEntity.get().equalsIgnoringOptionalFields(entity)) {
            // Same entity but potentially with new optional fields,
            // update the original etcd-stored worker information
            mAlluxioEtcdClient.createForPath(pathOnRing, Optional.of(serializedEntity));
          } else {
            throw new AlreadyExistsException(
                String.format("Some other member with same id registered on the ring, bail."
                        + "Conflicting worker addr:%s, worker identity:%s."
                        + "Different workers can't assume same worker identity in non-k8s env,"
                        + "clean local worker identity settings to continue.",
                    existingEntity.get().getWorkerNetAddress().toString(),
                    existingEntity.get().getIdentity()));
          }
        }
      }
    } catch (InterruptedException | ExecutionException e) {
      throw new IOException(e);
    }
    // 2) start heartbeat
    mAlluxioEtcdClient.mServiceDiscovery.registerAndStartSync(entity);
    LOG.info("Joined on etcd for worker:{} ", workerInfo);
  }



====================ctx:=======================
