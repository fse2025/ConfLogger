====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	KeyFieldBasedPartitioner.java	methodSinagture:	org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedPartitioner.setConf(Lorg/apache/hadoop/conf/Configuration;)V	methodLines:	64:79
blockLines:	70:-1
paras:	null
TaintedStat:	NORMAL setConf:conditional branch(eq, to iindex=38) 14,15 Node: < Application, Lorg/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedPartitioner, setConf(Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedPartitioner, setConf(Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere[19]14 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 2,12 @36 exception:13
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedPartitioner, setConf(Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere[19]14 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 2,12 @36 exception:13
NORMAL setConf:conditional branch(eq, to iindex=38) 14,15 Node: < Application, Lorg/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedPartitioner, setConf(Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  public void setConf(Configuration conf) {
    this.conf = conf;
    keyFieldHelper = new KeyFieldHelper();
    String keyFieldSeparator = 
      conf.get(MRJobConfig.MAP_OUTPUT_KEY_FIELD_SEPARATOR, "\t");
    keyFieldHelper.setKeyFieldSeparator(keyFieldSeparator);
    if (conf.get("num.key.fields.for.partition") != null) {
      LOG.warn("Using deprecated num.key.fields.for.partition. " +
      		"Use mapreduce.partition.keypartitioner.options instead");
      this.numOfPartitionFields = conf.getInt("num.key.fields.for.partition",0);
      keyFieldHelper.setKeyFieldSpec(1,numOfPartitionFields);
    } else {
      String option = conf.get(PARTITIONER_OPTIONS);
      keyFieldHelper.parseOption(option);
    }
  }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/mapred/lib/KeyFieldBasedPartitioner, configure(Lorg/apache/hadoop/mapred/JobConf;)V > Context: Everywhere, blocks=[BB[SSA:0..2]1 - org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner.configure(Lorg/apache/hadoop/mapred/JobConf;)V, BB[SSA:-1..-2]0 - org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner.configure(Lorg/apache/hadoop/mapred/JobConf;)V, BB[SSA:3..3]2 - org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner.configure(Lorg/apache/hadoop/mapred/JobConf;)V, BB[SSA:-1..-2]3 - org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner.configure(Lorg/apache/hadoop/mapred/JobConf;)V], numberOfBasicBlocks=4, firstLineNumber=44, lastLineNumber=46, firstMethodNumber=44, lastMethodNumber=46, isFirstLineValid=false, methodSrcCode=
  public void configure(JobConf job) {
    super.setConf(job);
  }
}
}
