====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	SkipBadRecords.java	methodSinagture:	org.apache.hadoop.mapred.SkipBadRecords.getSkipOutputPath(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/Path;	methodLines:	204:213
blockLines:	206:-1
paras:	mapreduce.job.skip.outdir
TaintedStat:	NORMAL getSkipOutputPath:conditional branch(eq, to iindex=19) 5,6 Node: < Application, Lorg/apache/hadoop/mapred/SkipBadRecords, getSkipOutputPath(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/Path; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/mapred/SkipBadRecords, getSkipOutputPath(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/Path; > Context: Everywhere[2]5 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 1,3 @3 exception:4
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/mapred/SkipBadRecords, getSkipOutputPath(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/Path; > Context: Everywhere[2]5 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 1,3 @3 exception:4
NORMAL getSkipOutputPath:conditional branch(eq, to iindex=19) 5,6 Node: < Application, Lorg/apache/hadoop/mapred/SkipBadRecords, getSkipOutputPath(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/Path; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  public static Path getSkipOutputPath(Configuration conf) {
    String name =  conf.get(OUT_PATH);
    if(name!=null) {
      if("none".equals(name)) {
        return null;
      }
      return new Path(name);
    }
    Path outPath = FileOutputFormat.getOutputPath(new JobConf(conf));
    return outPath==null ? null : new Path(outPath, 
        "_logs"+Path.SEPARATOR+"skip");


====================ctx:=======================
