====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	AsyncNonMetaRegionLocator.java	methodSinagture:	org.apache.hadoop.hbase.client.AsyncNonMetaRegionLocator.<init>(Lorg/apache/hadoop/hbase/client/AsyncConnectionImpl;)V	methodLines:	214:256
blockLines:	249:-1
paras:	null
TaintedStat:	NORMAL <init>:conditional branch(eq, to iindex=68) 39,37 Node: < Application, Lorg/apache/hadoop/hbase/client/AsyncNonMetaRegionLocator, <init>(Lorg/apache/hadoop/hbase/client/AsyncConnectionImpl;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hbase/client/AsyncNonMetaRegionLocator, <init>(Lorg/apache/hadoop/hbase/client/AsyncConnectionImpl;)V > Context: Everywhere[59]39 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 35,36,37 @155 exception:38
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hbase/client/AsyncNonMetaRegionLocator, <init>(Lorg/apache/hadoop/hbase/client/AsyncConnectionImpl;)V > Context: Everywhere[59]39 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 35,36,37 @155 exception:38
NORMAL <init>:conditional branch(eq, to iindex=68) 39,37 Node: < Application, Lorg/apache/hadoop/hbase/client/AsyncNonMetaRegionLocator, <init>(Lorg/apache/hadoop/hbase/client/AsyncConnectionImpl;)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================

  AsyncNonMetaRegionLocator(AsyncConnectionImpl conn) {
    this.conn = conn;
    this.maxConcurrentLocateRequestPerTable = conn.getConfiguration().getInt(
      MAX_CONCURRENT_LOCATE_REQUEST_PER_TABLE, DEFAULT_MAX_CONCURRENT_LOCATE_REQUEST_PER_TABLE);
    this.locatePrefetchLimit =
      conn.getConfiguration().getInt(LOCATE_PREFETCH_LIMIT, DEFAULT_LOCATE_PREFETCH_LIMIT);

    // Get the region locator's meta replica mode.
    this.metaReplicaMode = CatalogReplicaMode.fromString(
      conn.getConfiguration().get(LOCATOR_META_REPLICAS_MODE, CatalogReplicaMode.NONE.toString()));

    switch (this.metaReplicaMode) {
      case LOAD_BALANCE:
        String replicaSelectorClass =
          conn.getConfiguration().get(RegionLocator.LOCATOR_META_REPLICAS_MODE_LOADBALANCE_SELECTOR,
            CatalogReplicaLoadBalanceSimpleSelector.class.getName());

        this.metaReplicaSelector = CatalogReplicaLoadBalanceSelectorFactory
          .createSelector(replicaSelectorClass, META_TABLE_NAME, conn, () -> {
            int numOfReplicas = CatalogReplicaLoadBalanceSelector.UNINITIALIZED_NUM_OF_REPLICAS;
            try {
              RegionLocations metaLocations = conn.registry.getMetaRegionLocations()
                .get(conn.connConf.getReadRpcTimeoutNs(), TimeUnit.NANOSECONDS);
              numOfReplicas = metaLocations.size();
            } catch (Exception e) {
              LOG.error("Failed to get table {}'s region replication, ", META_TABLE_NAME, e);
            }
            return numOfReplicas;
          });
        break;
      case NONE:
        // If user does not configure LOCATOR_META_REPLICAS_MODE, let's check the legacy config.
        boolean useMetaReplicas =
          conn.getConfiguration().getBoolean(USE_META_REPLICAS, DEFAULT_USE_META_REPLICAS);
        if (useMetaReplicas) {
          this.metaReplicaMode = CatalogReplicaMode.HEDGED_READ;
        }
        break;
      default:
        // Doing nothing
    }
  }



====================ctx:=======================
