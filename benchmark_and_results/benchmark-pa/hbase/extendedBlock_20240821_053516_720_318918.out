====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	X509Util.java	methodSinagture:	org.apache.hadoop.hbase.io.crypto.tls.X509Util.getCipherSuites(Lorg/apache/hadoop/conf/Configuration;Z)[Ljava/lang/String;	methodLines:	475:480
blockLines:	477:-1
paras:	null
TaintedStat:	NORMAL getCipherSuites:conditional branch(ne, to iindex=10) 6,7 Node: < Application, Lorg/apache/hadoop/hbase/io/crypto/tls/X509Util, getCipherSuites(Lorg/apache/hadoop/conf/Configuration;Z)[Ljava/lang/String; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hbase/io/crypto/tls/X509Util, getCipherSuites(Lorg/apache/hadoop/conf/Configuration;Z)[Ljava/lang/String; > Context: Everywhere[2]6 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 1,4 @3 exception:5
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hbase/io/crypto/tls/X509Util, getCipherSuites(Lorg/apache/hadoop/conf/Configuration;Z)[Ljava/lang/String; > Context: Everywhere[2]6 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 1,4 @3 exception:5
NORMAL getCipherSuites:conditional branch(ne, to iindex=10) 6,7 Node: < Application, Lorg/apache/hadoop/hbase/io/crypto/tls/X509Util, getCipherSuites(Lorg/apache/hadoop/conf/Configuration;Z)[Ljava/lang/String; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  private static String[] getCipherSuites(Configuration config, boolean useOpenSsl) {
    String cipherSuitesInput = config.get(TLS_CIPHER_SUITES);
    if (cipherSuitesInput == null) {
      return getDefaultCipherSuites(useOpenSsl);
    } else {
      return cipherSuitesInput.split(",");
    }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/hbase/io/crypto/tls/X509Util, createSslContextForClient(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hbase/thirdparty/io/netty/handler/ssl/SslContext; > Context: Everywhere, blocks=[BB[SSA:96..100]30 - org.apache.hadoop.hbase.io.crypto.tls.X509Util.createSslContextForClient(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hbase/thirdparty/io/netty/handler/ssl/SslContext;, BB[SSA:95..95]29 - org.apache.hadoop.hbase.io.crypto.tls.X509Util.createSslContextForClient(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hbase/thirdparty/io/netty/handler/ssl/SslContext;, BB[SSA:101..101]31 - org.apache.hadoop.hbase.io.crypto.tls.X509Util.createSslContextForClient(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hbase/thirdparty/io/netty/handler/ssl/SslContext;, BB[SSA:-1..-2]35 - org.apache.hadoop.hbase.io.crypto.tls.X509Util.createSslContextForClient(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hbase/thirdparty/io/netty/handler/ssl/SslContext;], numberOfBasicBlocks=4, firstLineNumber=292, lastLineNumber=293, firstMethodNumber=257, lastMethodNumber=295, isFirstLineValid=true, methodSrcCode=

    SslContextBuilder sslContextBuilder = SslContextBuilder.forClient();

    boolean useOpenSsl = configureOpenSslIfAvailable(sslContextBuilder, config);
    String keyStoreLocation = config.get(TLS_CONFIG_KEYSTORE_LOCATION, "");
    char[] keyStorePassword = config.getPassword(TLS_CONFIG_KEYSTORE_PASSWORD);
    String keyStoreType = config.get(TLS_CONFIG_KEYSTORE_TYPE, "");

    if (keyStoreLocation.isEmpty()) {
      LOG.warn(TLS_CONFIG_KEYSTORE_LOCATION + " not specified");
    } else {
      sslContextBuilder
        .keyManager(createKeyManager(keyStoreLocation, keyStorePassword, keyStoreType));
    }

    String trustStoreLocation = config.get(TLS_CONFIG_TRUSTSTORE_LOCATION, "");
    char[] trustStorePassword = config.getPassword(TLS_CONFIG_TRUSTSTORE_PASSWORD);
    String trustStoreType = config.get(TLS_CONFIG_TRUSTSTORE_TYPE, "");

    boolean sslCrlEnabled = config.getBoolean(TLS_CONFIG_CLR, false);
    boolean sslOcspEnabled = config.getBoolean(TLS_CONFIG_OCSP, false);

    boolean verifyServerHostname =
      config.getBoolean(HBASE_CLIENT_NETTY_TLS_VERIFY_SERVER_HOSTNAME, true);
    boolean allowReverseDnsLookup = config.getBoolean(TLS_CONFIG_REVERSE_DNS_LOOKUP_ENABLED, true);

    if (trustStoreLocation.isEmpty()) {
      LOG.warn(TLS_CONFIG_TRUSTSTORE_LOCATION + " not specified");
    } else {
      sslContextBuilder
        .trustManager(createTrustManager(trustStoreLocation, trustStorePassword, trustStoreType,
          sslCrlEnabled, sslOcspEnabled, verifyServerHostname, allowReverseDnsLookup));
    }

    sslContextBuilder.enableOcsp(sslOcspEnabled);
    sslContextBuilder.protocols(getEnabledProtocols(config));
    sslContextBuilder.ciphers(Arrays.asList(getCipherSuites(config, useOpenSsl)));

    return sslContextBuilder.build();
  }
}
