====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	ObjectReader.java	methodSinagture:	org.apache.storm.utils.ObjectReader.getDouble(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;	methodLines:	125:132
blockLines:	129:-1
paras:	topology.worker.max.heap.size.mb
TaintedStat:	NORMAL getDouble:conditional branch(eq, to iindex=14) 5,6 Node: < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/utils/ServerUtils, validateTopologyWorkerMaxHeapSizeConfigs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;D)V > Context: Everywhere[6]9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 1,7 @11 exception:8
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/utils/ServerUtils, validateTopologyWorkerMaxHeapSizeConfigs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;D)V > Context: Everywhere[6]9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 1,7 @11 exception:8
PARAM_CALLER:Node: < Application, Lorg/apache/storm/utils/ServerUtils, validateTopologyWorkerMaxHeapSizeConfigs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;D)V > Context: Everywhere[9]13 = invokestatic < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double; > 9,11 @20 exception:12 v9
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double; > Context: Everywhere v1
NORMAL getDouble:conditional branch(ne, to iindex=5) 4,1 Node: < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double; > Context: Everywhere
NORMAL getDouble:conditional branch(eq, to iindex=14) 5,6 Node: < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double; > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	ObjectReader.java	methodSinagture:	org.apache.storm.utils.ObjectReader.getDouble(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;	methodLines:	125:132
blockLines:	126:-1
paras:	topology.worker.max.heap.size.mb
TaintedStat:	NORMAL getDouble:conditional branch(ne, to iindex=5) 4,1 Node: < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/utils/ServerUtils, validateTopologyAckerBundleResource(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;Ljava/lang/String;)V > Context: Everywhere[18]24 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 1,22 @45 exception:23
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/utils/ServerUtils, validateTopologyAckerBundleResource(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;Ljava/lang/String;)V > Context: Everywhere[18]24 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 1,22 @45 exception:23
PARAM_CALLER:Node: < Application, Lorg/apache/storm/utils/ServerUtils, validateTopologyAckerBundleResource(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;Ljava/lang/String;)V > Context: Everywhere[19]26 = invokestatic < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;)Ljava/lang/Double; > 24 @50 exception:25 v24
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;)Ljava/lang/Double; > Context: Everywhere v1
PARAM_CALLER:Node: < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;)Ljava/lang/Double; > Context: Everywhere[2]5 = invokestatic < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double; > 1,3 @2 exception:4 v1
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double; > Context: Everywhere v1
NORMAL getDouble:conditional branch(ne, to iindex=5) 4,1 Node: < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    public static Double getDouble(Object o, Double defaultValue) {
        if (null == o) {
            return defaultValue;
        }
        if (o instanceof Number) {
            return ((Number) o).doubleValue();
        } else {
            throw new IllegalArgumentException("Don't know how to convert (" + o + ") to double");
        }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/scheduler/TopologyDetails, initConfigs()V > Context: Everywhere, blocks=[BB[SSA:5..6]3 - org.apache.storm.scheduler.TopologyDetails.initConfigs()V, BB[SSA:3..4]2 - org.apache.storm.scheduler.TopologyDetails.initConfigs()V, BB[SSA:7..7]4 - org.apache.storm.scheduler.TopologyDetails.initConfigs()V, BB[SSA:-1..-2]10 - org.apache.storm.scheduler.TopologyDetails.initConfigs()V], numberOfBasicBlocks=4, firstLineNumber=553, lastLineNumber=554, firstMethodNumber=552, lastMethodNumber=566, isFirstLineValid=true, methodSrcCode=
    private void initConfigs() {
        this.topologyWorkerMaxHeapSize =
            ObjectReader.getDouble(
                topologyConf.get(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB), null);
        this.topologyPriority =
            ObjectReader.getInt(topologyConf.get(Config.TOPOLOGY_PRIORITY), null);

        // Fails in storm-core: org.apache.storm.scheduler-test / testname: test-cluster
        //if (this.topologyWorkerMaxHeapSize == null) {
        //    throw new AssertionError("topologyWorkerMaxHeapSize is null");
        //}
        //if (this.topologyPriority == null) {
        //    throw new AssertionError("topologyPriority is null");
        //}
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/container/cgroup/CgroupManager, reserveResourcesForWorker(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;)V > Context: Everywhere, blocks=[BB[SSA:104..104]53 - org.apache.storm.container.cgroup.CgroupManager.reserveResourcesForWorker(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;)V, BB[SSA:102..103]52 - org.apache.storm.container.cgroup.CgroupManager.reserveResourcesForWorker(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;)V, BB[SSA:105..105]54 - org.apache.storm.container.cgroup.CgroupManager.reserveResourcesForWorker(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;)V, BB[SSA:-1..-2]105 - org.apache.storm.container.cgroup.CgroupManager.reserveResourcesForWorker(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;)V], numberOfBasicBlocks=4, firstLineNumber=163, lastLineNumber=162, firstMethodNumber=126, lastMethodNumber=202, isFirstLineValid=true, methodSrcCode=
    public void reserveResourcesForWorker(String workerId, Integer totalMem, Integer cpuNum, String numaId) throws SecurityException {
        LOG.info("Creating cgroup for worker {} with resources {} MB {} % CPU", workerId, totalMem, cpuNum);
        // The manually set STORM_WORKER_CGROUP_CPU_LIMIT config on supervisor will overwrite resources assigned by
        // RAS (Resource Aware Scheduler)
        if (conf.get(DaemonConfig.STORM_WORKER_CGROUP_CPU_LIMIT) != null) {
            cpuNum = ((Number) conf.get(DaemonConfig.STORM_WORKER_CGROUP_CPU_LIMIT)).intValue();
        }

        // The manually set STORM_WORKER_CGROUP_MEMORY_MB_LIMIT config on supervisor will overwrite
        // resources assigned by RAS (Resource Aware Scheduler)
        if (this.conf.get(DaemonConfig.STORM_WORKER_CGROUP_MEMORY_MB_LIMIT) != null) {
            totalMem =
                ((Number) this.conf.get(DaemonConfig.STORM_WORKER_CGROUP_MEMORY_MB_LIMIT)).intValue();
        }

        CgroupCommon workerGroup = new CgroupCommon(workerId, this.hierarchy, this.rootCgroup);
        try {
            this.center.createCgroup(workerGroup);
        } catch (Exception e) {
            throw new RuntimeException("Error when creating Cgroup! Exception: ", e);
        }

        if (cpuNum != null) {
            CpuCore cpuCore = (CpuCore) workerGroup.getCores().get(SubSystemType.cpu);
            try {
                cpuCore.setCpuShares(cpuNum.intValue());
            } catch (IOException e) {
                throw new RuntimeException("Cannot set cpu.shares! Exception: ", e);
            }
        }

        if ((boolean) this.conf.get(DaemonConfig.STORM_CGROUP_MEMORY_ENFORCEMENT_ENABLE)) {
            if (totalMem != null) {
                int cgroupMem =
                    (int)
                        (Math.ceil(
                            ObjectReader.getDouble(
                                this.conf.get(DaemonConfig.STORM_CGROUP_MEMORY_LIMIT_TOLERANCE_MARGIN_MB),
                                0.0)));
                long memLimit = Long.valueOf((totalMem.longValue() + cgroupMem) * 1024 * 1024);
                MemoryCore memCore = (MemoryCore) workerGroup.getCores().get(SubSystemType.memory);
                try {
                    memCore.setPhysicalUsageLimit(memLimit);
                } catch (IOException e) {
                    throw new RuntimeException("Cannot set memory.limit_in_bytes! Exception: ", e);
                }
                // need to set memory.memsw.limit_in_bytes after setting memory.limit_in_bytes or error
                // might occur
                try {
                    memCore.setWithSwapUsageLimit(memLimit);
                } catch (IOException e) {
                    throw new RuntimeException("Cannot set memory.memsw.limit_in_bytes! Exception: ", e);
                }
            }
        }
        
        if ((boolean) this.conf.get(DaemonConfig.STORM_CGROUP_INHERIT_CPUSET_CONFIGS)) {
            if (workerGroup.getParent().getCores().containsKey(SubSystemType.cpuset)) {
                CpusetCore parentCpusetCore = (CpusetCore) workerGroup.getParent().getCores().get(SubSystemType.cpuset);
                CpusetCore cpusetCore = (CpusetCore) workerGroup.getCores().get(SubSystemType.cpuset);
                try {
                    cpusetCore.setCpus(parentCpusetCore.getCpus());
                } catch (IOException e) {
                    throw new RuntimeException("Cannot set cpuset.cpus! Exception: ", e);
                }
                try {
                    cpusetCore.setMems(parentCpusetCore.getMems());
                } catch (IOException e) {
                    throw new RuntimeException("Cannot set cpuset.mems! Exception: ", e);
                }
            }
        }

        if (numaId != null) {
            workerToNumaId.put(workerId, numaId);
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/supervisor/BasicContainer, <init>(Lorg/apache/storm/daemon/supervisor/Container$ContainerType;Ljava/util/Map;Ljava/lang/String;IILorg/apache/storm/generated/LocalAssignment;Lorg/apache/storm/container/ResourceIsolationInterface;Lorg/apache/storm/utils/LocalState;Ljava/lang/String;Lorg/apache/storm/metric/StormMetricsRegistry;Lorg/apache/storm/daemon/supervisor/ContainerMemoryTracker;Ljava/util/Map;Lorg/apache/storm/daemon/supervisor/AdvancedFSOps;Ljava/lang/String;)V > Context: Everywhere, blocks=[BB[SSA:146..146]65 - org.apache.storm.daemon.supervisor.BasicContainer.<init>(Lorg/apache/storm/daemon/supervisor/Container$ContainerType;Ljava/util/Map;Ljava/lang/String;IILorg/apache/storm/generated/LocalAssignment;Lorg/apache/storm/container/ResourceIsolationInterface;Lorg/apache/storm/utils/LocalState;Ljava/lang/String;Lorg/apache/storm/metric/StormMetricsRegistry;Lorg/apache/storm/daemon/supervisor/ContainerMemoryTracker;Ljava/util/Map;Lorg/apache/storm/daemon/supervisor/AdvancedFSOps;Ljava/lang/String;)V, BB[SSA:144..145]64 - org.apache.storm.daemon.supervisor.BasicContainer.<init>(Lorg/apache/storm/daemon/supervisor/Container$ContainerType;Ljava/util/Map;Ljava/lang/String;IILorg/apache/storm/generated/LocalAssignment;Lorg/apache/storm/container/ResourceIsolationInterface;Lorg/apache/storm/utils/LocalState;Ljava/lang/String;Lorg/apache/storm/metric/StormMetricsRegistry;Lorg/apache/storm/daemon/supervisor/ContainerMemoryTracker;Ljava/util/Map;Lorg/apache/storm/daemon/supervisor/AdvancedFSOps;Ljava/lang/String;)V, BB[SSA:147..147]66 - org.apache.storm.daemon.supervisor.BasicContainer.<init>(Lorg/apache/storm/daemon/supervisor/Container$ContainerType;Ljava/util/Map;Ljava/lang/String;IILorg/apache/storm/generated/LocalAssignment;Lorg/apache/storm/container/ResourceIsolationInterface;Lorg/apache/storm/utils/LocalState;Ljava/lang/String;Lorg/apache/storm/metric/StormMetricsRegistry;Lorg/apache/storm/daemon/supervisor/ContainerMemoryTracker;Ljava/util/Map;Lorg/apache/storm/daemon/supervisor/AdvancedFSOps;Ljava/lang/String;)V, BB[SSA:-1..-2]94 - org.apache.storm.daemon.supervisor.BasicContainer.<init>(Lorg/apache/storm/daemon/supervisor/Container$ContainerType;Ljava/util/Map;Ljava/lang/String;IILorg/apache/storm/generated/LocalAssignment;Lorg/apache/storm/container/ResourceIsolationInterface;Lorg/apache/storm/utils/LocalState;Ljava/lang/String;Lorg/apache/storm/metric/StormMetricsRegistry;Lorg/apache/storm/daemon/supervisor/ContainerMemoryTracker;Ljava/util/Map;Lorg/apache/storm/daemon/supervisor/AdvancedFSOps;Ljava/lang/String;)V], numberOfBasicBlocks=4, firstLineNumber=173, lastLineNumber=173, firstMethodNumber=130, lastMethodNumber=186, isFirstLineValid=true, methodSrcCode=
        AdvancedFSOps ops, String profileCmd) throws IOException {
        super(type, conf, supervisorId, supervisorPort, port, assignment,
            resourceIsolationManager, workerId, topoConf, ops, metricsRegistry, containerMemoryTracker);
        if (localState == null) {
            throw new IOException("LocalState parameter value is null");
        }
        this.localState = localState;

        if (type.isRecovery() && !type.isOnlyKillable()) {
            synchronized (this.localState) {
                String wid = null;
                Map<String, Integer> workerToPort = this.localState.getApprovedWorkers();
                for (Map.Entry<String, Integer> entry : workerToPort.entrySet()) {
                    if (port == entry.getValue()) {
                        wid = entry.getKey();
                    }
                }
                if (wid == null) {
                    throw new ContainerRecoveryException("Could not find worker id for " + port + " " + assignment);
                }
                LOG.info("Recovered Worker {}", wid);
                this.workerId = wid;
            }
        } else if (this.workerId == null) {
            createNewWorkerId();
        }

        if (resourceIsolationManager instanceof OciContainerManager) {
            //When we use OciContainerManager, we will only use the profiler configured in worker-launcher.cfg due to security reasons
            LOG.debug("Supervisor is using {} as the {}."
                    + "The profiler set at worker.profiler.script.path in worker-launcher.cfg is the only profiler to be used. "
                    + "Please make sure it is configured properly",
                resourceIsolationManager.getClass().getName(), ResourceIsolationInterface.class.getName());
            this.profileCmd = "";
        } else {
            if (profileCmd == null) {
                profileCmd = stormHome + File.separator + "bin" + File.separator
                    + conf.get(DaemonConfig.WORKER_PROFILER_COMMAND);
            }
            this.profileCmd = profileCmd;
        }

        hardMemoryLimitMultiplier =
            ObjectReader.getDouble(conf.get(DaemonConfig.STORM_SUPERVISOR_HARD_MEMORY_LIMIT_MULTIPLIER), 2.0);
        hardMemoryLimitOver =
            ObjectReader.getInt(conf.get(DaemonConfig.STORM_SUPERVISOR_HARD_LIMIT_MEMORY_OVERAGE_MB), 0);
        lowMemoryThresholdMb = ObjectReader.getInt(conf.get(DaemonConfig.STORM_SUPERVISOR_LOW_MEMORY_THRESHOLD_MB), 1024);
        mediumMemoryThresholdMb =
            ObjectReader.getInt(conf.get(DaemonConfig.STORM_SUPERVISOR_MEDIUM_MEMORY_THRESHOLD_MB), 1536);
        mediumMemoryGracePeriodMs =
            ObjectReader.getInt(conf.get(DaemonConfig.STORM_SUPERVISOR_MEDIUM_MEMORY_GRACE_PERIOD_MS), 20_000);

        if (assignment != null) {
            WorkerResources resources = assignment.get_resources();
            memoryLimitMb = calculateMemoryLimit(resources, getMemOnHeap(resources));
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/scheduler/Cluster, <init>(Lorg/apache/storm/scheduler/INimbus;Lorg/apache/storm/scheduler/resource/normalization/ResourceMetrics;Ljava/util/Map;Ljava/util/Map;Lorg/apache/storm/scheduler/Topologies;Ljava/util/Map;Ljava/util/Map;Ljava/util/Set;Ljava/util/List;Ljava/util/Map;DDLjava/util/Map;)V > Context: Everywhere, blocks=[BB[SSA:133..133]72 - org.apache.storm.scheduler.Cluster.<init>(Lorg/apache/storm/scheduler/INimbus;Lorg/apache/storm/scheduler/resource/normalization/ResourceMetrics;Ljava/util/Map;Ljava/util/Map;Lorg/apache/storm/scheduler/Topologies;Ljava/util/Map;Ljava/util/Map;Ljava/util/Set;Ljava/util/List;Ljava/util/Map;DDLjava/util/Map;)V, BB[SSA:131..132]71 - org.apache.storm.scheduler.Cluster.<init>(Lorg/apache/storm/scheduler/INimbus;Lorg/apache/storm/scheduler/resource/normalization/ResourceMetrics;Ljava/util/Map;Ljava/util/Map;Lorg/apache/storm/scheduler/Topologies;Ljava/util/Map;Ljava/util/Map;Ljava/util/Set;Ljava/util/List;Ljava/util/Map;DDLjava/util/Map;)V, BB[SSA:134..134]73 - org.apache.storm.scheduler.Cluster.<init>(Lorg/apache/storm/scheduler/INimbus;Lorg/apache/storm/scheduler/resource/normalization/ResourceMetrics;Ljava/util/Map;Ljava/util/Map;Lorg/apache/storm/scheduler/Topologies;Ljava/util/Map;Ljava/util/Map;Ljava/util/Set;Ljava/util/List;Ljava/util/Map;DDLjava/util/Map;)V, BB[SSA:-1..-2]151 - org.apache.storm.scheduler.Cluster.<init>(Lorg/apache/storm/scheduler/INimbus;Lorg/apache/storm/scheduler/resource/normalization/ResourceMetrics;Ljava/util/Map;Ljava/util/Map;Lorg/apache/storm/scheduler/Topologies;Ljava/util/Map;Ljava/util/Map;Ljava/util/Set;Ljava/util/List;Ljava/util/Map;DDLjava/util/Map;)V], numberOfBasicBlocks=4, firstLineNumber=193, lastLineNumber=193, firstMethodNumber=175, lastMethodNumber=239, isFirstLineValid=true, methodSrcCode=
        double totalMemoryResource,
        Map<String, Double> totalGenericResources) {
        this.inimbus = nimbus;
        this.resourceMetrics = resourceMetrics;
        this.supervisors.putAll(supervisors);
        this.nodeToScheduledResourcesCache = new HashMap<>(this.supervisors.size());
        this.nodeToScheduledOffHeapNodeMemoryCache = new HashMap<>();
        this.nodeToUsedSlotsCache = new HashMap<>(this.supervisors.size());

        for (Map.Entry<String, SupervisorDetails> entry : supervisors.entrySet()) {
            String nodeId = entry.getKey();
            SupervisorDetails supervisor = entry.getValue();
            String host = supervisor.getHost();
            List<String> ids = hostToId.computeIfAbsent(host, k -> new ArrayList<>());
            ids.add(nodeId);
        }
        this.conf = conf;
        this.topologies = topologies;
        this.minWorkerCpu = ObjectReader.getDouble(conf.get(DaemonConfig.STORM_WORKER_MIN_CPU_PCORE_PERCENT), 0.0);

        this.totalCpuResource = Double.isNaN(totalCpuResource) ? computeClusterCpuResource() :
                                                           totalCpuResource;
        this.totalMemoryResource = Double.isNaN(totalMemoryResource) ? computeClusterMemoryResource() :
                                                                 totalMemoryResource;
        this.totalGenericResources = totalGenericResources == null ? computeClusterGenericResources() :
                                                                     totalGenericResources;

        ArrayList<String> supervisorHostNames = new ArrayList<>();
        for (SupervisorDetails s : supervisors.values()) {
            supervisorHostNames.add(s.getHost());
        }

        //Initialize the network topography
        if (networkTopography == null || networkTopography.isEmpty()) {
            //Initialize the network topography
            String clazz = (String) conf.get(Config.STORM_NETWORK_TOPOGRAPHY_PLUGIN);
            if (clazz == null || clazz.isEmpty()) {
                clazz = DefaultRackDNSToSwitchMapping.class.getName();
            }
            DNSToSwitchMapping topographyMapper = ReflectionUtils.newInstance(clazz);

            Map<String, String> resolvedSuperVisors = topographyMapper.resolve(supervisorHostNames);
            for (Map.Entry<String, String> entry : resolvedSuperVisors.entrySet()) {
                String hostName = entry.getKey();
                String rack = entry.getValue();
                List<String> nodesForRack = this.networkTopography.computeIfAbsent(rack, k -> new ArrayList<>());
                nodesForRack.add(hostName);
            }
        } else {
            this.networkTopography.putAll(networkTopography);
        }

        if (status != null) {
            this.status.putAll(status);
        }

        if (blackListedHosts != null) {
            this.blackListedHosts.addAll(blackListedHosts);
        }

        if (greyListedSupervisors != null) {
            this.greyListedSupervisors.addAll(greyListedSupervisors);
        }
        setAssignments(assignments, true);
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/supervisor/timer/SupervisorHeartbeat, mkSupervisorCapacities(Ljava/util/Map;)Ljava/util/Map; > Context: Everywhere, blocks=[BB[SSA:9..9]5 - org.apache.storm.daemon.supervisor.timer.SupervisorHeartbeat.mkSupervisorCapacities(Ljava/util/Map;)Ljava/util/Map;, BB[SSA:7..8]4 - org.apache.storm.daemon.supervisor.timer.SupervisorHeartbeat.mkSupervisorCapacities(Ljava/util/Map;)Ljava/util/Map;, BB[SSA:10..14]6 - org.apache.storm.daemon.supervisor.timer.SupervisorHeartbeat.mkSupervisorCapacities(Ljava/util/Map;)Ljava/util/Map;, BB[SSA:-1..-2]34 - org.apache.storm.daemon.supervisor.timer.SupervisorHeartbeat.mkSupervisorCapacities(Ljava/util/Map;)Ljava/util/Map;, BB[SSA:21..21]9 - org.apache.storm.daemon.supervisor.timer.SupervisorHeartbeat.mkSupervisorCapacities(Ljava/util/Map;)Ljava/util/Map;, BB[SSA:19..20]8 - org.apache.storm.daemon.supervisor.timer.SupervisorHeartbeat.mkSupervisorCapacities(Ljava/util/Map;)Ljava/util/Map;, BB[SSA:22..26]10 - org.apache.storm.daemon.supervisor.timer.SupervisorHeartbeat.mkSupervisorCapacities(Ljava/util/Map;)Ljava/util/Map;, BB[SSA:-1..-2]34 - org.apache.storm.daemon.supervisor.timer.SupervisorHeartbeat.mkSupervisorCapacities(Ljava/util/Map;)Ljava/util/Map;], numberOfBasicBlocks=8, firstLineNumber=143, lastLineNumber=144, firstMethodNumber=138, lastMethodNumber=157, isFirstLineValid=true, methodSrcCode=
    private Map<String, Double> mkSupervisorCapacities(Map<String, Object> conf) {
        Map<String, Double> ret = new HashMap<String, Double>();
        // Put in legacy values
        Double mem = ObjectReader.getDouble(conf.get(Config.SUPERVISOR_MEMORY_CAPACITY_MB), 4096.0);
        ret.put(Config.SUPERVISOR_MEMORY_CAPACITY_MB, mem);
        Double cpu = ObjectReader.getDouble(conf.get(Config.SUPERVISOR_CPU_CAPACITY), 400.0);
        ret.put(Config.SUPERVISOR_CPU_CAPACITY, cpu);


        // If configs are present in Generic map and legacy - the legacy values will be overwritten
        Map<String, Number> rawResourcesMap = (Map<String, Number>) conf.getOrDefault(
            Config.SUPERVISOR_RESOURCES_MAP, Collections.emptyMap()
        );

        for (Map.Entry<String, Number> stringNumberEntry : rawResourcesMap.entrySet()) {
            ret.put(stringNumberEntry.getKey(), stringNumberEntry.getValue().doubleValue());
        }

        LOG.debug(NormalizedResources.RESOURCE_NAME_NORMALIZER.normalizedResourceMap(ret).toString());
        return NormalizedResources.RESOURCE_NAME_NORMALIZER.normalizedResourceMap(ret);
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/utils/ObjectReader, getDouble(Ljava/lang/Object;)Ljava/lang/Double; > Context: Everywhere, blocks=[BB[SSA:0..2]1 - org.apache.storm.utils.ObjectReader.getDouble(Ljava/lang/Object;)Ljava/lang/Double;, BB[SSA:-1..-2]0 - org.apache.storm.utils.ObjectReader.getDouble(Ljava/lang/Object;)Ljava/lang/Double;, BB[SSA:3..6]2 - org.apache.storm.utils.ObjectReader.getDouble(Ljava/lang/Object;)Ljava/lang/Double;, BB[SSA:-1..-2]7 - org.apache.storm.utils.ObjectReader.getDouble(Ljava/lang/Object;)Ljava/lang/Double;], numberOfBasicBlocks=4, firstLineNumber=117, lastLineNumber=119, firstMethodNumber=117, lastMethodNumber=122, isFirstLineValid=false, methodSrcCode=
    public static Double getDouble(Object o) {
        Double result = getDouble(o, null);
        if (null == result) {
            throw new IllegalArgumentException("Don't know how to convert null to double");
        }
        return result;
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z > Context: Everywhere, blocks=[BB[SSA:6..6]4 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:4..5]3 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:7..7]5 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:-1..-2]28 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:14..14]9 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:12..13]8 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:15..15]10 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:-1..-2]28 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:24..24]14 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:22..23]13 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:25..25]15 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:-1..-2]28 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:32..32]19 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:30..31]18 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:33..33]20 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z, BB[SSA:-1..-2]28 - org.apache.storm.daemon.nimbus.Nimbus.isFragmented(Lorg/apache/storm/scheduler/SupervisorResources;)Z], numberOfBasicBlocks=16, firstLineNumber=2287, lastLineNumber=2287, firstMethodNumber=2283, lastMethodNumber=2289, isFirstLineValid=true, methodSrcCode=
    private boolean isFragmented(SupervisorResources supervisorResources) {
        double minMemory = ObjectReader.getDouble(conf.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB), 256.0)
                           + ObjectReader.getDouble(conf.get(Config.TOPOLOGY_ACKER_RESOURCES_ONHEAP_MEMORY_MB), 128.0);
        double minCpu = ObjectReader.getDouble(conf.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT), 50.0)
                        + ObjectReader.getDouble(conf.get(Config.TOPOLOGY_ACKER_CPU_PCORE_PERCENT), 50.0);

        return minMemory > supervisorResources.getAvailableMem() || minCpu > supervisorResources.getAvailableCpu();
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/scheduler/resource/normalization/NormalizedResourceRequest, parseResources(Ljava/lang/String;)Ljava/util/Map; > Context: Everywhere, blocks=[BB[SSA:26..27]11 - org.apache.storm.scheduler.resource.normalization.NormalizedResourceRequest.parseResources(Ljava/lang/String;)Ljava/util/Map;, BB[SSA:23..25]10 - org.apache.storm.scheduler.resource.normalization.NormalizedResourceRequest.parseResources(Ljava/lang/String;)Ljava/util/Map;, BB[SSA:28..32]12 - org.apache.storm.scheduler.resource.normalization.NormalizedResourceRequest.parseResources(Ljava/lang/String;)Ljava/util/Map;, BB[SSA:-1..-2]52 - org.apache.storm.scheduler.resource.normalization.NormalizedResourceRequest.parseResources(Ljava/lang/String;)Ljava/util/Map;, BB[SSA:42..43]17 - org.apache.storm.scheduler.resource.normalization.NormalizedResourceRequest.parseResources(Ljava/lang/String;)Ljava/util/Map;, BB[SSA:39..41]16 - org.apache.storm.scheduler.resource.normalization.NormalizedResourceRequest.parseResources(Ljava/lang/String;)Ljava/util/Map;, BB[SSA:44..48]18 - org.apache.storm.scheduler.resource.normalization.NormalizedResourceRequest.parseResources(Ljava/lang/String;)Ljava/util/Map;, BB[SSA:-1..-2]52 - org.apache.storm.scheduler.resource.normalization.NormalizedResourceRequest.parseResources(Ljava/lang/String;)Ljava/util/Map;, BB[SSA:58..59]23 - org.apache.storm.scheduler.resource.normalization.NormalizedResourceRequest.parseResources(Ljava/lang/String;)Ljava/util/Map;, BB[SSA:55..57]22 - org.apache.storm.scheduler.resource.normalization.NormalizedResourceRequest.parseResources(Ljava/lang/String;)Ljava/util/Map;, BB[SSA:60..64]24 - org.apache.storm.scheduler.resource.normalization.NormalizedResourceRequest.parseResources(Ljava/lang/String;)Ljava/util/Map;, BB[SSA:-1..-2]52 - org.apache.storm.scheduler.resource.normalization.NormalizedResourceRequest.parseResources(Ljava/lang/String;)Ljava/util/Map;], numberOfBasicBlocks=12, firstLineNumber=144, lastLineNumber=146, firstMethodNumber=124, lastMethodNumber=166, isFirstLineValid=true, methodSrcCode=
    private static Map<String, Double> parseResources(String input) {
        Map<String, Double> topologyResources = new HashMap<>();
        JSONParser parser = new JSONParser();
        try {
            if (input != null) {
                Object obj = parser.parse(input);
                JSONObject jsonObject = (JSONObject) obj;

                // Legacy resource parsing
                if (jsonObject.containsKey(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB)) {
                    Double topoMemOnHeap = ObjectReader
                        .getDouble(jsonObject.get(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB), null);
                    topologyResources.put(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB, topoMemOnHeap);
                }
                if (jsonObject.containsKey(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB)) {
                    Double topoMemOffHeap = ObjectReader
                        .getDouble(jsonObject.get(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB), null);
                    topologyResources.put(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB, topoMemOffHeap);
                }
                if (jsonObject.containsKey(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT)) {
                    Double topoCpu = ObjectReader.getDouble(jsonObject.get(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT),
                                                            null);
                    topologyResources.put(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT, topoCpu);
                }

                // If resource is also present in resources map will overwrite the above
                if (jsonObject.containsKey(Config.TOPOLOGY_COMPONENT_RESOURCES_MAP)) {
                    Map<String, Number> rawResourcesMap =
                        (Map<String, Number>) jsonObject.computeIfAbsent(
                            Config.TOPOLOGY_COMPONENT_RESOURCES_MAP, (k) -> new HashMap<>());

                    for (Map.Entry<String, Number> stringNumberEntry : rawResourcesMap.entrySet()) {
                        topologyResources.put(
                            stringNumberEntry.getKey(), stringNumberEntry.getValue().doubleValue());
                    }

                }
            }
        } catch (ParseException e) {
            LOG.error("Failed to parse component resources is:" + e.toString(), e);
            return null;
        }
        return topologyResources;
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/supervisor/BasicContainer, calculateMemoryLimit(Lorg/apache/storm/generated/WorkerResources;I)J > Context: Everywhere, blocks=[BB[SSA:19..19]9 - org.apache.storm.daemon.supervisor.BasicContainer.calculateMemoryLimit(Lorg/apache/storm/generated/WorkerResources;I)J, BB[SSA:17..18]8 - org.apache.storm.daemon.supervisor.BasicContainer.calculateMemoryLimit(Lorg/apache/storm/generated/WorkerResources;I)J, BB[SSA:20..20]10 - org.apache.storm.daemon.supervisor.BasicContainer.calculateMemoryLimit(Lorg/apache/storm/generated/WorkerResources;I)J, BB[SSA:-1..-2]14 - org.apache.storm.daemon.supervisor.BasicContainer.calculateMemoryLimit(Lorg/apache/storm/generated/WorkerResources;I)J], numberOfBasicBlocks=4, firstLineNumber=803, lastLineNumber=802, firstMethodNumber=795, lastMethodNumber=807, isFirstLineValid=true, methodSrcCode=
    private long calculateMemoryLimit(final WorkerResources resources, final int memOnHeap) {
        long ret = memOnHeap;
        if (resourceIsolationManager.isResourceManaged()) {
            final int memoffheap = (int) Math.ceil(resources.get_mem_off_heap());
            final int extraMem =
                (int)
                    (Math.ceil(
                        ObjectReader.getDouble(
                            conf.get(DaemonConfig.STORM_SUPERVISOR_MEMORY_LIMIT_TOLERANCE_MARGIN_MB),
                            0.0)));
            ret += memoffheap + extraMem;
        }
        return ret;
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/utils/ServerUtils, getEstimatedWorkerCountForRasTopo(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)I > Context: Everywhere, blocks=[BB[SSA:5..5]3 - org.apache.storm.utils.ServerUtils.getEstimatedWorkerCountForRasTopo(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)I, BB[SSA:3..4]2 - org.apache.storm.utils.ServerUtils.getEstimatedWorkerCountForRasTopo(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)I, BB[SSA:6..9]4 - org.apache.storm.utils.ServerUtils.getEstimatedWorkerCountForRasTopo(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)I, BB[SSA:-1..-2]10 - org.apache.storm.utils.ServerUtils.getEstimatedWorkerCountForRasTopo(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)I, BB[SSA:10..11]5 - org.apache.storm.utils.ServerUtils.getEstimatedWorkerCountForRasTopo(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)I, BB[SSA:6..9]4 - org.apache.storm.utils.ServerUtils.getEstimatedWorkerCountForRasTopo(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)I, BB[SSA:12..15]6 - org.apache.storm.utils.ServerUtils.getEstimatedWorkerCountForRasTopo(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)I, BB[SSA:-1..-2]10 - org.apache.storm.utils.ServerUtils.getEstimatedWorkerCountForRasTopo(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)I], numberOfBasicBlocks=8, firstLineNumber=690, lastLineNumber=692, firstMethodNumber=689, lastMethodNumber=692, isFirstLineValid=true, methodSrcCode=
        throws InvalidTopologyException {
        Double defaultWorkerMaxHeap = ObjectReader.getDouble(topoConf.get(Config.WORKER_HEAP_MEMORY_MB), 768d);
        Double topologyWorkerMaxHeap = ObjectReader.getDouble(topoConf.get(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB), defaultWorkerMaxHeap);
        return (int) Math.ceil(getEstimatedTotalHeapMemoryRequiredByTopo(topoConf, topology) / topologyWorkerMaxHeap);
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/utils/ServerUtils, validateTopologyWorkerMaxHeapSizeConfigs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;D)V > Context: Everywhere, blocks=[BB[SSA:9..9]4 - org.apache.storm.utils.ServerUtils.validateTopologyWorkerMaxHeapSizeConfigs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;D)V, BB[SSA:7..8]3 - org.apache.storm.utils.ServerUtils.validateTopologyWorkerMaxHeapSizeConfigs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;D)V, BB[SSA:10..10]5 - org.apache.storm.utils.ServerUtils.validateTopologyWorkerMaxHeapSizeConfigs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;D)V, BB[SSA:-1..-2]12 - org.apache.storm.utils.ServerUtils.validateTopologyWorkerMaxHeapSizeConfigs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;D)V], numberOfBasicBlocks=4, firstLineNumber=1322, lastLineNumber=1322, firstMethodNumber=1319, lastMethodNumber=1331, isFirstLineValid=true, methodSrcCode=

        double largestMemReq = getMaxExecutorMemoryUsageForTopo(topology, stormConf);
        double topologyWorkerMaxHeapSize =
            ObjectReader.getDouble(stormConf.get(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB), defaultWorkerMaxHeapSizeMb);
        if (topologyWorkerMaxHeapSize < largestMemReq) {
            throw new InvalidTopologyException(
                "Topology will not be able to be successfully scheduled: Config "
                    + "TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB="
                    + topologyWorkerMaxHeapSize
                    + " < " + largestMemReq + " (Largest memory requirement of a component in the topology)."
                    + " Perhaps set TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB to a larger amount");
        }
    }

}
