====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	HealthChecker.java	methodSinagture:	org.apache.storm.healthcheck.HealthChecker.processScript(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;	methodLines:	99:151
blockLines:	132:-1
paras:	storm.health.check.timeout.ms
TaintedStat:	NORMAL processScript:conditional branch(eq, to iindex=87) 58,33 Node: < Application, Lorg/apache/storm/healthcheck/HealthChecker, processScript(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/healthcheck/HealthChecker, processScript(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere[10]11 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 1,9 @15 exception:10
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/healthcheck/HealthChecker, processScript(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere[10]11 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 1,9 @15 exception:10
PARAM_CALLER:Node: < Application, Lorg/apache/storm/healthcheck/HealthChecker, processScript(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere[13]16 = invokestatic < Application, Lorg/apache/storm/utils/ObjectReader, getLong(Ljava/lang/Object;Ljava/lang/Long;)Ljava/lang/Long; > 11,14 @26 exception:15 v11
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/utils/ObjectReader, getLong(Ljava/lang/Object;Ljava/lang/Long;)Ljava/lang/Long; > Context: Everywhere v1
NORMAL getLong:12 = checkcast <Application,Ljava/lang/String>1 <Application,Ljava/lang/String> Node: < Application, Lorg/apache/storm/utils/ObjectReader, getLong(Ljava/lang/Object;Ljava/lang/Long;)Ljava/lang/Long; > Context: Everywhere
NORMAL getLong:14 = invokestatic < Application, Ljava/lang/Long, valueOf(Ljava/lang/String;)Ljava/lang/Long; > 12 @36 exception:13 Node: < Application, Lorg/apache/storm/utils/ObjectReader, getLong(Ljava/lang/Object;Ljava/lang/Long;)Ljava/lang/Long; > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/Long, valueOf(Ljava/lang/String;)Ljava/lang/Long; > Context: Everywhere
NORMAL valueOf:5 = invokestatic < Primordial, Ljava/lang/Long, parseLong(Ljava/lang/String;I)J > 1,3 @3 exception:4 Node: < Primordial, Ljava/lang/Long, valueOf(Ljava/lang/String;)Ljava/lang/Long; > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/Long, parseLong(Ljava/lang/String;I)J > Context: Everywhere
NORMAL parseLong:9 = invokevirtual < Primordial, Ljava/lang/String, length()I > 1 @94 exception:8 Node: < Primordial, Ljava/lang/Long, parseLong(Ljava/lang/String;I)J > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/String, length()I > Context: Everywhere
NORMAL length:return 7 Node: < Primordial, Ljava/lang/String, length()I > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/lang/String, length()I > Context: Everywhere
NORMAL_RET_CALLER:Node: < Primordial, Ljava/lang/SecurityManager, checkPackageAccess(Ljava/lang/String;)V > Context: Everywhere[53]24 = invokevirtual < Primordial, Ljava/lang/String, length()I > 2 @107 exception:23
NORMAL checkPackageAccess:conditional branch(ge, to iindex=82) 29,24 Node: < Primordial, Ljava/lang/SecurityManager, checkPackageAccess(Ljava/lang/String;)V > Context: Everywhere
NORMAL checkPackageAccess:31 = invokevirtual < Primordial, Ljava/lang/String, startsWith(Ljava/lang/String;)Z > 2,26 @154 exception:30 Node: < Primordial, Ljava/lang/SecurityManager, checkPackageAccess(Ljava/lang/String;)V > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/String, startsWith(Ljava/lang/String;)Z > Context: Everywhere
NORMAL startsWith:return 6 Node: < Primordial, Ljava/lang/String, startsWith(Ljava/lang/String;)Z > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/lang/String, startsWith(Ljava/lang/String;)Z > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/healthcheck/HealthChecker, processScript(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere[75]58 = invokevirtual < Application, Ljava/lang/String, startsWith(Ljava/lang/String;)Z > 39,56 @145 exception:57
NORMAL processScript:conditional branch(eq, to iindex=87) 58,33 Node: < Application, Lorg/apache/storm/healthcheck/HealthChecker, processScript(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    public static String processScript(Map<String, Object> conf, String script) {
        Thread interruptThread = null;
        Process process = null;
        try {
            process = Runtime.getRuntime().exec(script);
            final long timeout = ObjectReader.getLong(conf.get(DaemonConfig.STORM_HEALTH_CHECK_TIMEOUT_MS), 5000L);
            final Thread curThread = Thread.currentThread();
            // kill process when timeout
            interruptThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        Thread.sleep(timeout);
                        curThread.interrupt();
                    } catch (InterruptedException e) {
                        // Ignored
                    }
                }
            });
            interruptThread.start();
            process.waitFor();
            interruptThread.interrupt();
            curThread.interrupted();

            if (process.exitValue() != 0) {
                String outMessage = readFromStream(process.getInputStream());
                String errMessage = readFromStream(process.getErrorStream());

                LOG.warn("The healthcheck process {} exited with code: {}; output: {}; err: {}.",
                    script, process.exitValue(), outMessage, errMessage);

                //Keep this for backwards compatibility.
                //It relies on "ERROR" at the beginning of stdout to determine FAILED status
                if (outMessage.startsWith("ERROR")) {
                    return FAILED;
                }
                return FAILED_WITH_EXIT_CODE;
            }
            return SUCCESS;
        } catch (InterruptedException | ClosedByInterruptException e) {
            LOG.warn("Script:  {} timed out.", script);
            if (process != null) {
                process.destroyForcibly();
            }
            return TIMEOUT;
        } catch (Exception e) {
            LOG.warn("Script failed with exception: ", e);
            return FAILED;
        } finally {
            if (interruptThread != null) {
                interruptThread.interrupt();
            }
        }
    }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/healthcheck/HealthChecker, healthCheck(Ljava/util/Map;Lorg/apache/storm/metric/StormMetricsRegistry;)I > Context: Everywhere, blocks=[BB[SSA:68..71]30 - org.apache.storm.healthcheck.HealthChecker.healthCheck(Ljava/util/Map;Lorg/apache/storm/metric/StormMetricsRegistry;)I, BB[SSA:67..67]29 - org.apache.storm.healthcheck.HealthChecker.healthCheck(Ljava/util/Map;Lorg/apache/storm/metric/StormMetricsRegistry;)I, BB[SSA:72..75]31 - org.apache.storm.healthcheck.HealthChecker.healthCheck(Ljava/util/Map;Lorg/apache/storm/metric/StormMetricsRegistry;)I, BB[SSA:-1..-2]56 - org.apache.storm.healthcheck.HealthChecker.healthCheck(Ljava/util/Map;Lorg/apache/storm/metric/StormMetricsRegistry;)I], numberOfBasicBlocks=4, firstLineNumber=63, lastLineNumber=65, firstMethodNumber=49, lastMethodNumber=94, isFirstLineValid=true, methodSrcCode=
    public static int healthCheck(Map<String, Object> conf, StormMetricsRegistry metricRegistry) {
        String healthDir = ServerConfigUtils.absoluteHealthCheckDir(conf);
        List<String> results = new ArrayList<>();
        if (healthDir != null) {
            File parentFile = new File(healthDir);
            List<String> healthScripts = new ArrayList<String>();
            if (parentFile.exists()) {
                File[] list = parentFile.listFiles();
                for (File f : list) {
                    if (!f.isDirectory() && f.canExecute()) {
                        healthScripts.add(f.getAbsolutePath());
                    }
                }
            }
            for (String script : healthScripts) {
                String result = processScript(conf, script);
                results.add(result);
                LOG.info("The healthcheck script [ {} ] exited with status: {}", script, result);
            }
        }

        // failed_with_exit_code is OK. We're mimicing Hadoop's health checks.
        // We treat non-zero exit codes as indicators that the scripts failed
        // to execute properly, not that the system is unhealthy, in which case
        // we don't want to start killing things.

        if (results.contains(FAILED) || results.contains(FAILED_WITH_EXIT_CODE)) {
            LOG.warn("The supervisor healthchecks failed!!!");
            return 1;
        } else if (results.contains(TIMEOUT)) {
            LOG.warn("The supervisor healthchecks timedout!!!");
            if (metricRegistry != null) {
                Meter timeoutMeter = metricRegistry.getMeter(Constants.SUPERVISOR_HEALTH_CHECK_TIMEOUTS);
                if (timeoutMeter != null) {
                    timeoutMeter.mark();
                }
            }
            Boolean failOnTimeouts = ObjectReader.getBoolean(conf.get(DaemonConfig.STORM_HEALTH_CHECK_FAIL_ON_TIMEOUTS), true);
            if (failOnTimeouts) {
                return 1;
            } else {
                return 0;
            }
        } else {
            LOG.info("The supervisor healthchecks succeeded.");
            return 0;
        }
}
