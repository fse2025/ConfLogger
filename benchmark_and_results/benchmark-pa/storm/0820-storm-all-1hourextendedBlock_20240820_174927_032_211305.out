====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	ServerUtils.java	methodSinagture:	org.apache.storm.utils.ServerUtils.canUserReadBlob(Lorg/apache/storm/generated/ReadableBlobMeta;Ljava/lang/String;Ljava/util/Map;)Z	methodLines:	373:387
blockLines:	374:-1
paras:	storm.blobstore.acl.validation.enabled
TaintedStat:	NORMAL canUserReadBlob:conditional branch(ne, to iindex=9) 10,8 Node: < Application, Lorg/apache/storm/utils/ServerUtils, canUserReadBlob(Lorg/apache/storm/generated/ReadableBlobMeta;Ljava/lang/String;Ljava/util/Map;)Z > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/utils/ServerUtils, canUserReadBlob(Lorg/apache/storm/generated/ReadableBlobMeta;Ljava/lang/String;Ljava/util/Map;)Z > Context: Everywhere[2]7 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 3,5 @4 exception:6
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/utils/ServerUtils, canUserReadBlob(Lorg/apache/storm/generated/ReadableBlobMeta;Ljava/lang/String;Ljava/util/Map;)Z > Context: Everywhere[2]7 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 3,5 @4 exception:6
PARAM_CALLER:Node: < Application, Lorg/apache/storm/utils/ServerUtils, canUserReadBlob(Lorg/apache/storm/generated/ReadableBlobMeta;Ljava/lang/String;Ljava/util/Map;)Z > Context: Everywhere[4]10 = invokestatic < Application, Lorg/apache/storm/utils/ObjectReader, getBoolean(Ljava/lang/Object;Z)Z > 7,8 @10 exception:9 v7
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/utils/ObjectReader, getBoolean(Ljava/lang/Object;Z)Z > Context: Everywhere v1
NORMAL getBoolean:conditional branch(ne, to iindex=5) 4,1 Node: < Application, Lorg/apache/storm/utils/ObjectReader, getBoolean(Ljava/lang/Object;Z)Z > Context: Everywhere
NORMAL getBoolean:return 2 Node: < Application, Lorg/apache/storm/utils/ObjectReader, getBoolean(Ljava/lang/Object;Z)Z > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Application, Lorg/apache/storm/utils/ObjectReader, getBoolean(Ljava/lang/Object;Z)Z > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/utils/ServerUtils, canUserReadBlob(Lorg/apache/storm/generated/ReadableBlobMeta;Ljava/lang/String;Ljava/util/Map;)Z > Context: Everywhere[4]10 = invokestatic < Application, Lorg/apache/storm/utils/ObjectReader, getBoolean(Ljava/lang/Object;Z)Z > 7,8 @10 exception:9
NORMAL canUserReadBlob:conditional branch(ne, to iindex=9) 10,8 Node: < Application, Lorg/apache/storm/utils/ServerUtils, canUserReadBlob(Lorg/apache/storm/generated/ReadableBlobMeta;Ljava/lang/String;Ljava/util/Map;)Z > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================

        if (!ObjectReader.getBoolean(conf.get(Config.STORM_BLOBSTORE_ACL_VALIDATION_ENABLED), false)) {
            return true;
        }

        SettableBlobMeta settable = meta.get_settable();
        for (AccessControl acl : settable.get_acl()) {
            if (acl.get_type().equals(AccessControlType.OTHER) && (acl.get_access() & BlobStoreAclHandler.READ) > 0) {
                return true;
            }
            if (acl.get_name().equals(user) && (acl.get_access() & BlobStoreAclHandler.READ) > 0) {
                return true;
            }
        }
        return false;
    }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/localizer/LocalizedResource, fetchUnzipToTemp(Lorg/apache/storm/blobstore/ClientBlobStore;)J > Context: Everywhere, blocks=[BB[SSA:12..12]5 - org.apache.storm.localizer.LocalizedResource.fetchUnzipToTemp(Lorg/apache/storm/blobstore/ClientBlobStore;)J, BB[SSA:10..11]4 - org.apache.storm.localizer.LocalizedResource.fetchUnzipToTemp(Lorg/apache/storm/blobstore/ClientBlobStore;)J, BB[SSA:13..14]6 - org.apache.storm.localizer.LocalizedResource.fetchUnzipToTemp(Lorg/apache/storm/blobstore/ClientBlobStore;)J, BB[SSA:-1..-2]32 - org.apache.storm.localizer.LocalizedResource.fetchUnzipToTemp(Lorg/apache/storm/blobstore/ClientBlobStore;)J], numberOfBasicBlocks=4, firstLineNumber=254, lastLineNumber=254, firstMethodNumber=251, lastMethodNumber=286, isFirstLineValid=true, methodSrcCode=
    public long fetchUnzipToTemp(ClientBlobStore store) throws IOException, KeyNotFoundException, AuthorizationException {
        String key = getKey();
        ReadableBlobMeta meta = store.getBlobMeta(key);
        if (!ServerUtils.canUserReadBlob(meta, user, conf)) {
            throw new WrappedAuthorizationException(user + " does not have READ access to " + key);
        }

        DownloadMeta downloadMeta = fetch(store, key, v -> {
                Path path = shouldUncompress ? tmpOutputLocation() : constructBlobWithVersionFileName(baseDir, getKey(), v);
                // we need to download to temp file and then unpack into the one requested
                Path parent = path.getParent();
                if (!Files.exists(parent)) {
                    //There is a race here that we can still lose
                    try {
                        Files.createDirectories(parent);
                    } catch (FileAlreadyExistsException e) {
                        //Ignored
                    } catch (IOException e) {
                        LOG.error("Failed to create parent directory {}", parent, e);
                        throw e;
                    }
                }
                return path;
            },
            FileOutputStream::new
        );

        Path finalLocation = downloadMeta.getDownloadPath();
        if (shouldUncompress) {
            Path downloadFile = finalLocation;
            finalLocation = constructBlobWithVersionFileName(baseDir, getKey(), downloadMeta.getVersion());
            ServerUtils.unpack(downloadFile.toFile(), finalLocation.toFile(), symLinksDisabled);
            LOG.debug("Uncompressed {} to: {}", downloadFile, finalLocation);
        }
        setBlobPermissions(conf, user, finalLocation);
        return downloadMeta.getVersion();
    }
}
