====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	ZKUtil.java	methodSinagture:	org.apache.hadoop.util.ZKUtil.parseACLs(Ljava/lang/String;)Ljava/util/List;	methodLines:	97:122
blockLines:	99:-1
paras:	hadoop.zk.acl
TaintedStat:	NORMAL parseACLs:conditional branch(ne, to iindex=7) 1,5 Node: < Application, Lorg/apache/hadoop/util/ZKUtil, parseACLs(Ljava/lang/String;)Ljava/util/List; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/util/curator/ZKCuratorManager, getZKAcls(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List; > Context: Everywhere[3]6 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 1,3,4 @5 exception:5
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/util/curator/ZKCuratorManager, getZKAcls(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List; > Context: Everywhere[3]6 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 1,3,4 @5 exception:5
PARAM_CALLER:Node: < Application, Lorg/apache/hadoop/util/curator/ZKCuratorManager, getZKAcls(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List; > Context: Everywhere[6]8 = invokestatic < Application, Lorg/apache/hadoop/util/ZKUtil, resolveConfIndirection(Ljava/lang/String;)Ljava/lang/String; > 6 @10 exception:7 v6
PARAM_CALLEE:Node: < Application, Lorg/apache/hadoop/util/ZKUtil, resolveConfIndirection(Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere v1
NORMAL resolveConfIndirection:return 1 Node: < Application, Lorg/apache/hadoop/util/ZKUtil, resolveConfIndirection(Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Application, Lorg/apache/hadoop/util/ZKUtil, resolveConfIndirection(Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/util/curator/ZKCuratorManager, getZKAcls(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List; > Context: Everywhere[6]8 = invokestatic < Application, Lorg/apache/hadoop/util/ZKUtil, resolveConfIndirection(Ljava/lang/String;)Ljava/lang/String; > 6 @10 exception:7
PARAM_CALLER:Node: < Application, Lorg/apache/hadoop/util/curator/ZKCuratorManager, getZKAcls(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List; > Context: Everywhere[9]10 = invokestatic < Application, Lorg/apache/hadoop/util/ZKUtil, parseACLs(Ljava/lang/String;)Ljava/util/List; > 8 @15 exception:9 v8
PARAM_CALLEE:Node: < Application, Lorg/apache/hadoop/util/ZKUtil, parseACLs(Ljava/lang/String;)Ljava/util/List; > Context: Everywhere v1
NORMAL parseACLs:conditional branch(ne, to iindex=7) 1,5 Node: < Application, Lorg/apache/hadoop/util/ZKUtil, parseACLs(Ljava/lang/String;)Ljava/util/List; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
      BadAclFormatException {
    List<ACL> acl = Lists.newArrayList();
    if (aclString == null) {
      return acl;
    }
    
    List<String> aclComps = Lists.newArrayList(
        Splitter.on(',').omitEmptyStrings().trimResults()
        .split(aclString));
    for (String a : aclComps) {
      // from ZooKeeperMain private method
      int firstColon = a.indexOf(':');
      int lastColon = a.lastIndexOf(':');
      if (firstColon == -1 || lastColon == -1 || firstColon == lastColon) {
        throw new BadAclFormatException(
            "ACL '" + a + "' not of expected form scheme:id:perm");
      }

      ACL newAcl = new ACL();
      newAcl.setId(new Id(a.substring(0, firstColon), a.substring(
          firstColon + 1, lastColon)));
      newAcl.setPerms(getPermFromString(a.substring(lastColon + 1)));
      acl.add(newAcl);
    }
    
    return acl;
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/util/curator/ZKCuratorManager, getZKAcls(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List; > Context: Everywhere, blocks=[BB[SSA:7..9]3 - org.apache.hadoop.util.curator.ZKCuratorManager.getZKAcls(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List;, BB[SSA:4..6]2 - org.apache.hadoop.util.curator.ZKCuratorManager.getZKAcls(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List;, BB[SSA:10..10]4 - org.apache.hadoop.util.curator.ZKCuratorManager.getZKAcls(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List;, BB[SSA:-1..-2]7 - org.apache.hadoop.util.curator.ZKCuratorManager.getZKAcls(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List;], numberOfBasicBlocks=4, firstLineNumber=95, lastLineNumber=99, firstMethodNumber=94, lastMethodNumber=103, isFirstLineValid=true, methodSrcCode=
    // Parse authentication from configuration.
    String zkAclConf = conf.get(CommonConfigurationKeys.ZK_ACL,
        CommonConfigurationKeys.ZK_ACL_DEFAULT);
    try {
      zkAclConf = ZKUtil.resolveConfIndirection(zkAclConf);
      return ZKUtil.parseACLs(zkAclConf);
    } catch (IOException | ZKUtil.BadAclFormatException e) {
      LOG.error("Couldn't read ACLs based on {}",
          CommonConfigurationKeys.ZK_ACL);
      throw e;
    }
}
