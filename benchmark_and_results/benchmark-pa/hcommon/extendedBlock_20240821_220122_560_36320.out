====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	ZKDelegationTokenSecretManager.java	methodSinagture:	org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager.setJaasConfiguration(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;	methodLines:	235:253
blockLines:	238:-1
paras:	null
TaintedStat:	NORMAL setJaasConfiguration:conditional branch(ne, to iindex=18) 12,13 Node: < Application, Lorg/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager, setJaasConfiguration(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager, setJaasConfiguration(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere[3]7 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 2,4,5 @5 exception:6
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager, setJaasConfiguration(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere[3]7 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 2,4,5 @5 exception:6
NORMAL setJaasConfiguration:9 = invokevirtual < Application, Ljava/lang/String, trim()Ljava/lang/String; > 7 @8 exception:8 Node: < Application, Lorg/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager, setJaasConfiguration(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/String, trim()Ljava/lang/String; > Context: Everywhere
NORMAL trim:return 14 Node: < Primordial, Ljava/lang/String, trim()Ljava/lang/String; > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/lang/String, trim()Ljava/lang/String; > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager, setJaasConfiguration(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere[4]9 = invokevirtual < Application, Ljava/lang/String, trim()Ljava/lang/String; > 7 @8 exception:8
NORMAL setJaasConfiguration:12 = invokevirtual < Application, Ljava/lang/String, length()I > 9 @17 exception:11 Node: < Application, Lorg/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager, setJaasConfiguration(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/String, length()I > Context: Everywhere
NORMAL length:return 7 Node: < Primordial, Ljava/lang/String, length()I > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/lang/String, length()I > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager, setJaasConfiguration(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere[10]12 = invokevirtual < Application, Ljava/lang/String, length()I > 9 @17 exception:11
NORMAL setJaasConfiguration:conditional branch(ne, to iindex=18) 12,13 Node: < Application, Lorg/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager, setJaasConfiguration(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  private String setJaasConfiguration(Configuration config) throws Exception {
    String keytabFile =
        config.get(ZK_DTSM_ZK_KERBEROS_KEYTAB, "").trim();
    if (keytabFile == null || keytabFile.length() == 0) {
      throw new IllegalArgumentException(ZK_DTSM_ZK_KERBEROS_KEYTAB
          + " must be specified");
    }
    String principal =
        config.get(ZK_DTSM_ZK_KERBEROS_PRINCIPAL, "").trim();
    principal = SecurityUtil.getServerPrincipal(principal, "");
    if (principal == null || principal.length() == 0) {
      throw new IllegalArgumentException(ZK_DTSM_ZK_KERBEROS_PRINCIPAL
          + " must be specified");
    }

    JaasConfiguration jConf =
        new JaasConfiguration(JAAS_LOGIN_ENTRY_NAME, principal, keytabFile);
    javax.security.auth.login.Configuration.setConfiguration(jConf);
    return principal.split("[/@]")[0];
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager, <init>(Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere, blocks=[BB[SSA:108..110]39 - org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager.<init>(Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:105..107]38 - org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager.<init>(Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:111..114]40 - org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager.<init>(Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:-1..-2]88 - org.apache.hadoop.security.token.delegation.ZKDelegationTokenSecretManager.<init>(Lorg/apache/hadoop/conf/Configuration;)V], numberOfBasicBlocks=4, firstLineNumber=190, lastLineNumber=193, firstMethodNumber=154, lastMethodNumber=233, isFirstLineValid=true, methodSrcCode=
  public ZKDelegationTokenSecretManager(Configuration conf) {
    super(conf.getLong(DelegationTokenManager.UPDATE_INTERVAL,
        DelegationTokenManager.UPDATE_INTERVAL_DEFAULT) * 1000,
        conf.getLong(DelegationTokenManager.MAX_LIFETIME,
            DelegationTokenManager.MAX_LIFETIME_DEFAULT) * 1000,
        conf.getLong(DelegationTokenManager.RENEW_INTERVAL,
            DelegationTokenManager.RENEW_INTERVAL_DEFAULT) * 1000,
        conf.getLong(DelegationTokenManager.REMOVAL_SCAN_INTERVAL,
            DelegationTokenManager.REMOVAL_SCAN_INTERVAL_DEFAULT) * 1000);
    seqNumBatchSize = conf.getInt(ZK_DTSM_TOKEN_SEQNUM_BATCH_SIZE,
        ZK_DTSM_TOKEN_SEQNUM_BATCH_SIZE_DEFAULT);
    isTokenWatcherEnabled = conf.getBoolean(ZK_DTSM_TOKEN_WATCHER_ENABLED,
        ZK_DTSM_TOKEN_WATCHER_ENABLED_DEFAULT);
    if (CURATOR_TL.get() != null) {
      zkClient =
          CURATOR_TL.get().usingNamespace(
              conf.get(ZK_DTSM_ZNODE_WORKING_PATH,
                  ZK_DTSM_ZNODE_WORKING_PATH_DEAFULT)
                  + "/" + ZK_DTSM_NAMESPACE);
      isExternalClient = true;
    } else {
      String connString = conf.get(ZK_DTSM_ZK_CONNECTION_STRING);
      Preconditions.checkNotNull(connString,
          "Zookeeper connection string cannot be null");
      String authType = conf.get(ZK_DTSM_ZK_AUTH_TYPE);

      // AuthType has to be explicitly set to 'none' or 'sasl'
      Preconditions.checkNotNull(authType, "Zookeeper authType cannot be null !!");
      Preconditions.checkArgument(
          authType.equals("sasl") || authType.equals("none"),
          "Zookeeper authType must be one of [none, sasl]");

      Builder builder = null;
      try {
        ACLProvider aclProvider = null;
        if (authType.equals("sasl")) {
          LOG.info("Connecting to ZooKeeper with SASL/Kerberos"
              + "and using 'sasl' ACLs");
          String principal = setJaasConfiguration(conf);
          System.setProperty(ZKClientConfig.LOGIN_CONTEXT_NAME_KEY,
                             JAAS_LOGIN_ENTRY_NAME);
          System.setProperty("zookeeper.authProvider.1",
              "org.apache.zookeeper.server.auth.SASLAuthenticationProvider");
          aclProvider = new SASLOwnerACLProvider(principal);
        } else { // "none"
          LOG.info("Connecting to ZooKeeper without authentication");
          aclProvider = new DefaultACLProvider(); // open to everyone
        }
        int sessionT =
            conf.getInt(ZK_DTSM_ZK_SESSION_TIMEOUT,
                ZK_DTSM_ZK_SESSION_TIMEOUT_DEFAULT);
        int numRetries =
            conf.getInt(ZK_DTSM_ZK_NUM_RETRIES, ZK_DTSM_ZK_NUM_RETRIES_DEFAULT);
        builder =
            CuratorFrameworkFactory
                .builder()
                .zookeeperFactory(new ZKCuratorManager.HadoopZookeeperFactory(
                    conf.get(ZK_DTSM_ZK_KERBEROS_SERVER_PRINCIPAL)))
                .aclProvider(aclProvider)
                .namespace(
                    conf.get(ZK_DTSM_ZNODE_WORKING_PATH,
                        ZK_DTSM_ZNODE_WORKING_PATH_DEAFULT)
                        + "/"
                        + ZK_DTSM_NAMESPACE
                )
                .sessionTimeoutMs(sessionT)
                .connectionTimeoutMs(
                    conf.getInt(ZK_DTSM_ZK_CONNECTION_TIMEOUT,
                        ZK_DTSM_ZK_CONNECTION_TIMEOUT_DEFAULT)
                )
                .retryPolicy(
                    new RetryNTimes(numRetries, sessionT / numRetries));
      } catch (Exception ex) {
        throw new RuntimeException("Could not Load ZK acls or auth: " + ex, ex);
      }
      zkClient = builder.ensembleProvider(new FixedEnsembleProvider(connString))
          .build();
      isExternalClient = false;
    }
  }

}
