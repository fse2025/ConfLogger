====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	SecurityUtil.java	methodSinagture:	org.apache.hadoop.security.SecurityUtil.getZKAuthInfos(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Ljava/util/List;	methodLines:	775:788
blockLines:	777:-1
paras:	null
TaintedStat:	NORMAL getZKAuthInfos:conditional branch(eq, to iindex=10) 5,6 Node: < Application, Lorg/apache/hadoop/security/SecurityUtil, getZKAuthInfos(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Ljava/util/List; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/SecurityUtil, getZKAuthInfos(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Ljava/util/List; > Context: Everywhere[2]5 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getPassword(Ljava/lang/String;)[C > 1,2 @2 exception:4
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/SecurityUtil, getZKAuthInfos(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Ljava/util/List; > Context: Everywhere[2]5 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getPassword(Ljava/lang/String;)[C > 1,2 @2 exception:4
NORMAL getZKAuthInfos:conditional branch(eq, to iindex=10) 5,6 Node: < Application, Lorg/apache/hadoop/security/SecurityUtil, getZKAuthInfos(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Ljava/util/List; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
      String configKey) throws IOException {
    char[] zkAuthChars = conf.getPassword(configKey);
    String zkAuthConf =
        zkAuthChars != null ? String.valueOf(zkAuthChars) : null;
    try {
      zkAuthConf = ZKUtil.resolveConfIndirection(zkAuthConf);
      if (zkAuthConf != null) {
        return ZKUtil.parseAuth(zkAuthConf);
      } else {
        return Collections.emptyList();
      }
    } catch (IOException | ZKUtil.BadAuthFormatException e) {
      LOG.error("Couldn't read Auth based on {}", configKey);
      throw e;
    }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/util/curator/ZKCuratorManager, getZKAuths(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List; > Context: Everywhere, blocks=[BB[SSA:0..2]1 - org.apache.hadoop.util.curator.ZKCuratorManager.getZKAuths(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List;, BB[SSA:-1..-2]0 - org.apache.hadoop.util.curator.ZKCuratorManager.getZKAuths(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List;, BB[SSA:3..3]2 - org.apache.hadoop.util.curator.ZKCuratorManager.getZKAuths(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List;, BB[SSA:-1..-2]3 - org.apache.hadoop.util.curator.ZKCuratorManager.getZKAuths(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/List;], numberOfBasicBlocks=4, firstLineNumber=117, lastLineNumber=118, firstMethodNumber=117, lastMethodNumber=118, isFirstLineValid=false, methodSrcCode=
      throws IOException {
    return SecurityUtil.getZKAuthInfos(conf, CommonConfigurationKeys.ZK_AUTH);
  }
}
