====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	FSImageCompression.java	methodSinagture:	org.apache.hadoop.hdfs.server.namenode.FSImageCompression.createCompression(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/server/namenode/FSImageCompression;	methodLines:	77:89
blockLines:	82:-1
paras:	dfs.image.compress
TaintedStat:	NORMAL createCompression:conditional branch(ne, to iindex=10) 6,4 Node: < Application, Lorg/apache/hadoop/hdfs/server/namenode/FSImageCompression, createCompression(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/server/namenode/FSImageCompression; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/server/namenode/FSImageCompression, createCompression(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/server/namenode/FSImageCompression; > Context: Everywhere[3]6 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 1,3,4 @4 exception:5
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/server/namenode/FSImageCompression, createCompression(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/server/namenode/FSImageCompression; > Context: Everywhere[3]6 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 1,3,4 @4 exception:5
NORMAL createCompression:conditional branch(ne, to iindex=10) 6,4 Node: < Application, Lorg/apache/hadoop/hdfs/server/namenode/FSImageCompression, createCompression(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/server/namenode/FSImageCompression; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    throws IOException {
    boolean compressImage = conf.getBoolean(
      DFSConfigKeys.DFS_IMAGE_COMPRESS_KEY,
      DFSConfigKeys.DFS_IMAGE_COMPRESS_DEFAULT);

    if (!compressImage) {
      return createNoopCompression();
    }

    String codecClassName = conf.get(
      DFSConfigKeys.DFS_IMAGE_COMPRESSION_CODEC_KEY,
      DFSConfigKeys.DFS_IMAGE_COMPRESSION_CODEC_DEFAULT);
    return createCompression(conf, codecClassName);
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/hdfs/server/namenode/FSImage, saveLegacyOIVImage(Lorg/apache/hadoop/hdfs/server/namenode/FSNamesystem;Ljava/lang/String;Lorg/apache/hadoop/hdfs/util/Canceler;)V > Context: Everywhere, blocks=[BB[SSA:2..2]2 - org.apache.hadoop.hdfs.server.namenode.FSImage.saveLegacyOIVImage(Lorg/apache/hadoop/hdfs/server/namenode/FSNamesystem;Ljava/lang/String;Lorg/apache/hadoop/hdfs/util/Canceler;)V, BB[SSA:0..1]1 - org.apache.hadoop.hdfs.server.namenode.FSImage.saveLegacyOIVImage(Lorg/apache/hadoop/hdfs/server/namenode/FSNamesystem;Ljava/lang/String;Lorg/apache/hadoop/hdfs/util/Canceler;)V, BB[SSA:3..5]3 - org.apache.hadoop.hdfs.server.namenode.FSImage.saveLegacyOIVImage(Lorg/apache/hadoop/hdfs/server/namenode/FSNamesystem;Ljava/lang/String;Lorg/apache/hadoop/hdfs/util/Canceler;)V, BB[SSA:-1..-2]15 - org.apache.hadoop.hdfs.server.namenode.FSImage.saveLegacyOIVImage(Lorg/apache/hadoop/hdfs/server/namenode/FSNamesystem;Ljava/lang/String;Lorg/apache/hadoop/hdfs/util/Canceler;)V], numberOfBasicBlocks=4, firstLineNumber=1013, lastLineNumber=1015, firstMethodNumber=1012, lastMethodNumber=1023, isFirstLineValid=true, methodSrcCode=
      Canceler canceler) throws IOException {
    FSImageCompression compression =
        FSImageCompression.createCompression(conf);
    long txid = getCorrectLastAppliedOrWrittenTxId();
    SaveNamespaceContext ctx = new SaveNamespaceContext(source, txid,
        canceler);
    FSImageFormat.Saver saver = new FSImageFormat.Saver(ctx);
    String imageFileName = NNStorage.getLegacyOIVImageFileName(txid);
    File imageFile = new File(targetDir, imageFileName);
    saver.save(imageFile, compression);
    archivalManager.purgeOldLegacyOIVImages(targetDir, txid);
  }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/hdfs/server/namenode/FSImage, saveFSImage(Lorg/apache/hadoop/hdfs/server/namenode/SaveNamespaceContext;Lorg/apache/hadoop/hdfs/server/common/Storage$StorageDirectory;Lorg/apache/hadoop/hdfs/server/namenode/NNStorage$NameNodeFile;)V > Context: Everywhere, blocks=[BB[SSA:22..22]8 - org.apache.hadoop.hdfs.server.namenode.FSImage.saveFSImage(Lorg/apache/hadoop/hdfs/server/namenode/SaveNamespaceContext;Lorg/apache/hadoop/hdfs/server/common/Storage$StorageDirectory;Lorg/apache/hadoop/hdfs/server/namenode/NNStorage$NameNodeFile;)V, BB[SSA:19..21]7 - org.apache.hadoop.hdfs.server.namenode.FSImage.saveFSImage(Lorg/apache/hadoop/hdfs/server/namenode/SaveNamespaceContext;Lorg/apache/hadoop/hdfs/server/common/Storage$StorageDirectory;Lorg/apache/hadoop/hdfs/server/namenode/NNStorage$NameNodeFile;)V, BB[SSA:23..27]9 - org.apache.hadoop.hdfs.server.namenode.FSImage.saveFSImage(Lorg/apache/hadoop/hdfs/server/namenode/SaveNamespaceContext;Lorg/apache/hadoop/hdfs/server/common/Storage$StorageDirectory;Lorg/apache/hadoop/hdfs/server/namenode/NNStorage$NameNodeFile;)V, BB[SSA:-1..-2]27 - org.apache.hadoop.hdfs.server.namenode.FSImage.saveFSImage(Lorg/apache/hadoop/hdfs/server/namenode/SaveNamespaceContext;Lorg/apache/hadoop/hdfs/server/common/Storage$StorageDirectory;Lorg/apache/hadoop/hdfs/server/namenode/NNStorage$NameNodeFile;)V], numberOfBasicBlocks=4, firstLineNumber=992, lastLineNumber=995, firstMethodNumber=987, lastMethodNumber=1005, isFirstLineValid=true, methodSrcCode=
      NameNodeFile dstType) throws IOException {
    long txid = context.getTxId();
    File newFile = NNStorage.getStorageFile(sd, NameNodeFile.IMAGE_NEW, txid);
    File dstFile = NNStorage.getStorageFile(sd, dstType, txid);
    
    FSImageFormatProtobuf.Saver saver = new FSImageFormatProtobuf.Saver(context,
        conf);
    FSImageCompression compression = FSImageCompression.createCompression(conf);
    long numErrors = saver.save(newFile, compression);
    if (numErrors > 0) {
      // The image is likely corrupted.
      LOG.error("Detected " + numErrors + " errors while saving FsImage " +
          dstFile);
      exitAfterSave.set(true);
    }

    MD5FileUtils.saveMD5File(dstFile, saver.getSavedDigest());
    storage.setMostRecentCheckpointInfo(txid, Time.now());
  }

}
