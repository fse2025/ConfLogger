====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	BlockTokenSecretManager.java	methodSinagture:	org.apache.hadoop.hdfs.security.token.block.BlockTokenSecretManager.<init>(JJIILjava/lang/String;Ljava/lang/String;ZZ)V	methodLines:	121:126
blockLines:	124:-1
paras:	dfs.block.access.key.update.interval
TaintedStat:	NORMAL <init>:conditional branch(lt, to iindex=16) 4,13 Node: < Application, Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager, <init>(JJIILjava/lang/String;Ljava/lang/String;ZZ)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/server/blockmanagement/BlockManager, createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager; > Context: Everywhere[29]15 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getLong(Ljava/lang/String;J)J > 1,12,13 @54 exception:14
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/server/blockmanagement/BlockManager, createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager; > Context: Everywhere[29]15 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getLong(Ljava/lang/String;J)J > 1,12,13 @54 exception:14
NORMAL createBlockTokenSecretManager:28 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 15 @95 exception:27 Node: < Application, Lorg/apache/hadoop/hdfs/server/blockmanagement/BlockManager, createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager; > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL valueOf:conditional branch(lt, to iindex=19) 5,6 Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL valueOf:return 9 Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL_RET_CALLER:Node: < Extension, Lorg/apache/hadoop/util/Time, formatTime(J)Ljava/lang/String; > Context: Everywhere[4]8 = invokestatic < Extension, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 1 @10 exception:7
NORMAL formatTime:10 = invokevirtual < Extension, Ljava/text/SimpleDateFormat, format(Ljava/lang/Object;)Ljava/lang/String; > 6,8 @13 exception:9 Node: < Extension, Lorg/apache/hadoop/util/Time, formatTime(J)Ljava/lang/String; > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/text/Format, format(Ljava/lang/Object;)Ljava/lang/String; > Context: Everywhere
NORMAL format:return 12 Node: < Primordial, Ljava/text/Format, format(Ljava/lang/Object;)Ljava/lang/String; > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/text/Format, format(Ljava/lang/Object;)Ljava/lang/String; > Context: Everywhere
NORMAL_RET_CALLER:Node: < Primordial, Ljava/text/MessageFormat, subformat([Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;Ljava/util/List;)Ljava/lang/StringBuffer; > Context: Everywhere[81]31 = invokevirtual < Primordial, Ljava/text/Format, format(Ljava/lang/Object;)Ljava/lang/String; > 29,22 @148 exception:30
PHI Node: < Primordial, Ljava/text/MessageFormat, subformat([Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;Ljava/util/List;)Ljava/lang/StringBuffer; > Context: Everywhere:53 = phi  40,20,31,20,20,20,51,39,40
PHI Node: < Primordial, Ljava/text/MessageFormat, subformat([Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;Ljava/util/List;)Ljava/lang/StringBuffer; > Context: Everywhere:82 = phi  53,20
NORMAL subformat:84 = invokevirtual < Primordial, Ljava/lang/String, isEmpty()Z > 82 @369 exception:83 Node: < Primordial, Ljava/text/MessageFormat, subformat([Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;Ljava/util/List;)Ljava/lang/StringBuffer; > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/String, isEmpty()Z > Context: Everywhere
NORMAL isEmpty:return 7 Node: < Primordial, Ljava/lang/String, isEmpty()Z > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/lang/String, isEmpty()Z > Context: Everywhere
NORMAL_RET_CALLER:Node: < Extension, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > Context: Everywhere[8]9 = invokevirtual < Extension, Ljava/lang/String, isEmpty()Z > 6 @12 exception:8
NORMAL getBoolean:conditional branch(eq, to iindex=13) 9,10 Node: < Extension, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > Context: Everywhere
NORMAL getBoolean:return 3 Node: < Extension, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Extension, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/server/blockmanagement/BlockManager, createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager; > Context: Everywhere[3]6 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 1,3,4 @4 exception:5
NORMAL createBlockTokenSecretManager:conditional branch(ne, to iindex=26) 6,4 Node: < Application, Lorg/apache/hadoop/hdfs/server/blockmanagement/BlockManager, createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager; > Context: Everywhere
NORMAL createBlockTokenSecretManager:conditional branch(eq, to iindex=144) 39,4 Node: < Application, Lorg/apache/hadoop/hdfs/server/blockmanagement/BlockManager, createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager; > Context: Everywhere
PHI Node: < Application, Lorg/apache/hadoop/hdfs/server/blockmanagement/BlockManager, createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager; > Context: Everywhere:69 = phi  68,4
PARAM_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/server/blockmanagement/BlockManager, createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager; > Context: Everywhere[142]invokespecial < Application, Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager, <init>(JJIILjava/lang/String;Ljava/lang/String;ZZ)V > 70,72,74,69,76,53,21,42,45 @272 exception:77 v69
PARAM_CALLEE:Node: < Application, Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager, <init>(JJIILjava/lang/String;Ljava/lang/String;ZZ)V > Context: Everywhere v4
NORMAL <init>:conditional branch(lt, to iindex=16) 4,13 Node: < Application, Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager, <init>(JJIILjava/lang/String;Ljava/lang/String;ZZ)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
      String encryptionAlgorithm, boolean useProto, boolean shouldWrapQOP) {
    this(true, keyUpdateInterval, tokenLifetime, blockPoolId,
        encryptionAlgorithm, nnIndex, numNNs, useProto, shouldWrapQOP);
    Preconditions.checkArgument(nnIndex >= 0);
    Preconditions.checkArgument(numNNs > 0);
  }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/hdfs/server/blockmanagement/BlockManager, createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager; > Context: Everywhere, blocks=[BB[SSA:138..142]43 - org.apache.hadoop.hdfs.server.blockmanagement.BlockManager.createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager;, BB[SSA:124..137]42 - org.apache.hadoop.hdfs.server.blockmanagement.BlockManager.createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager;, BB[SSA:143..143]44 - org.apache.hadoop.hdfs.server.blockmanagement.BlockManager.createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager;, BB[SSA:-1..-2]48 - org.apache.hadoop.hdfs.server.blockmanagement.BlockManager.createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager;, BB[SSA:145..162]46 - org.apache.hadoop.hdfs.server.blockmanagement.BlockManager.createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager;, BB[SSA:144..144]45 - org.apache.hadoop.hdfs.server.blockmanagement.BlockManager.createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager;, BB[SSA:163..163]47 - org.apache.hadoop.hdfs.server.blockmanagement.BlockManager.createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager;, BB[SSA:-1..-2]48 - org.apache.hadoop.hdfs.server.blockmanagement.BlockManager.createBlockTokenSecretManager(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager;], numberOfBasicBlocks=8, firstLineNumber=684, lastLineNumber=684, firstMethodNumber=629, lastMethodNumber=684, isFirstLineValid=true, methodSrcCode=
      final Configuration conf) throws IOException {
    final boolean isEnabled = conf.getBoolean(
        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY, 
        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_DEFAULT);
    LOG.info("{} = {}", DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY,
            isEnabled);

    if (!isEnabled) {
      if (UserGroupInformation.isSecurityEnabled()) {
        String errMessage = "Security is enabled but block access tokens " +
            "(via " + DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY + ") " +
            "aren't enabled. This may cause issues " +
            "when clients attempt to connect to a DataNode. Aborting NameNode";
        throw new IOException(errMessage);
      }
      return null;
    }

    final long updateMin = conf.getLong(
        DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY, 
        DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_DEFAULT);
    final long lifetimeMin = conf.getLong(
        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY, 
        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_DEFAULT);
    final String encryptionAlgorithm = conf.get(
        DFSConfigKeys.DFS_DATA_ENCRYPTION_ALGORITHM_KEY);
    LOG.info("{}={} min(s), {}={} min(s), {}={}",
        DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY, updateMin,
        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY, lifetimeMin,
        DFSConfigKeys.DFS_DATA_ENCRYPTION_ALGORITHM_KEY, encryptionAlgorithm);
    
    String nsId = DFSUtil.getNamenodeNameServiceId(conf);
    boolean isHaEnabled = HAUtil.isHAEnabled(conf, nsId);
    boolean shouldWriteProtobufToken = conf.getBoolean(
        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_PROTOBUF_ENABLE,
        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_PROTOBUF_ENABLE_DEFAULT);

    boolean shouldWrapQOP = conf.getBoolean(
        DFS_NAMENODE_SEND_QOP_ENABLED, DFS_NAMENODE_SEND_QOP_ENABLED_DEFAULT);

    if (isHaEnabled) {
      // figure out which index we are of the nns
      Collection<String> nnIds = DFSUtilClient.getNameNodeIds(conf, nsId);
      String nnId = HAUtil.getNameNodeId(conf, nsId);
      int nnIndex = 0;
      for (String id : nnIds) {
        if (id.equals(nnId)) {
          break;
        }
        nnIndex++;
      }
      return new BlockTokenSecretManager(updateMin * 60 * 1000L,
          lifetimeMin * 60 * 1000L, nnIndex, nnIds.size(), null,
          encryptionAlgorithm, shouldWriteProtobufToken, shouldWrapQOP);
    } else {
      return new BlockTokenSecretManager(updateMin*60*1000L,
          lifetimeMin*60*1000L, 0, 1, null, encryptionAlgorithm,
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager, <init>(JJIILjava/lang/String;Ljava/lang/String;Z)V > Context: Everywhere, blocks=[BB[SSA:0..9]1 - org.apache.hadoop.hdfs.security.token.block.BlockTokenSecretManager.<init>(JJIILjava/lang/String;Ljava/lang/String;Z)V, BB[SSA:-1..-2]0 - org.apache.hadoop.hdfs.security.token.block.BlockTokenSecretManager.<init>(JJIILjava/lang/String;Ljava/lang/String;Z)V, BB[SSA:10..10]2 - org.apache.hadoop.hdfs.security.token.block.BlockTokenSecretManager.<init>(JJIILjava/lang/String;Ljava/lang/String;Z)V, BB[SSA:-1..-2]3 - org.apache.hadoop.hdfs.security.token.block.BlockTokenSecretManager.<init>(JJIILjava/lang/String;Ljava/lang/String;Z)V], numberOfBasicBlocks=4, firstLineNumber=114, lastLineNumber=117, firstMethodNumber=114, lastMethodNumber=117, isFirstLineValid=false, methodSrcCode=
      String encryptionAlgorithm, boolean useProto) {
    this(keyUpdateInterval, tokenLifetime, nnIndex, numNNs,
        blockPoolId, encryptionAlgorithm, useProto, false);
  }

}
