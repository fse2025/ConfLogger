====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	JournalNodeSyncer.java	methodSinagture:	org.apache.hadoop.hdfs.qjournal.server.JournalNodeSyncer.getOtherJournalNodeAddrs()Ljava/util/List;	methodLines:	268:315
blockLines:	280:-1
paras:	null
TaintedStat:	NORMAL getOtherJournalNodeAddrs:conditional branch(eq, to iindex=38) 26,8 Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere[29]25 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getTrimmed(Ljava/lang/String;)Ljava/lang/String; > 13,23 @57 exception:24
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere[29]25 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getTrimmed(Ljava/lang/String;)Ljava/lang/String; > 13,23 @57 exception:24
PHI Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere:26 = phi  7,7,25
NORMAL getOtherJournalNodeAddrs:conditional branch(eq, to iindex=38) 26,8 Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	JournalNodeSyncer.java	methodSinagture:	org.apache.hadoop.hdfs.qjournal.server.JournalNodeSyncer.getOtherJournalNodeAddrs()Ljava/util/List;	methodLines:	268:315
blockLines:	302:-1
paras:	null
TaintedStat:	NORMAL getOtherJournalNodeAddrs:conditional branch(eq, to iindex=119) 91,8 Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere[83]65 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getTrimmed(Ljava/lang/String;)Ljava/lang/String; > 55,63 @178 exception:64
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere[83]65 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getTrimmed(Ljava/lang/String;)Ljava/lang/String; > 55,63 @178 exception:64
PHI Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere:68 = phi  65,26
PHI Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere:91 = phi  26,26,68,8
NORMAL getOtherJournalNodeAddrs:conditional branch(eq, to iindex=119) 91,8 Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	JournalNodeSyncer.java	methodSinagture:	org.apache.hadoop.hdfs.qjournal.server.JournalNodeSyncer.getOtherJournalNodeAddrs()Ljava/util/List;	methodLines:	268:315
blockLines:	273:-1
paras:	dfs.namenode.shared.edits.dir
TaintedStat:	NORMAL getOtherJournalNodeAddrs:conditional branch(eq, to iindex=14) 7,8 Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere[5]7 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getTrimmed(Ljava/lang/String;)Ljava/lang/String; > 4,5 @9 exception:6
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere[5]7 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getTrimmed(Ljava/lang/String;)Ljava/lang/String; > 4,5 @9 exception:6
NORMAL getOtherJournalNodeAddrs:conditional branch(eq, to iindex=14) 7,8 Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeAddrs()Ljava/util/List; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  private List<InetSocketAddress> getOtherJournalNodeAddrs() {
    String uriStr = "";
    try {
      uriStr = conf.getTrimmed(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY);

      if (uriStr == null || uriStr.isEmpty()) {
        if (nameServiceId != null) {
          uriStr = conf.getTrimmed(DFSConfigKeys
              .DFS_NAMENODE_SHARED_EDITS_DIR_KEY + "." + nameServiceId);
        }
      }

      if (uriStr == null || uriStr.isEmpty()) {
        HashSet<String> sharedEditsUri = Sets.newHashSet();
        if (nameServiceId != null) {
          Collection<String> nnIds = DFSUtilClient.getNameNodeIds(
              conf, nameServiceId);
          for (String nnId : nnIds) {
            String suffix = nameServiceId + "." + nnId;
            uriStr = conf.getTrimmed(DFSConfigKeys
                .DFS_NAMENODE_SHARED_EDITS_DIR_KEY + "." + suffix);
            sharedEditsUri.add(uriStr);
          }
          if (sharedEditsUri.size() > 1) {
            uriStr = null;
            LOG.error("The conf property " + DFSConfigKeys
                .DFS_NAMENODE_SHARED_EDITS_DIR_KEY + " not set properly, " +
                "it has been configured with different journalnode values " +
                sharedEditsUri.toString() + " for a" +
                " single nameserviceId" + nameServiceId);
          }
        }
      }

      if (uriStr == null || uriStr.isEmpty()) {
        LOG.error("Could not construct Shared Edits Uri");
        return null;
      } else {
        return getJournalAddrList(uriStr);
      }

    } catch (URISyntaxException e) {
      LOG.error("The conf property " + DFSConfigKeys
          .DFS_NAMENODE_SHARED_EDITS_DIR_KEY + " not set properly.");
    } catch (IOException e) {
      LOG.error("Could not parse JournalNode addresses: " + uriStr);
    }
    return null;
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer, getOtherJournalNodeProxies()Z > Context: Everywhere, blocks=[BB[SSA:0..1]1 - org.apache.hadoop.hdfs.qjournal.server.JournalNodeSyncer.getOtherJournalNodeProxies()Z, BB[SSA:-1..-2]0 - org.apache.hadoop.hdfs.qjournal.server.JournalNodeSyncer.getOtherJournalNodeProxies()Z, BB[SSA:2..5]2 - org.apache.hadoop.hdfs.qjournal.server.JournalNodeSyncer.getOtherJournalNodeProxies()Z, BB[SSA:-1..-2]34 - org.apache.hadoop.hdfs.qjournal.server.JournalNodeSyncer.getOtherJournalNodeProxies()Z], numberOfBasicBlocks=4, firstLineNumber=144, lastLineNumber=146, firstMethodNumber=144, lastMethodNumber=166, isFirstLineValid=false, methodSrcCode=
  private boolean getOtherJournalNodeProxies() {
    List<InetSocketAddress> otherJournalNodes = getOtherJournalNodeAddrs();
    if (otherJournalNodes == null || otherJournalNodes.isEmpty()) {
      LOG.warn("Other JournalNode addresses not available. Journal Syncing " +
          "cannot be done");
      return false;
    }
    for (InetSocketAddress addr : otherJournalNodes) {
      try {
        otherJNProxies.add(new JournalNodeProxy(addr));
      } catch (IOException e) {
        LOG.warn("Could not add proxy for Journal at addresss " + addr, e);
      }
    }
    // Check if there are any other JournalNodes before starting the sync.  Although some proxies
    // may be unresolved now, the act of attempting to sync will instigate resolution when the
    // servers become available.
    if (otherJNProxies.isEmpty()) {
      LOG.error("Cannot sync as there is no other JN available for sync.");
      return false;
    }
    numOtherJNs = otherJNProxies.size();
    return true;
  }
}
