====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	QuorumOracleMaj.java	methodSinagture:	org.apache.zookeeper.server.quorum.flexible.QuorumOracleMaj.revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z	methodLines:	122:149
blockLines:	130:-1
paras:	null
TaintedStat:	NORMAL revalidateOutstandingProp:conditional branch(ge, to iindex=66) 15,17 Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z > Context: Everywhere[59]46 = invokevirtual < Application, Lorg/apache/zookeeper/server/quorum/Leader$Proposal, getZxid()J > 20 @122 exception:45
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z > Context: Everywhere[59]46 = invokevirtual < Application, Lorg/apache/zookeeper/server/quorum/Leader$Proposal, getZxid()J > 20 @122 exception:45
PHI Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z > Context: Everywhere:49 = phi  49,46,50
NORMAL revalidateOutstandingProp:23 = compare 22,49 opcode=cmp Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z > Context: Everywhere
NORMAL revalidateOutstandingProp:conditional branch(le, to iindex=12) 23,15 Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z > Context: Everywhere
NORMAL revalidateOutstandingProp:conditional branch(ge, to iindex=66) 15,17 Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	QuorumOracleMaj.java	methodSinagture:	org.apache.zookeeper.server.quorum.flexible.QuorumOracleMaj.revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z	methodLines:	122:149
blockLines:	132:-1
paras:	null
TaintedStat:	NORMAL revalidateOutstandingProp:conditional branch(le, to iindex=12) 23,15 Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z > Context: Everywhere[22]22 = invokevirtual < Application, Lorg/apache/zookeeper/server/quorum/Leader$Proposal, getZxid()J > 20 @52 exception:21
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z > Context: Everywhere[22]22 = invokevirtual < Application, Lorg/apache/zookeeper/server/quorum/Leader$Proposal, getZxid()J > 20 @52 exception:21
NORMAL revalidateOutstandingProp:23 = compare 22,49 opcode=cmp Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z > Context: Everywhere
NORMAL revalidateOutstandingProp:conditional branch(le, to iindex=12) 23,15 Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateOutstandingProp(Lorg/apache/zookeeper/server/quorum/Leader;Ljava/util/ArrayList;J)Z > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    public boolean revalidateOutstandingProp(Leader self, ArrayList<Leader.Proposal> outstandingProposal, long lastCommitted) {
        LOG.debug("Start Revalidation outstandingProposals");
        try {
            while (outstandingProposal.size() >= 1) {
                outstandingProposal.sort((o1, o2) -> (int) (o1.getZxid() - o2.getZxid()));

                Leader.Proposal p;
                int i = 0;
                while (i < outstandingProposal.size()) {
                    p = outstandingProposal.get(i);
                    if (p.getZxid() > lastCommitted) {
                        LOG.debug("Re-validate outstanding proposal: 0x{} size:{} lastCommitted:{}", Long.toHexString(p.getZxid()), outstandingProposal.size(), Long.toHexString(lastCommitted));
                        if (!self.tryToCommit(p, p.getZxid(), null)) {
                            break;
                        } else {
                            lastCommitted = p.getZxid();
                            outstandingProposal.remove(p);
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }

        LOG.debug("Finish Revalidation outstandingProposals");
        return true;
    }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/Leader, lead()V > Context: Everywhere, blocks=null, numberOfBasicBlocks=0, firstLineNumber=0, lastLineNumber=0, firstMethodNumber=632, lastMethodNumber=854, isFirstLineValid=true, methodSrcCode=
    void lead() throws IOException, InterruptedException {
        self.end_fle = Time.currentElapsedTime();
        long electionTimeTaken = self.end_fle - self.start_fle;
        self.setElectionTimeTaken(electionTimeTaken);
        ServerMetrics.getMetrics().ELECTION_TIME.add(electionTimeTaken);
        LOG.info("LEADING - LEADER ELECTION TOOK - {} {}", electionTimeTaken, QuorumPeer.FLE_TIME_UNIT);
        self.start_fle = 0;
        self.end_fle = 0;

        zk.registerJMX(new LeaderBean(this, zk), self.jmxLocalPeerBean);

        try {
            self.setZabState(QuorumPeer.ZabState.DISCOVERY);
            self.tick.set(0);
            zk.loadData();

            leaderStateSummary = new StateSummary(self.getCurrentEpoch(), zk.getLastProcessedZxid());

            // Start thread that waits for connection requests from
            // new followers.
            cnxAcceptor = new LearnerCnxAcceptor();
            cnxAcceptor.start();

            long epoch = getEpochToPropose(self.getMyId(), self.getAcceptedEpoch());

            zk.setZxid(ZxidUtils.makeZxid(epoch, 0));

            synchronized (this) {
                lastProposed = zk.getZxid();
            }

            newLeaderProposal.packet = new QuorumPacket(NEWLEADER, zk.getZxid(), null, null);

            if ((newLeaderProposal.packet.getZxid() & 0xffffffffL) != 0) {
                LOG.info("NEWLEADER proposal has Zxid of {}", Long.toHexString(newLeaderProposal.packet.getZxid()));
            }

            QuorumVerifier lastSeenQV = self.getLastSeenQuorumVerifier();
            QuorumVerifier curQV = self.getQuorumVerifier();
            if (curQV.getVersion() == 0 && curQV.getVersion() == lastSeenQV.getVersion()) {
                // This was added in ZOOKEEPER-1783. The initial config has version 0 (not explicitly
                // specified by the user; the lack of version in a config file is interpreted as version=0).
                // As soon as a config is established we would like to increase its version so that it
                // takes presedence over other initial configs that were not established (such as a config
                // of a server trying to join the ensemble, which may be a partial view of the system, not the full config).
                // We chose to set the new version to the one of the NEWLEADER message. However, before we can do that
                // there must be agreement on the new version, so we can only change the version when sending/receiving UPTODATE,
                // not when sending/receiving NEWLEADER. In other words, we can't change curQV here since its the committed quorum verifier,
                // and there's still no agreement on the new version that we'd like to use. Instead, we use
                // lastSeenQuorumVerifier which is being sent with NEWLEADER message
                // so its a good way to let followers know about the new version. (The original reason for sending
                // lastSeenQuorumVerifier with NEWLEADER is so that the leader completes any potentially uncommitted reconfigs
                // that it finds before starting to propose operations. Here we're reusing the same code path for
                // reaching consensus on the new version number.)

                // It is important that this is done before the leader executes waitForEpochAck,
                // so before LearnerHandlers return from their waitForEpochAck
                // hence before they construct the NEWLEADER message containing
                // the last-seen-quorumverifier of the leader, which we change below
                try {
                    LOG.debug(String.format("set lastSeenQuorumVerifier to currentQuorumVerifier (%s)", curQV.toString()));
                    QuorumVerifier newQV = self.configFromString(curQV.toString());
                    newQV.setVersion(zk.getZxid());
                    self.setLastSeenQuorumVerifier(newQV, true);
                } catch (Exception e) {
                    throw new IOException(e);
                }
            }

            newLeaderProposal.addQuorumVerifier(self.getQuorumVerifier());
            if (self.getLastSeenQuorumVerifier().getVersion() > self.getQuorumVerifier().getVersion()) {
                newLeaderProposal.addQuorumVerifier(self.getLastSeenQuorumVerifier());
            }

            // We have to get at least a majority of servers in sync with
            // us. We do this by waiting for the NEWLEADER packet to get
            // acknowledged

            waitForEpochAck(self.getMyId(), leaderStateSummary);
            self.setCurrentEpoch(epoch);
            self.setLeaderAddressAndId(self.getQuorumAddress(), self.getMyId());
            self.setZabState(QuorumPeer.ZabState.SYNCHRONIZATION);

            try {
                waitForNewLeaderAck(self.getMyId(), zk.getZxid());
            } catch (InterruptedException e) {
                shutdown("Waiting for a quorum of followers, only synced with sids: [ "
                         + newLeaderProposal.ackSetsToString()
                         + " ]");
                HashSet<Long> followerSet = new HashSet<>();

                for (LearnerHandler f : getLearners()) {
                    if (self.getQuorumVerifier().getVotingMembers().containsKey(f.getSid())) {
                        followerSet.add(f.getSid());
                    }
                }
                boolean initTicksShouldBeIncreased = true;
                for (Proposal.QuorumVerifierAcksetPair qvAckset : newLeaderProposal.qvAcksetPairs) {
                    if (!qvAckset.getQuorumVerifier().containsQuorum(followerSet)) {
                        initTicksShouldBeIncreased = false;
                        break;
                    }
                }
                if (initTicksShouldBeIncreased) {
                    LOG.warn("Enough followers present. Perhaps the initTicks need to be increased.");
                }
                return;
            }

            startZkServer();

            /**
             * WARNING: do not use this for anything other than QA testing
             * on a real cluster. Specifically to enable verification that quorum
             * can handle the lower 32bit roll-over issue identified in
             * ZOOKEEPER-1277. Without this option it would take a very long
             * time (on order of a month say) to see the 4 billion writes
             * necessary to cause the roll-over to occur.
             *
             * This field allows you to override the zxid of the server. Typically
             * you'll want to set it to something like 0xfffffff0 and then
             * start the quorum, run some operations and see the re-election.
             */
            String initialZxid = System.getProperty("zookeeper.testingonly.initialZxid");
            if (initialZxid != null) {
                long zxid = Long.parseLong(initialZxid);
                zk.setZxid((zk.getZxid() & 0xffffffff00000000L) | zxid);
            }

            if (!System.getProperty("zookeeper.leaderServes", "yes").equals("no")) {
                self.setZooKeeperServer(zk);
            }

            self.setZabState(QuorumPeer.ZabState.BROADCAST);
            self.adminServer.setZooKeeperServer(zk);

            // We ping twice a tick, so we only update the tick every other
            // iteration
            boolean tickSkip = true;
            // If not null then shutdown this leader
            String shutdownMessage = null;

            while (true) {
                synchronized (this) {
                    long start = Time.currentElapsedTime();
                    long cur = start;
                    long end = start + self.tickTime / 2;
                    while (cur < end) {
                        wait(end - cur);
                        cur = Time.currentElapsedTime();
                    }

                    if (!tickSkip) {
                        self.tick.incrementAndGet();
                    }

                    // We use an instance of SyncedLearnerTracker to
                    // track synced learners to make sure we still have a
                    // quorum of current (and potentially next pending) view.
                    SyncedLearnerTracker syncedAckSet = new SyncedLearnerTracker();
                    syncedAckSet.addQuorumVerifier(self.getQuorumVerifier());
                    if (self.getLastSeenQuorumVerifier() != null
                        && self.getLastSeenQuorumVerifier().getVersion() > self.getQuorumVerifier().getVersion()) {
                        syncedAckSet.addQuorumVerifier(self.getLastSeenQuorumVerifier());
                    }

                    syncedAckSet.addAck(self.getMyId());

                    for (LearnerHandler f : getLearners()) {
                        if (f.synced()) {
                            syncedAckSet.addAck(f.getSid());
                        }
                    }

                    // check leader running status
                    if (!this.isRunning()) {
                        // set shutdown flag
                        shutdownMessage = "Unexpected internal error";
                        break;
                    }

                    /*
                     *
                     * We will need to re-validate the outstandingProposal to maintain the progress of ZooKeeper.
                     * It is likely a proposal is waiting for enough ACKs to be committed. The proposals are sent out, but the
                     * only follower goes away which makes the proposals will not be committed until the follower recovers back.
                     * An earlier proposal which is not committed will block any further proposals. So, We need to re-validate those
                     * outstanding proposal with the help from Oracle. A key point in the process of re-validation is that the proposals
                     * need to be processed in order.
                     *
                     * We make the whole method blocking to avoid any possible race condition on outstandingProposal and lastCommitted
                     * as well as to avoid nested synchronization.
                     *
                     * As a more generic approach, we pass the object of forwardingFollowers to QuorumOracleMaj to determine if we need
                     * the help from Oracle.
                     *
                     *
                     * the size of outstandingProposals can be 1. The only one outstanding proposal is the one waiting for the ACK from
                     * the leader itself.
                     * */
                    if (!tickSkip && !syncedAckSet.hasAllQuorums()
                        && !(self.getQuorumVerifier().overrideQuorumDecision(getForwardingFollowers()) && self.getQuorumVerifier().revalidateOutstandingProp(this, new ArrayList<>(outstandingProposals.values()), lastCommitted))) {
                        // Lost quorum of last committed and/or last proposed
                        // config, set shutdown flag
                        shutdownMessage = "Not sufficient followers synced, only synced with sids: [ "
                                          + syncedAckSet.ackSetsToString()
                                          + " ]";
                        break;
                    }
                    tickSkip = !tickSkip;
                }
                for (LearnerHandler f : getLearners()) {
                    f.ping();
                }
            }
            if (shutdownMessage != null) {
                shutdown(shutdownMessage);
                // leader goes in looking state
            }
        } finally {
            zk.unregisterJMX(this);
        }
    }

}
