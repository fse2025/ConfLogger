====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	PrepRequestProcessor.java	methodSinagture:	org.apache.zookeeper.server.PrepRequestProcessor.getRecordForPath(Ljava/lang/String;)Lorg/apache/zookeeper/server/ZooKeeperServer$ChangeRecord;	methodLines:	165:189
blockLines:	171:-1
paras:	null
TaintedStat:	NORMAL getRecordForPath:conditional branch(eq, to iindex=76) 16,4 Node: < Application, Lorg/apache/zookeeper/server/PrepRequestProcessor, getRecordForPath(Ljava/lang/String;)Lorg/apache/zookeeper/server/ZooKeeperServer$ChangeRecord; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/PrepRequestProcessor, getRecordForPath(Ljava/lang/String;)Lorg/apache/zookeeper/server/ZooKeeperServer$ChangeRecord; > Context: Everywhere[22]16 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZKDatabase, getNode(Ljava/lang/String;)Lorg/apache/zookeeper/server/DataNode; > 14,2 @41 exception:15
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/PrepRequestProcessor, getRecordForPath(Ljava/lang/String;)Lorg/apache/zookeeper/server/ZooKeeperServer$ChangeRecord; > Context: Everywhere[22]16 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZKDatabase, getNode(Ljava/lang/String;)Lorg/apache/zookeeper/server/DataNode; > 14,2 @41 exception:15
NORMAL getRecordForPath:conditional branch(eq, to iindex=76) 16,4 Node: < Application, Lorg/apache/zookeeper/server/PrepRequestProcessor, getRecordForPath(Ljava/lang/String;)Lorg/apache/zookeeper/server/ZooKeeperServer$ChangeRecord; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    private ChangeRecord getRecordForPath(String path) throws KeeperException.NoNodeException {
        ChangeRecord lastChange = null;
        synchronized (zks.outstandingChanges) {
            lastChange = zks.outstandingChangesForPath.get(path);
            if (lastChange == null) {
                DataNode n = zks.getZKDatabase().getNode(path);
                if (n != null) {
                    Set<String> children;
                    synchronized (n) {
                        children = n.getChildren();
                    }
                    lastChange = new ChangeRecord(-1, path, n.stat, children.size(), zks.getZKDatabase().aclForNode(n));

                    if (digestEnabled) {
                        lastChange.precalculatedDigest = new PrecalculatedDigest(
                                digestCalculator.calculateDigest(path, n), 0);
                    }
                    lastChange.data = n.getData();
                }
            }
        }
        if (lastChange == null || lastChange.stat == null) {
            throw new KeeperException.NoNodeException(path);
        }
        return lastChange;
    }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/PrepRequestProcessor, pRequest2TxnCreate(ILorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V > Context: Everywhere, blocks=[BB[SSA:59..62]21 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2TxnCreate(ILorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:57..58]20 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2TxnCreate(ILorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:63..65]22 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2TxnCreate(ILorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:-1..-2]121 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2TxnCreate(ILorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:107..109]43 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2TxnCreate(ILorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:106..106]42 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2TxnCreate(ILorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:110..111]44 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2TxnCreate(ILorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:-1..-2]121 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2TxnCreate(ILorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V], numberOfBasicBlocks=8, firstLineNumber=672, lastLineNumber=674, firstMethodNumber=644, lastMethodNumber=718, isFirstLineValid=true, methodSrcCode=
        long ttl;
        if (type == OpCode.createTTL) {
            CreateTTLRequest createTtlRequest = (CreateTTLRequest) record;
            flags = createTtlRequest.getFlags();
            path = createTtlRequest.getPath();
            acl = createTtlRequest.getAcl();
            data = createTtlRequest.getData();
            ttl = createTtlRequest.getTtl();
        } else {
            CreateRequest createRequest = (CreateRequest) record;
            flags = createRequest.getFlags();
            path = createRequest.getPath();
            acl = createRequest.getAcl();
            data = createRequest.getData();
            ttl = -1;
        }
        CreateMode createMode = CreateMode.fromFlag(flags);
        validateCreateRequest(path, createMode, request, ttl);
        String parentPath = validatePathForCreate(path, request.sessionId);

        List<ACL> listACL = fixupACL(path, request.authInfo, acl);
        ChangeRecord parentRecord = getRecordForPath(parentPath);

        zks.checkACL(request.cnxn, parentRecord.acl, ZooDefs.Perms.CREATE, request.authInfo, path, listACL);
        int parentCVersion = parentRecord.stat.getCversion();
        if (createMode.isSequential()) {
            path = path + String.format(Locale.ENGLISH, "%010d", parentCVersion);
        }
        validatePath(path, request.sessionId);
        try {
            if (getRecordForPath(path) != null) {
                throw new KeeperException.NodeExistsException(path);
            }
        } catch (KeeperException.NoNodeException e) {
            // ignore this one
        }
        boolean ephemeralParent = EphemeralType.get(parentRecord.stat.getEphemeralOwner()) == EphemeralType.NORMAL;
        if (ephemeralParent) {
            throw new KeeperException.NoChildrenForEphemeralsException(path);
        }
        int newCversion = parentRecord.stat.getCversion() + 1;
        zks.checkQuota(path, null, data, OpCode.create);
        if (type == OpCode.createContainer) {
            request.setTxn(new CreateContainerTxn(path, data, listACL, newCversion));
        } else if (type == OpCode.createTTL) {
            request.setTxn(new CreateTTLTxn(path, data, listACL, newCversion, ttl));
        } else {
            request.setTxn(new CreateTxn(path, data, listACL, createMode.isEphemeral(), newCversion));
        }

        TxnHeader hdr = request.getHdr();
        long ephemeralOwner = 0;
        if (createMode.isContainer()) {
            ephemeralOwner = EphemeralType.CONTAINER_EPHEMERAL_OWNER;
        } else if (createMode.isTTL()) {
            ephemeralOwner = EphemeralType.TTL.toEphemeralOwner(ttl);
        } else if (createMode.isEphemeral()) {
            ephemeralOwner = request.sessionId;
        }
        StatPersisted s = DataTree.createStat(hdr.getZxid(), hdr.getTime(), ephemeralOwner);
        parentRecord = parentRecord.duplicate(request.getHdr().getZxid());
        parentRecord.childCount++;
        parentRecord.stat.setCversion(newCversion);
        parentRecord.stat.setPzxid(request.getHdr().getZxid());
        parentRecord.precalculatedDigest = precalculateDigest(
                DigestOpCode.UPDATE, parentPath, parentRecord.data, parentRecord.stat);
        addChangeRecord(parentRecord);
        ChangeRecord nodeRecord = new ChangeRecord(
                request.getHdr().getZxid(), path, s, 0, listACL);
        nodeRecord.data = data;
        nodeRecord.precalculatedDigest = precalculateDigest(
                DigestOpCode.ADD, path, nodeRecord.data, s);
        setTxnDigest(request, nodeRecord.precalculatedDigest);
        addChangeRecord(nodeRecord);
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/PrepRequestProcessor, precalculateDigest(Lorg/apache/zookeeper/server/PrepRequestProcessor$DigestOpCode;Ljava/lang/String;[BLorg/apache/zookeeper/data/StatPersisted;)Lorg/apache/zookeeper/server/ZooKeeperServer$PrecalculatedDigest; > Context: Everywhere, blocks=[BB[SSA:21..23]10 - org.apache.zookeeper.server.PrepRequestProcessor.precalculateDigest(Lorg/apache/zookeeper/server/PrepRequestProcessor$DigestOpCode;Ljava/lang/String;[BLorg/apache/zookeeper/data/StatPersisted;)Lorg/apache/zookeeper/server/ZooKeeperServer$PrecalculatedDigest;, BB[SSA:10..10]6 - org.apache.zookeeper.server.PrepRequestProcessor.precalculateDigest(Lorg/apache/zookeeper/server/PrepRequestProcessor$DigestOpCode;Ljava/lang/String;[BLorg/apache/zookeeper/data/StatPersisted;)Lorg/apache/zookeeper/server/ZooKeeperServer$PrecalculatedDigest;, BB[SSA:24..24]11 - org.apache.zookeeper.server.PrepRequestProcessor.precalculateDigest(Lorg/apache/zookeeper/server/PrepRequestProcessor$DigestOpCode;Ljava/lang/String;[BLorg/apache/zookeeper/data/StatPersisted;)Lorg/apache/zookeeper/server/ZooKeeperServer$PrecalculatedDigest;, BB[SSA:-1..-2]26 - org.apache.zookeeper.server.PrepRequestProcessor.precalculateDigest(Lorg/apache/zookeeper/server/PrepRequestProcessor$DigestOpCode;Ljava/lang/String;[BLorg/apache/zookeeper/data/StatPersisted;)Lorg/apache/zookeeper/server/ZooKeeperServer$PrecalculatedDigest;, BB[SSA:30..32]14 - org.apache.zookeeper.server.PrepRequestProcessor.precalculateDigest(Lorg/apache/zookeeper/server/PrepRequestProcessor$DigestOpCode;Ljava/lang/String;[BLorg/apache/zookeeper/data/StatPersisted;)Lorg/apache/zookeeper/server/ZooKeeperServer$PrecalculatedDigest;, BB[SSA:10..10]6 - org.apache.zookeeper.server.PrepRequestProcessor.precalculateDigest(Lorg/apache/zookeeper/server/PrepRequestProcessor$DigestOpCode;Ljava/lang/String;[BLorg/apache/zookeeper/data/StatPersisted;)Lorg/apache/zookeeper/server/ZooKeeperServer$PrecalculatedDigest;, BB[SSA:33..33]15 - org.apache.zookeeper.server.PrepRequestProcessor.precalculateDigest(Lorg/apache/zookeeper/server/PrepRequestProcessor$DigestOpCode;Ljava/lang/String;[BLorg/apache/zookeeper/data/StatPersisted;)Lorg/apache/zookeeper/server/ZooKeeperServer$PrecalculatedDigest;, BB[SSA:-1..-2]26 - org.apache.zookeeper.server.PrepRequestProcessor.precalculateDigest(Lorg/apache/zookeeper/server/PrepRequestProcessor$DigestOpCode;Ljava/lang/String;[BLorg/apache/zookeeper/data/StatPersisted;)Lorg/apache/zookeeper/server/ZooKeeperServer$PrecalculatedDigest;], numberOfBasicBlocks=8, firstLineNumber=1065, lastLineNumber=1075, firstMethodNumber=1057, lastMethodNumber=1085, isFirstLineValid=true, methodSrcCode=

        if (!digestEnabled) {
            return null;
        }

        long prevNodeDigest;
        long newNodeDigest;

        switch (type) {
            case ADD:
                prevNodeDigest = 0;
                newNodeDigest = digestCalculator.calculateDigest(path, data, s);
                break;
            case REMOVE:
                prevNodeDigest = getRecordForPath(path).precalculatedDigest.nodeDigest;
                newNodeDigest = 0;
                break;
            case UPDATE:
                prevNodeDigest = getRecordForPath(path).precalculatedDigest.nodeDigest;
                newNodeDigest = digestCalculator.calculateDigest(path, data, s);
                break;
            case NOOP:
                newNodeDigest = prevNodeDigest = 0;
                break;
            default:
                return null;
        }
        long treeDigest = getCurrentTreeDigest() - prevNodeDigest + newNodeDigest;
        return new PrecalculatedDigest(newNodeDigest, treeDigest);
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/PrepRequestProcessor, pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V > Context: Everywhere, blocks=[BB[SSA:33..36]15 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:29..32]14 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:37..39]16 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:-1..-2]550 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:58..60]28 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:51..52]24 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:61..63]29 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:-1..-2]550 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:142..145]64 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:138..141]63 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:146..148]65 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:-1..-2]550 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:159..161]70 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:156..158]69 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:162..164]71 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:-1..-2]550 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:262..264]116 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:261..261]115 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:265..267]117 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:-1..-2]550 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:755..757]355 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:744..745]350 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:758..760]356 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:-1..-2]550 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:852..855]400 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:851..851]399 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:856..858]401 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:-1..-2]550 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:1009..1012]478 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:1006..1008]477 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:1013..1016]479 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:1112..1114]528 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:1111..1111]527 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:1115..1117]529 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V, BB[SSA:-1..-2]550 - org.apache.zookeeper.server.PrepRequestProcessor.pRequest2Txn(IJLorg/apache/zookeeper/server/Request;Lorg/apache/jute/Record;)V], numberOfBasicBlocks=35, firstLineNumber=620, lastLineNumber=637, firstMethodNumber=315, lastMethodNumber=637, isFirstLineValid=true, methodSrcCode=
    protected void pRequest2Txn(int type, long zxid, Request request, Record record) throws KeeperException, IOException, RequestProcessorException {
        if (request.getHdr() == null) {
            request.setHdr(new TxnHeader(request.sessionId, request.cxid, zxid,
                    Time.currentWallTime(), type));
        }

        switch (type) {
        case OpCode.create:
        case OpCode.create2:
        case OpCode.createTTL:
        case OpCode.createContainer: {
            pRequest2TxnCreate(type, request, record);
            break;
        }
        case OpCode.deleteContainer: {
            DeleteContainerRequest txn = (DeleteContainerRequest) record;
            String path = txn.getPath();
            String parentPath = getParentPathAndValidate(path);
            ChangeRecord nodeRecord = getRecordForPath(path);
            if (nodeRecord.childCount > 0) {
                throw new KeeperException.NotEmptyException(path);
            }
            if (EphemeralType.get(nodeRecord.stat.getEphemeralOwner()) == EphemeralType.NORMAL) {
                throw new KeeperException.BadVersionException(path);
            }
            ChangeRecord parentRecord = getRecordForPath(parentPath);
            request.setTxn(new DeleteTxn(path));
            parentRecord = parentRecord.duplicate(request.getHdr().getZxid());
            parentRecord.childCount--;
            parentRecord.stat.setPzxid(request.getHdr().getZxid());
            parentRecord.precalculatedDigest = precalculateDigest(
                    DigestOpCode.UPDATE, parentPath, parentRecord.data, parentRecord.stat);
            addChangeRecord(parentRecord);

            nodeRecord = new ChangeRecord(request.getHdr().getZxid(), path, null, -1, null);
            nodeRecord.precalculatedDigest = precalculateDigest(DigestOpCode.REMOVE, path);
            setTxnDigest(request, nodeRecord.precalculatedDigest);
            addChangeRecord(nodeRecord);
            break;
        }
        case OpCode.delete:
            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
            DeleteRequest deleteRequest = (DeleteRequest) record;
            String path = deleteRequest.getPath();
            String parentPath = getParentPathAndValidate(path);
            ChangeRecord parentRecord = getRecordForPath(parentPath);
            zks.checkACL(request.cnxn, parentRecord.acl, ZooDefs.Perms.DELETE, request.authInfo, path, null);
            ChangeRecord nodeRecord = getRecordForPath(path);
            checkAndIncVersion(nodeRecord.stat.getVersion(), deleteRequest.getVersion(), path);
            if (nodeRecord.childCount > 0) {
                throw new KeeperException.NotEmptyException(path);
            }
            request.setTxn(new DeleteTxn(path));
            parentRecord = parentRecord.duplicate(request.getHdr().getZxid());
            parentRecord.childCount--;
            parentRecord.stat.setPzxid(request.getHdr().getZxid());
            parentRecord.precalculatedDigest = precalculateDigest(
                    DigestOpCode.UPDATE, parentPath, parentRecord.data, parentRecord.stat);
            addChangeRecord(parentRecord);

            nodeRecord = new ChangeRecord(request.getHdr().getZxid(), path, null, -1, null);
            nodeRecord.precalculatedDigest = precalculateDigest(DigestOpCode.REMOVE, path);
            setTxnDigest(request, nodeRecord.precalculatedDigest);
            addChangeRecord(nodeRecord);
            break;
        case OpCode.setData:
            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
            SetDataRequest setDataRequest = (SetDataRequest) record;
            path = setDataRequest.getPath();
            validatePath(path, request.sessionId);
            nodeRecord = getRecordForPath(path);
            zks.checkACL(request.cnxn, nodeRecord.acl, ZooDefs.Perms.WRITE, request.authInfo, path, null);
            zks.checkQuota(path, nodeRecord.data, setDataRequest.getData(), OpCode.setData);
            int newVersion = checkAndIncVersion(nodeRecord.stat.getVersion(), setDataRequest.getVersion(), path);
            request.setTxn(new SetDataTxn(path, setDataRequest.getData(), newVersion));
            nodeRecord = nodeRecord.duplicate(request.getHdr().getZxid());
            nodeRecord.stat.setVersion(newVersion);
            nodeRecord.stat.setMtime(request.getHdr().getTime());
            nodeRecord.stat.setMzxid(zxid);
            nodeRecord.data = setDataRequest.getData();
            nodeRecord.precalculatedDigest = precalculateDigest(
                    DigestOpCode.UPDATE, path, nodeRecord.data, nodeRecord.stat);
            setTxnDigest(request, nodeRecord.precalculatedDigest);
            addChangeRecord(nodeRecord);
            break;
        case OpCode.reconfig:
            if (!zks.isReconfigEnabled()) {
                LOG.error("Reconfig operation requested but reconfig feature is disabled.");
                throw new KeeperException.ReconfigDisabledException();
            }

            if (ZooKeeperServer.skipACL) {
                LOG.warn("skipACL is set, reconfig operation will skip ACL checks!");
            }

            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
            LeaderZooKeeperServer lzks;
            try {
                lzks = (LeaderZooKeeperServer) zks;
            } catch (ClassCastException e) {
                // standalone mode - reconfiguration currently not supported
                throw new KeeperException.UnimplementedException();
            }
            QuorumVerifier lastSeenQV = lzks.self.getLastSeenQuorumVerifier();
            // check that there's no reconfig in progress
            if (lastSeenQV.getVersion() != lzks.self.getQuorumVerifier().getVersion()) {
                throw new KeeperException.ReconfigInProgress();
            }
            ReconfigRequest reconfigRequest = (ReconfigRequest) record;
            long configId = reconfigRequest.getCurConfigId();

            if (configId != -1 && configId != lzks.self.getLastSeenQuorumVerifier().getVersion()) {
                String msg = "Reconfiguration from version "
                             + configId
                             + " failed -- last seen version is "
                             + lzks.self.getLastSeenQuorumVerifier().getVersion();
                throw new KeeperException.BadVersionException(msg);
            }

            String newMembers = reconfigRequest.getNewMembers();

            if (newMembers != null) { //non-incremental membership change
                LOG.info("Non-incremental reconfig");

                // Input may be delimited by either commas or newlines so convert to common newline separated format
                newMembers = newMembers.replaceAll(",", "\n");

                try {
                    Properties props = new Properties();
                    props.load(new StringReader(newMembers));
                    request.qv = QuorumPeerConfig.parseDynamicConfig(props, lzks.self.getElectionType(), true, false, lastSeenQV.getOraclePath());
                    request.qv.setVersion(request.getHdr().getZxid());
                } catch (IOException | ConfigException e) {
                    throw new KeeperException.BadArgumentsException(e.getMessage());
                }
            } else { //incremental change - must be a majority quorum system
                LOG.info("Incremental reconfig");

                List<String> joiningServers = null;
                String joiningServersString = reconfigRequest.getJoiningServers();
                if (joiningServersString != null) {
                    joiningServers = StringUtils.split(joiningServersString, ",");
                }

                List<String> leavingServers = null;
                String leavingServersString = reconfigRequest.getLeavingServers();
                if (leavingServersString != null) {
                    leavingServers = StringUtils.split(leavingServersString, ",");
                }

                if (!(lastSeenQV instanceof QuorumMaj) && !(lastSeenQV instanceof QuorumOracleMaj)) {
                    String msg = "Incremental reconfiguration requested but last configuration seen has a non-majority quorum system";
                    LOG.warn(msg);
                    throw new KeeperException.BadArgumentsException(msg);
                }
                Map<Long, QuorumServer> nextServers = new HashMap<>(lastSeenQV.getAllMembers());
                try {
                    if (leavingServers != null) {
                        for (String leaving : leavingServers) {
                            long sid = Long.parseLong(leaving);
                            nextServers.remove(sid);
                        }
                    }
                    if (joiningServers != null) {
                        for (String joiner : joiningServers) {
                            // joiner should have the following format: server.x = server_spec;client_spec
                            String[] parts = StringUtils.split(joiner, "=").toArray(new String[0]);
                            if (parts.length != 2) {
                                throw new KeeperException.BadArgumentsException("Wrong format of server string");
                            }
                            // extract server id x from first part of joiner: server.x
                            Long sid = Long.parseLong(parts[0].substring(parts[0].lastIndexOf('.') + 1));
                            QuorumServer qs = new QuorumServer(sid, parts[1]);
                            if (qs.clientAddr == null || qs.electionAddr == null || qs.addr == null) {
                                throw new KeeperException.BadArgumentsException("Wrong format of server string - each server should have 3 ports specified");
                            }

                            // check duplication of addresses and ports
                            for (QuorumServer nqs : nextServers.values()) {
                                if (qs.id == nqs.id) {
                                    continue;
                                }
                                qs.checkAddressDuplicate(nqs);
                            }

                            nextServers.remove(qs.id);
                            nextServers.put(qs.id, qs);
                        }
                    }
                } catch (ConfigException e) {
                    throw new KeeperException.BadArgumentsException("Reconfiguration failed");
                }

                if (lastSeenQV instanceof QuorumMaj) {
                    request.qv = new QuorumMaj(nextServers);
                } else {
                    request.qv = new QuorumOracleMaj(nextServers, lastSeenQV.getOraclePath());
                }

                request.qv.setVersion(request.getHdr().getZxid());
            }
            if (QuorumPeerConfig.isStandaloneEnabled() && request.qv.getVotingMembers().size() < 2) {
                String msg = "Reconfig failed - new configuration must include at least 2 followers";
                LOG.warn(msg);
                throw new KeeperException.BadArgumentsException(msg);
            } else if (request.qv.getVotingMembers().size() < 1) {
                String msg = "Reconfig failed - new configuration must include at least 1 follower";
                LOG.warn(msg);
                throw new KeeperException.BadArgumentsException(msg);
            }

            if (!lzks.getLeader().isQuorumSynced(request.qv)) {
                String msg2 = "Reconfig failed - there must be a connected and synced quorum in new configuration";
                LOG.warn(msg2);
                throw new KeeperException.NewConfigNoQuorum();
            }

            nodeRecord = getRecordForPath(ZooDefs.CONFIG_NODE);
            zks.checkACL(request.cnxn, nodeRecord.acl, ZooDefs.Perms.WRITE, request.authInfo, null, null);
            SetDataTxn setDataTxn = new SetDataTxn(ZooDefs.CONFIG_NODE, request.qv.toString().getBytes(), -1);
            request.setTxn(setDataTxn);
            nodeRecord = nodeRecord.duplicate(request.getHdr().getZxid());
            nodeRecord.stat.setVersion(-1);
            nodeRecord.stat.setMtime(request.getHdr().getTime());
            nodeRecord.stat.setMzxid(zxid);
            nodeRecord.data = setDataTxn.getData();
            // Reconfig is currently a noop from digest computation
            // perspective since config node is not covered by the digests.
            nodeRecord.precalculatedDigest = precalculateDigest(
                    DigestOpCode.NOOP, ZooDefs.CONFIG_NODE, nodeRecord.data, nodeRecord.stat);
            setTxnDigest(request, nodeRecord.precalculatedDigest);
            addChangeRecord(nodeRecord);

            break;
        case OpCode.setACL:
            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
            SetACLRequest setAclRequest = (SetACLRequest) record;
            path = setAclRequest.getPath();
            validatePath(path, request.sessionId);
            List<ACL> listACL = fixupACL(path, request.authInfo, setAclRequest.getAcl());
            nodeRecord = getRecordForPath(path);
            zks.checkACL(request.cnxn, nodeRecord.acl, ZooDefs.Perms.ADMIN, request.authInfo, path, listACL);
            newVersion = checkAndIncVersion(nodeRecord.stat.getAversion(), setAclRequest.getVersion(), path);
            request.setTxn(new SetACLTxn(path, listACL, newVersion));
            nodeRecord = nodeRecord.duplicate(request.getHdr().getZxid());
            nodeRecord.stat.setAversion(newVersion);
            nodeRecord.precalculatedDigest = precalculateDigest(
                    DigestOpCode.UPDATE, path, nodeRecord.data, nodeRecord.stat);
            setTxnDigest(request, nodeRecord.precalculatedDigest);
            addChangeRecord(nodeRecord);
            break;
        case OpCode.createSession:
            CreateSessionTxn createSessionTxn = request.readRequestRecord(CreateSessionTxn::new);
            request.setTxn(createSessionTxn);
            // only add the global session tracker but not to ZKDb
            zks.sessionTracker.trackSession(request.sessionId, createSessionTxn.getTimeOut());
            zks.setOwner(request.sessionId, request.getOwner());
            break;
        case OpCode.closeSession:
            // We don't want to do this check since the session expiration thread
            // queues up this operation without being the session owner.
            // this request is the last of the session so it should be ok
            //zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
            long startTime = Time.currentElapsedTime();
            synchronized (zks.outstandingChanges) {
                // need to move getEphemerals into zks.outstandingChanges
                // synchronized block, otherwise there will be a race
                // condition with the on flying deleteNode txn, and we'll
                // delete the node again here, which is not correct
                Set<String> es = zks.getZKDatabase().getEphemerals(request.sessionId);
                for (ChangeRecord c : zks.outstandingChanges) {
                    if (c.stat == null) {
                        // Doing a delete
                        es.remove(c.path);
                    } else if (c.stat.getEphemeralOwner() == request.sessionId) {
                        es.add(c.path);
                    }
                }
                for (String path2Delete : es) {
                    if (digestEnabled) {
                        parentPath = getParentPathAndValidate(path2Delete);
                        parentRecord = getRecordForPath(parentPath);
                        parentRecord = parentRecord.duplicate(request.getHdr().getZxid());
                        parentRecord.stat.setPzxid(request.getHdr().getZxid());
                        parentRecord.precalculatedDigest = precalculateDigest(
                                DigestOpCode.UPDATE, parentPath, parentRecord.data, parentRecord.stat);
                        addChangeRecord(parentRecord);
                    }
                    nodeRecord = new ChangeRecord(
                            request.getHdr().getZxid(), path2Delete, null, 0, null);
                    nodeRecord.precalculatedDigest = precalculateDigest(
                            DigestOpCode.REMOVE, path2Delete);
                    addChangeRecord(nodeRecord);
                }
                if (ZooKeeperServer.isCloseSessionTxnEnabled()) {
                    request.setTxn(new CloseSessionTxn(new ArrayList<String>(es)));
                }
                zks.sessionTracker.setSessionClosing(request.sessionId);
            }
            ServerMetrics.getMetrics().CLOSE_SESSION_PREP_TIME.add(Time.currentElapsedTime() - startTime);
            break;
        case OpCode.check:
            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
            CheckVersionRequest checkVersionRequest = (CheckVersionRequest) record;
            path = checkVersionRequest.getPath();
            validatePath(path, request.sessionId);
            nodeRecord = getRecordForPath(path);
            zks.checkACL(request.cnxn, nodeRecord.acl, ZooDefs.Perms.READ, request.authInfo, path, null);
            request.setTxn(new CheckVersionTxn(
                path,
                checkAndIncVersion(nodeRecord.stat.getVersion(), checkVersionRequest.getVersion(), path)));
            break;
        default:
            LOG.warn("unknown type {}", type);
            break;
        }

        // If the txn is not going to mutate anything, like createSession,
        // we just set the current tree digest in it
        if (request.getTxnDigest() == null && digestEnabled) {
            setTxnDigest(request);
        }
    }

}
