====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	HAUtil.java	methodSinagture:	org.apache.hadoop.yarn.conf.HAUtil.addSuffix(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;	methodLines:	322:330
blockLines:	323:-1
paras:	yarn.resourcemanager.ha.id
TaintedStat:	NORMAL addSuffix:conditional branch(eq, to iindex=7) 2,4 Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, addSuffix(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, getRMHAId(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere[4]6 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getTrimmed(Ljava/lang/String;)Ljava/lang/String; > 1,4 @5 exception:5
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, getRMHAId(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere[4]6 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getTrimmed(Ljava/lang/String;)Ljava/lang/String; > 1,4 @5 exception:5
NORMAL getRMHAId:conditional branch(ne, to iindex=67) 6,7 Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, getRMHAId(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere
NORMAL getRMHAId:conditional branch(eq, to iindex=67) 13,3 Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, getRMHAId(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere
NORMAL getRMHAId:[null]: 16 = checkcast <Application,Ljava/lang/String>15 <Application,Ljava/lang/String> Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, getRMHAId(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere
PARAM_CALLER:Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, getRMHAId(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere[23]19 = invokestatic < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, addSuffix(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 17,16 @47 exception:18 v16
PARAM_CALLEE:Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, addSuffix(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere v2
NORMAL addSuffix:conditional branch(eq, to iindex=7) 2,4 Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, addSuffix(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  public static String addSuffix(String key, String suffix) {
    if (suffix == null || suffix.isEmpty()) {
      return key;
    }
    if (suffix.startsWith(".")) {
      throw new IllegalArgumentException("suffix '" + suffix + "' should not " +
          "already have '.' prepended.");
    }
    return key + "." + suffix;
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, getConfKeyForRMInstance(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere, blocks=[BB[SSA:15..17]7 - org.apache.hadoop.yarn.conf.HAUtil.getConfKeyForRMInstance(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;, BB[SSA:10..14]6 - org.apache.hadoop.yarn.conf.HAUtil.getConfKeyForRMInstance(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;, BB[SSA:18..18]8 - org.apache.hadoop.yarn.conf.HAUtil.getConfKeyForRMInstance(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;, BB[SSA:-1..-2]9 - org.apache.hadoop.yarn.conf.HAUtil.getConfKeyForRMInstance(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;], numberOfBasicBlocks=4, firstLineNumber=294, lastLineNumber=296, firstMethodNumber=290, lastMethodNumber=296, isFirstLineValid=true, methodSrcCode=
  static String getConfKeyForRMInstance(String prefix, Configuration conf) {
    if (!YarnConfiguration.getServiceAddressConfKeys(conf).contains(prefix)) {
      return prefix;
    } else {
      String RMId = getRMHAId(conf);
      checkAndSetRMRPCAddress(prefix, RMId, conf);
      return addSuffix(prefix, RMId);
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, getRMHAId(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere, blocks=[BB[SSA:20..23]10 - org.apache.hadoop.yarn.conf.HAUtil.getRMHAId(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;, BB[SSA:19..19]9 - org.apache.hadoop.yarn.conf.HAUtil.getRMHAId(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;, BB[SSA:24..27]11 - org.apache.hadoop.yarn.conf.HAUtil.getRMHAId(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;, BB[SSA:-1..-2]36 - org.apache.hadoop.yarn.conf.HAUtil.getRMHAId(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;], numberOfBasicBlocks=4, firstLineNumber=234, lastLineNumber=236, firstMethodNumber=230, lastMethodNumber=258, isFirstLineValid=true, methodSrcCode=
  public static String getRMHAId(Configuration conf) {
    int found = 0;
    String currentRMId = conf.getTrimmed(YarnConfiguration.RM_HA_ID);
    if(currentRMId == null) {
      for(String rmId : getRMHAIds(conf)) {
        String key = addSuffix(YarnConfiguration.RM_ADDRESS, rmId);
        String addr = conf.get(key);
        if (addr == null) {
          continue;
        }
        InetSocketAddress s;
        try {
          s = NetUtils.createSocketAddr(addr);
        } catch (Exception e) {
          LOG.warn("Exception in creating socket address " + addr, e);
          continue;
        }
        if (!s.isUnresolved() && NetUtils.isLocalAddress(s.getAddress())) {
          currentRMId = rmId.trim();
          found++;
        }
      }
    }
    if (found > 1) { // Only one address must match the local address
      String msg = "The HA Configuration has multiple addresses that match "
          + "local node's address.";
      throw new HadoopIllegalArgumentException(msg);
    }
    return currentRMId;
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/yarn/webapp/util/WebAppUtils, getResolvedRemoteRMWebAppURLWithoutScheme(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/http/HttpConfig$Policy;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere, blocks=[BB[SSA:11..13]4 - org.apache.hadoop.yarn.webapp.util.WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/http/HttpConfig$Policy;Ljava/lang/String;)Ljava/lang/String;, BB[SSA:5..8]2 - org.apache.hadoop.yarn.webapp.util.WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/http/HttpConfig$Policy;Ljava/lang/String;)Ljava/lang/String;, BB[SSA:14..16]5 - org.apache.hadoop.yarn.webapp.util.WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/http/HttpConfig$Policy;Ljava/lang/String;)Ljava/lang/String;, BB[SSA:-1..-2]14 - org.apache.hadoop.yarn.webapp.util.WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/http/HttpConfig$Policy;Ljava/lang/String;)Ljava/lang/String;, BB[SSA:25..27]9 - org.apache.hadoop.yarn.webapp.util.WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/http/HttpConfig$Policy;Ljava/lang/String;)Ljava/lang/String;, BB[SSA:19..22]7 - org.apache.hadoop.yarn.webapp.util.WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/http/HttpConfig$Policy;Ljava/lang/String;)Ljava/lang/String;, BB[SSA:28..30]10 - org.apache.hadoop.yarn.webapp.util.WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/http/HttpConfig$Policy;Ljava/lang/String;)Ljava/lang/String;, BB[SSA:-1..-2]14 - org.apache.hadoop.yarn.webapp.util.WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/http/HttpConfig$Policy;Ljava/lang/String;)Ljava/lang/String;], numberOfBasicBlocks=8, firstLineNumber=279, lastLineNumber=279, firstMethodNumber=268, lastMethodNumber=285, isFirstLineValid=true, methodSrcCode=
      Configuration conf, Policy httpPolicy, String rmId) {
    InetSocketAddress address = null;

    if (httpPolicy == Policy.HTTPS_ONLY) {
      address = conf.getSocketAddr(
          rmId == null ? YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS
              : HAUtil.addSuffix(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,
                  rmId),
          YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,
          YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);
    } else {
      address = conf.getSocketAddr(
          rmId == null ? YarnConfiguration.RM_WEBAPP_ADDRESS
              : HAUtil.addSuffix(YarnConfiguration.RM_WEBAPP_ADDRESS, rmId),
          YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,
          YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);
    }
    return getResolvedAddress(address);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/yarn/util/RMHAUtils, getRMHAWebappAddresses(Lorg/apache/hadoop/yarn/conf/YarnConfiguration;)Ljava/util/List; > Context: Everywhere, blocks=[BB[SSA:31..35]14 - org.apache.hadoop.yarn.util.RMHAUtils.getRMHAWebappAddresses(Lorg/apache/hadoop/yarn/conf/YarnConfiguration;)Ljava/util/List;, BB[SSA:30..30]13 - org.apache.hadoop.yarn.util.RMHAUtils.getRMHAWebappAddresses(Lorg/apache/hadoop/yarn/conf/YarnConfiguration;)Ljava/util/List;, BB[SSA:36..36]15 - org.apache.hadoop.yarn.util.RMHAUtils.getRMHAWebappAddresses(Lorg/apache/hadoop/yarn/conf/YarnConfiguration;)Ljava/util/List;, BB[SSA:-1..-2]31 - org.apache.hadoop.yarn.util.RMHAUtils.getRMHAWebappAddresses(Lorg/apache/hadoop/yarn/conf/YarnConfiguration;)Ljava/util/List;, BB[SSA:41..44]17 - org.apache.hadoop.yarn.util.RMHAUtils.getRMHAWebappAddresses(Lorg/apache/hadoop/yarn/conf/YarnConfiguration;)Ljava/util/List;, BB[SSA:37..40]16 - org.apache.hadoop.yarn.util.RMHAUtils.getRMHAWebappAddresses(Lorg/apache/hadoop/yarn/conf/YarnConfiguration;)Ljava/util/List;, BB[SSA:45..45]18 - org.apache.hadoop.yarn.util.RMHAUtils.getRMHAWebappAddresses(Lorg/apache/hadoop/yarn/conf/YarnConfiguration;)Ljava/util/List;, BB[SSA:-1..-2]31 - org.apache.hadoop.yarn.util.RMHAUtils.getRMHAWebappAddresses(Lorg/apache/hadoop/yarn/conf/YarnConfiguration;)Ljava/util/List;], numberOfBasicBlocks=8, firstLineNumber=89, lastLineNumber=92, firstMethodNumber=77, lastMethodNumber=101, isFirstLineValid=true, methodSrcCode=
    String defaultPort;
    if (YarnConfiguration.useHttps(conf)) {
      prefix = YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS;
      defaultPort = ":" + YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT;
    } else {
      prefix =YarnConfiguration.RM_WEBAPP_ADDRESS;
      defaultPort = ":" + YarnConfiguration.DEFAULT_RM_WEBAPP_PORT;
    }
    Collection<String> rmIds =
        conf.getStringCollection(YarnConfiguration.RM_HA_IDS);
    List<String> addrs = new ArrayList<String>();
    for (String id : rmIds) {
      String addr = conf.get(HAUtil.addSuffix(prefix, id));
      if (addr == null) {
        String hostname =
            conf.get(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME, id));
        if (hostname != null) {
          addr = hostname + defaultPort;
        }
      }
      if (addr != null) {
        addrs.add(addr);
      }
    }
    return addrs;
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, verifyAndSetCurrentRMHAId(Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere, blocks=[BB[SSA:26..30]13 - org.apache.hadoop.yarn.conf.HAUtil.verifyAndSetCurrentRMHAId(Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:25..25]12 - org.apache.hadoop.yarn.conf.HAUtil.verifyAndSetCurrentRMHAId(Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:31..31]14 - org.apache.hadoop.yarn.conf.HAUtil.verifyAndSetCurrentRMHAId(Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:-1..-2]29 - org.apache.hadoop.yarn.conf.HAUtil.verifyAndSetCurrentRMHAId(Lorg/apache/hadoop/conf/Configuration;)V], numberOfBasicBlocks=4, firstLineNumber=144, lastLineNumber=146, firstMethodNumber=139, lastMethodNumber=160, isFirstLineValid=true, methodSrcCode=
  private static void verifyAndSetCurrentRMHAId(Configuration conf) {
    String rmId = getRMHAId(conf);
    if (rmId == null) {
      StringBuilder msg = new StringBuilder();
      msg.append("Can not find valid RM_HA_ID. None of ");
      for (String id : conf
          .getTrimmedStringCollection(YarnConfiguration.RM_HA_IDS)) {
        msg.append(addSuffix(YarnConfiguration.RM_ADDRESS, id)).append(" ");
      }
      msg.append(" are matching" +
          " the local address OR " + YarnConfiguration.RM_HA_ID + " is not" +
          " specified in HA Configuration");
      throwBadConfigurationException(msg.toString());
    } else {
      Collection<String> ids = getRMHAIds(conf);
      if (!ids.contains(rmId)) {
        throwBadConfigurationException(
          getRMHAIdNeedToBeIncludedMessage(ids.toString(), rmId));
      }
    }
    conf.set(YarnConfiguration.RM_HA_ID, rmId);
  }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/yarn/conf/HAUtil, checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere, blocks=[BB[SSA:0..4]1 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:-1..-2]0 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:5..8]2 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:-1..-2]33 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:11..13]4 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:9..10]3 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:14..17]5 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:-1..-2]33 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:29..31]11 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:27..28]10 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:32..32]12 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:-1..-2]33 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:37..40]17 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:18..21]6 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:41..41]18 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:-1..-2]33 - org.apache.hadoop.yarn.conf.HAUtil.checkAndSetRMRPCAddress(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V], numberOfBasicBlocks=16, firstLineNumber=340, lastLineNumber=345, firstMethodNumber=334, lastMethodNumber=357, isFirstLineValid=false, methodSrcCode=
      Configuration conf) {
    String rpcAddressConfKey = null;
    try {
      rpcAddressConfKey = addSuffix(prefix, RMId);
      if (conf.getTrimmed(rpcAddressConfKey) == null) {
        String hostNameConfKey = addSuffix(YarnConfiguration.RM_HOSTNAME, RMId);
        String confVal = conf.getTrimmed(hostNameConfKey);
        if (confVal == null) {
          throwBadConfigurationException(getNeedToSetValueMessage(
              hostNameConfKey + " or " + addSuffix(prefix, RMId)));
        } else {
          conf.set(addSuffix(prefix, RMId), confVal + ":"
              + YarnConfiguration.getRMDefaultPortNumber(prefix, conf));
        }
      }
    } catch (IllegalArgumentException iae) {
      String errmsg = iae.getMessage();
      if (rpcAddressConfKey == null) {
        // Error at addSuffix
        errmsg = getInvalidValueMessage(YarnConfiguration.RM_HA_ID, RMId);
      }
      throwBadConfigurationException(errmsg);
    }
  }
}
}
