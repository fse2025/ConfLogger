```java
JournalNodeRpcServer(Configuration conf, JournalNode jn) throws IOException {
    this.jn = jn;

    Configuration confCopy = new Configuration(conf);

    // Ensure that nagling doesn't kick in, which could cause latency issues.
    confCopy.setBoolean(
        CommonConfigurationKeysPublic.IPC_SERVER_TCPNODELAY_KEY,
        true
    );

    InetSocketAddress addr = getAddress(confCopy);
    String bindHost = conf.getTrimmed(DFS_JOURNALNODE_RPC_BIND_HOST_KEY, null);
    if (bindHost == null) {
        bindHost = addr.getHostName();
    }
    LOG.info("RPC server is binding to " + bindHost + ":" + addr.getPort());

    RPC.setProtocolEngine(confCopy, QJournalProtocolPB.class,
        ProtobufRpcEngine2.class);
    QJournalProtocolServerSideTranslatorPB translator =
        new QJournalProtocolServerSideTranslatorPB(this);
    BlockingService service = QJournalProtocolService
        .newReflectiveBlockingService(translator);

    this.server = new RPC.Builder(confCopy)
        .setProtocol(QJournalProtocolPB.class)
        .setInstance(service)
        .setBindAddress(bindHost)
        .setPort(addr.getPort())
        .setNumHandlers(HANDLER_COUNT)
        .setVerbose(false)
        .build();

    // Adding InterQJournalProtocolPB to server
    InterQJournalProtocolServerSideTranslatorPB
        qJournalProtocolServerSideTranslatorPB = new
        InterQJournalProtocolServerSideTranslatorPB(this);

    BlockingService interQJournalProtocolService = InterQJournalProtocolService
        .newReflectiveBlockingService(qJournalProtocolServerSideTranslatorPB);

    DFSUtil.addPBProtocol(confCopy, InterQJournalProtocolPB.class,
        interQJournalProtocolService, server);

    // set service-level authorization security policy
    if (confCopy.getBoolean(
        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {
        // ConfLogger Inserted Start
        logger.info("Service-level authorization security policy is enabled. Configuration key: " + CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION + ", value: " + confCopy.getBoolean(CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false));
        // ConfLogger Inserted End
        server.refreshServiceAcl(confCopy, new HDFSPolicyProvider());
    } else {
        // ConfLogger Inserted Start
        logger.info("Service-level authorization security policy is disabled. Configuration key: " + CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION + ", value: " + confCopy.getBoolean(CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false));
        // ConfLogger Inserted End
    }
    this.server.setTracer(jn.tracer);
}
```