```java
final BlockManager blockManager, final Configuration conf) {
    this.namesystem = namesystem;
    this.blockManager = blockManager;
    boolean avoidStaleDataNodesForWrite = conf.getBoolean(
        DFSConfigKeys.DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_KEY,
        DFSConfigKeys.DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_DEFAULT);
    long recheckInterval = conf.getInt(
        DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,
        DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_DEFAULT); // 5 min
    long staleInterval = conf.getLong(
        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY,
        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_DEFAULT);// 30s
    enableLogStaleNodes = conf.getBoolean(
        DFSConfigKeys.DFS_NAMENODE_ENABLE_LOG_STALE_DATANODE_KEY,
        DFSConfigKeys.DFS_NAMENODE_ENABLE_LOG_STALE_DATANODE_DEFAULT);

    if (avoidStaleDataNodesForWrite && staleInterval < recheckInterval) {
        this.heartbeatRecheckInterval = staleInterval;
        // ConfLogger Skipped
    } else {
        this.heartbeatRecheckInterval = recheckInterval;
        // ConfLogger Inserted Start
        logger.info("Setting heartbeat recheck interval to " + recheckInterval + 
                    " because either " + DFSConfigKeys.DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_KEY + 
                    " is false or " + DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY + 
                    " is not less than " + DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY + 
                    ". Current values: " + DFSConfigKeys.DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_KEY + 
                    " = " + avoidStaleDataNodesForWrite + ", " + 
                    DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY + " = " + staleInterval + 
                    ", " + DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY + " = " + recheckInterval);
        // ConfLogger Inserted End
    }
}
```