```java
if (configuration == null) {
    return null;
}
// If the hdfs-site.xml has the proper configs for filter classes, use them.
Class<?>[] classes =
    configuration.getClasses(
        DFSConfigKeys.DFS_DATANODE_HTTPSERVER_FILTER_HANDLERS);

// else use the hard coded class from the default configuration.
if (classes == null) {
    // ConfLogger Inserted Start
    logger.warn("Configuration parameter '{}' is not set. Using default configuration parameter '{}'.", 
                DFSConfigKeys.DFS_DATANODE_HTTPSERVER_FILTER_HANDLERS, 
                DFSConfigKeys.DFS_DATANODE_HTTPSERVER_FILTER_HANDLERS_DEFAULT);
    // ConfLogger Inserted End
    classes =
        configuration.getClasses(
            DFSConfigKeys.DFS_DATANODE_HTTPSERVER_FILTER_HANDLERS_DEFAULT);
}

// if we are not able to find any handlers, let us fail since running
// with Csrf will is a security hole. Let us abort the startup.
if(classes == null)  {
    // ConfLogger Inserted Start
    logger.error("Failed to find any handlers for configuration parameters '{}' or '{}'. Aborting startup due to potential security risks.", 
                 DFSConfigKeys.DFS_DATANODE_HTTPSERVER_FILTER_HANDLERS, 
                 DFSConfigKeys.DFS_DATANODE_HTTPSERVER_FILTER_HANDLERS_DEFAULT);
    // ConfLogger Inserted End
    return null;
}

ChannelHandler[] handlers = new ChannelHandler[classes.length];
for (int i = 0; i < classes.length; i++) {
    LOG.debug("Loading filter handler {}", classes[i].getName());
    try {
        Method initializeState = classes[i].getDeclaredMethod("initializeState",
            Configuration.class);
        Constructor<?> constructor =
            classes[i].getDeclaredConstructor(initializeState.getReturnType());
        handlers[i] = (ChannelHandler) constructor.newInstance(
            initializeState.invoke(null, configuration));
    } catch (NoSuchMethodException | InvocationTargetException
        | IllegalAccessException | InstantiationException
        | IllegalArgumentException e) {
        LOG.error("Failed to initialize handler {}", classes[i].toString());
        throw new RuntimeException(e);
    }
}
return (handlers);
```