```java
final boolean isEnabled = conf.getBoolean(
DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY,
DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_DEFAULT);
LOG.info("{} = {}", DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY,
isEnabled);

if (!isEnabled) {
    if (UserGroupInformation.isSecurityEnabled()) {
        String errMessage = "Security is enabled but block access tokens " +
        "(via " + DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY + ") " +
        "aren't enabled. This may cause issues " +
        "when clients attempt to connect to a DataNode. Aborting NameNode";
        throw new IOException(errMessage);
    }
    // ConfLogger Inserted Start
    logger.warn("Block access tokens are not enabled ({}={}). Ensure that {} is set to true to avoid issues when clients attempt to connect to a DataNode.", 
                DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY, isEnabled, DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY);
    // ConfLogger Inserted End
    return null;
}

final long updateMin = conf.getLong(
DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY,
DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_DEFAULT);
final long lifetimeMin = conf.getLong(
DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY,
DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_DEFAULT);
final String encryptionAlgorithm = conf.get(
DFSConfigKeys.DFS_DATA_ENCRYPTION_ALGORITHM_KEY);
LOG.info("{}={} min(s), {}={} min(s), {}={}",
DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY, updateMin,
DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY, lifetimeMin,
DFSConfigKeys.DFS_DATA_ENCRYPTION_ALGORITHM_KEY, encryptionAlgorithm);

String nsId = DFSUtil.getNamenodeNameServiceId(conf);
boolean isHaEnabled = HAUtil.isHAEnabled(conf, nsId);
boolean shouldWriteProtobufToken = conf.getBoolean(
DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_PROTOBUF_ENABLE,
DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_PROTOBUF_ENABLE_DEFAULT);

boolean shouldWrapQOP = conf.getBoolean(
DFS_NAMENODE_SEND_QOP_ENABLED, DFS_NAMENODE_SEND_QOP_ENABLED_DEFAULT);

if (isHaEnabled) {
    // figure out which index we are of the nns
    Collection<String> nnIds = DFSUtilClient.getNameNodeIds(conf, nsId);
    String nnId = HAUtil.getNameNodeId(conf, nsId);
    int nnIndex = 0;
    for (String id : nnIds) {
        if (id.equals(nnId)) {
            break;
        }
        nnIndex++;
    }
    // ConfLogger Inserted Start
    logger.info("HA is enabled ({}={}). NameNode ID: {}, Index: {}, Total NameNodes: {}",
                DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX, isHaEnabled, nnId, nnIndex, nnIds.size());
    // ConfLogger Inserted End
    return new BlockTokenSecretManager(updateMin * 60 * 1000L,
    lifetimeMin * 60 * 1000L, nnIndex, nnIds.size(), null,
    encryptionAlgorithm, shouldWriteProtobufToken, shouldWrapQOP);
} else {
    // ConfLogger Inserted Start
    logger.info("HA is not enabled ({}={}). Defaulting to single NameNode configuration.",
                DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX, isHaEnabled);
    // ConfLogger Inserted End
    return new BlockTokenSecretManager(updateMin*60*1000L,
    lifetimeMin*60*1000L, 0, 1, null, encryptionAlgorithm,
    shouldWriteProtobufToken, shouldWrapQOP);
}
```