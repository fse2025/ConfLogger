```java
String name = config.get(DFS_DATANODE_HOST_NAME_KEY);
if (name == null) {
    String dnsInterface = config.get(
        CommonConfigurationKeys.HADOOP_SECURITY_DNS_INTERFACE_KEY);
    String nameServer = config.get(
        CommonConfigurationKeys.HADOOP_SECURITY_DNS_NAMESERVER_KEY);
    boolean fallbackToHosts = false;

    if (dnsInterface == null) {
        // Try the legacy configuration keys.
        dnsInterface = config.get(DFS_DATANODE_DNS_INTERFACE_KEY);
        nameServer = config.get(DFS_DATANODE_DNS_NAMESERVER_KEY);
    } else {
        // If HADOOP_SECURITY_DNS_* is set then also attempt hosts file
        // resolution if DNS fails. We will not use hosts file resolution
        // by default to avoid breaking existing clusters.
        fallbackToHosts = true;
    }

    // ConfLogger Inserted Start
    logger.info("Configuration parameters: HADOOP_SECURITY_DNS_INTERFACE_KEY={}, HADOOP_SECURITY_DNS_NAMESERVER_KEY={}, DFS_DATANODE_DNS_INTERFACE_KEY={}, DFS_DATANODE_DNS_NAMESERVER_KEY={}, fallbackToHosts={}", 
                dnsInterface, nameServer, config.get(DFS_DATANODE_DNS_INTERFACE_KEY), config.get(DFS_DATANODE_DNS_NAMESERVER_KEY), fallbackToHosts);
    // ConfLogger Inserted End

    name = DNS.getDefaultHost(dnsInterface, nameServer, fallbackToHosts);
}
return name;
}
```