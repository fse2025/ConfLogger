```java
throws IOException {
this.nameNodeUri = nameNodeUri;
this.idPath = idPath;
this.targetPaths = targetPaths == null || targetPaths.isEmpty() ? Arrays
.asList(new Path("/")) : targetPaths;
this.maxNotChangedIterations = maxNotChangedIterations;
int getBlocksMaxQps = conf.getInt(
DFSConfigKeys.DFS_NAMENODE_GETBLOCKS_MAX_QPS_KEY,
DFSConfigKeys.DFS_NAMENODE_GETBLOCKS_MAX_QPS_DEFAULT);
if (getBlocksMaxQps > 0) {
// ConfLogger Commented: Not Informative
// LOG.info("getBlocks calls for {} will be rate-limited to {} per second", nameNodeUri, getBlocksMaxQps);
// ConfLogger Inserted Start
logger.info("getBlocks calls for {} will be rate-limited to {} per second. Configuration parameter: {} = {}", 
    nameNodeUri, getBlocksMaxQps, DFSConfigKeys.DFS_NAMENODE_GETBLOCKS_MAX_QPS_KEY, getBlocksMaxQps);
// ConfLogger Inserted End
this.getBlocksRateLimiter = RateLimiter.create(getBlocksMaxQps);
} else {
// ConfLogger Inserted Start
logger.warn("getBlocks calls for {} will not be rate-limited. Configuration parameter: {} = {}", 
    nameNodeUri, DFSConfigKeys.DFS_NAMENODE_GETBLOCKS_MAX_QPS_KEY, getBlocksMaxQps);
// ConfLogger Inserted End
this.getBlocksRateLimiter = null;
}

this.namenode = NameNodeProxies.createProxy(conf, nameNodeUri,
BalancerProtocols.class, fallbackToSimpleAuth).getProxy();
this.requestToStandby = conf.getBoolean(
DFSConfigKeys.DFS_HA_ALLOW_STALE_READ_KEY,
DFSConfigKeys.DFS_HA_ALLOW_STALE_READ_DEFAULT);
this.config = conf;

this.fs = (DistributedFileSystem)FileSystem.get(nameNodeUri, conf);

final NamespaceInfo namespaceinfo = namenode.versionRequest();
this.blockpoolID = namespaceinfo.getBlockPoolID();

final FsServerDefaults defaults = fs.getServerDefaults(new Path("/"));
this.keyManager = new KeyManager(blockpoolID, namenode,
defaults.getEncryptDataTransfer(), conf);
// if it is for test, we do not create the id file
if (checkOtherInstanceRunning) {
out = checkAndMarkRunning();
if (out == null) {
// Exit if there is another one running.
throw new IOException("Another " + name + " is running.");
}
}
}
```