```java
HttpConfig.Policy policy = getHttpPolicy(conf);

String filterInitializerConfKey = "hadoop.http.filter.initializers";
String initializers = conf.get(filterInitializerConfKey, "");

String[] parts = initializers.split(",");
Set<String> target = new LinkedHashSet<String>();
for (String filterInitializer : parts) {
    filterInitializer = filterInitializer.trim();
    if (filterInitializer.equals(
            AuthenticationFilterInitializer.class.getName()) ||
        filterInitializer.equals(
            ProxyUserAuthenticationFilterInitializer.class.getName()) ||
        filterInitializer.isEmpty()) {
        continue;
    }
    target.add(filterInitializer);
}
target.add(AuthFilterInitializer.class.getName());
initializers = StringUtils.join(target, ",");
conf.set(filterInitializerConfKey, initializers);

LOG.info("Filter initializers set : " + initializers);

HttpServer2.Builder builder = new HttpServer2.Builder().setName(name)
    .setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN, " ")))
    .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())
    .setUsernameConfKey(spnegoUserNameKey)
    .setKeytabConfKey(getSpnegoKeytabKey(conf, spnegoKeytabFileKey));

// initialize the webserver for uploading/downloading files.
if (UserGroupInformation.isSecurityEnabled()) {
    LOG.info("Starting web server as: "
        + SecurityUtil.getServerPrincipal(conf.get(spnegoUserNameKey),
        httpAddr.getHostName()));
}

if (policy.isHttpEnabled()) {
    if (httpAddr.getPort() == 0) {
        builder.setFindPort(true);
    }

    URI uri = URI.create("http://" + NetUtils.getHostPortString(httpAddr));
    builder.addEndpoint(uri);
    LOG.info("Starting Web-server for " + name + " at: " + uri);
}

if (policy.isHttpsEnabled() && httpsAddr != null) {
    Configuration sslConf = loadSslConfiguration(conf);
    loadSslConfToHttpServerBuilder(builder, sslConf);

    if (httpsAddr.getPort() == 0) {
        builder.setFindPort(true);
    }

    URI uri = URI.create("https://" + NetUtils.getHostPortString(httpsAddr));
    builder.addEndpoint(uri);
    // ConfLogger Commented: Not Informative
    // LOG.info("Starting Web-server for " + name + " at: " + uri);
    // ConfLogger Inserted Start
    logger.info("HTTPS is enabled. Starting Web-server for " + name + " at: " + uri + ". Configuration parameter: httpsAddr=" + httpsAddr);
    // ConfLogger Inserted End
}
return builder;
```