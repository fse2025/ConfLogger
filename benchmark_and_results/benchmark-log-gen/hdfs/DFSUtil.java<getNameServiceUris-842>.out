====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	DFSUtil.java	methodSinagture:	org.apache.hadoop.hdfs.DFSUtil.getNameServiceUris(Lorg/apache/hadoop/conf/Configuration;Ljava/util/Collection;[Ljava/lang/String;)Ljava/util/Collection;	methodLines:	842:930
blockLines:	892:-1
paras:	null
TaintedStat:	NORMAL getNameServiceUris:conditional branch(eq, to iindex=159) 72,53 Node: < Application, Lorg/apache/hadoop/hdfs/DFSUtil, getNameServiceUris(Lorg/apache/hadoop/conf/Configuration;Ljava/util/Collection;[Ljava/lang/String;)Ljava/util/Collection; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/DFSUtil, getNameServiceUris(Lorg/apache/hadoop/conf/Configuration;Ljava/util/Collection;[Ljava/lang/String;)Ljava/util/Collection; > Context: Everywhere[135]72 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 1,70 @275 exception:71
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/DFSUtil, getNameServiceUris(Lorg/apache/hadoop/conf/Configuration;Ljava/util/Collection;[Ljava/lang/String;)Ljava/util/Collection; > Context: Everywhere[135]72 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 1,70 @275 exception:71
NORMAL getNameServiceUris:conditional branch(eq, to iindex=159) 72,53 Node: < Application, Lorg/apache/hadoop/hdfs/DFSUtil, getNameServiceUris(Lorg/apache/hadoop/conf/Configuration;Ljava/util/Collection;[Ljava/lang/String;)Ljava/util/Collection; > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	DFSUtil.java	methodSinagture:	org.apache.hadoop.hdfs.DFSUtil.getNameServiceUris(Lorg/apache/hadoop/conf/Configuration;Ljava/util/Collection;[Ljava/lang/String;)Ljava/util/Collection;	methodLines:	842:930
blockLines:	874:-1
paras:	null
TaintedStat:	NORMAL getNameServiceUris:conditional branch(eq, to iindex=111) 52,53 Node: < Application, Lorg/apache/hadoop/hdfs/DFSUtil, getNameServiceUris(Lorg/apache/hadoop/conf/Configuration;Ljava/util/Collection;[Ljava/lang/String;)Ljava/util/Collection; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/DFSUtil, getNameServiceUris(Lorg/apache/hadoop/conf/Configuration;Ljava/util/Collection;[Ljava/lang/String;)Ljava/util/Collection; > Context: Everywhere[87]52 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 1,50 @183 exception:51
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/DFSUtil, getNameServiceUris(Lorg/apache/hadoop/conf/Configuration;Ljava/util/Collection;[Ljava/lang/String;)Ljava/util/Collection; > Context: Everywhere[87]52 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 1,50 @183 exception:51
NORMAL getNameServiceUris:conditional branch(eq, to iindex=111) 52,53 Node: < Application, Lorg/apache/hadoop/hdfs/DFSUtil, getNameServiceUris(Lorg/apache/hadoop/conf/Configuration;Ljava/util/Collection;[Ljava/lang/String;)Ljava/util/Collection; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
      Collection<String> nameServices, String... keys) {
    Set<URI> ret = new HashSet<URI>();
    
    // We're passed multiple possible configuration keys for any given NN or HA
    // nameservice, and search the config in order of these keys. In order to
    // make sure that a later config lookup (e.g. fs.defaultFS) doesn't add a
    // URI for a config key for which we've already found a preferred entry, we
    // keep track of non-preferred keys here.
    Set<URI> nonPreferredUris = new HashSet<URI>();
    
    for (String nsId : nameServices) {
      URI nsUri = createUri(HdfsConstants.HDFS_URI_SCHEME, nsId, -1);
      /**
       * Determine whether the logical URI of the name service can be resolved
       * by the configured failover proxy provider. If not, we should try to
       * resolve the URI here
       */
      boolean useLogicalUri = false;
      try {
        useLogicalUri = HAUtil.useLogicalUri(conf, nsUri);
      } catch (IOException e){
        LOG.warn("Getting exception  while trying to determine if nameservice "
            + nsId + " can use logical URI: " + e);
      }
      if (HAUtil.isHAEnabled(conf, nsId) && useLogicalUri) {
        // Add the logical URI of the nameservice.
        ret.add(nsUri);
      } else {
        // Add the URI corresponding to the address of the NN.
        boolean uriFound = false;
        for (String key : keys) {
          String addr = conf.get(DFSUtilClient.concatSuffixes(key, nsId));
          if (addr != null) {
            URI uri = createUri(HdfsConstants.HDFS_URI_SCHEME,
                NetUtils.createSocketAddr(addr));
            if (!uriFound) {
              uriFound = true;
              ret.add(uri);
            } else {
              nonPreferredUris.add(uri);
            }
          }
        }
      }
    }
    
    // Add the generic configuration keys.
    boolean uriFound = false;
    for (String key : keys) {
      String addr = conf.get(key);
      if (addr != null) {
        URI uri = createUri(HdfsConstants.HDFS_URI_SCHEME,
            NetUtils.createSocketAddr(addr));
        if (!uriFound) {
          uriFound = true;
          ret.add(uri);
        } else {
          nonPreferredUris.add(uri);
        }
      }
    }

    // Add the default URI if it is an HDFS URI and we haven't come up with a
    // valid non-nameservice NN address yet.  Consider the servicerpc-address
    // and rpc-address to be the "unnamed" nameservice.  defaultFS is our
    // fallback when rpc-address isn't given.  We therefore only want to add
    // the defaultFS when neither the servicerpc-address (which is preferred)
    // nor the rpc-address (which overrides defaultFS) is given.
    if (!uriFound) {
      URI defaultUri = FileSystem.getDefaultUri(conf);
      if (defaultUri != null) {
        // checks if defaultUri is ip:port format
        // and convert it to hostname:port format
        if (defaultUri.getPort() != -1) {
          defaultUri = createUri(defaultUri.getScheme(),
              NetUtils.createSocketAddr(defaultUri.getHost(),
                  defaultUri.getPort()));
        }

        defaultUri = trimUri(defaultUri);

        if (HdfsConstants.HDFS_URI_SCHEME.equals(defaultUri.getScheme()) &&
            !nonPreferredUris.contains(defaultUri)) {
          ret.add(defaultUri);
        }
      }
    }
    
    return ret;
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/hdfs/DFSUtil, getInternalNsRpcUris(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/Collection; > Context: Everywhere, blocks=[BB[SSA:13..13]5 - org.apache.hadoop.hdfs.DFSUtil.getInternalNsRpcUris(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/Collection;, BB[SSA:9..12]4 - org.apache.hadoop.hdfs.DFSUtil.getInternalNsRpcUris(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/Collection;, BB[SSA:14..14]6 - org.apache.hadoop.hdfs.DFSUtil.getInternalNsRpcUris(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/Collection;, BB[SSA:-1..-2]7 - org.apache.hadoop.hdfs.DFSUtil.getInternalNsRpcUris(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/Collection;], numberOfBasicBlocks=4, firstLineNumber=824, lastLineNumber=824, firstMethodNumber=823, lastMethodNumber=824, isFirstLineValid=true, methodSrcCode=
  public static Collection<URI> getInternalNsRpcUris(Configuration conf) {
    return getNameServiceUris(conf, getInternalNameServices(conf),
        DFSConfigKeys.DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,
}
