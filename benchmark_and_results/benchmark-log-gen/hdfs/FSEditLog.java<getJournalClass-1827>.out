====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	FSEditLog.java	methodSinagture:	org.apache.hadoop.hdfs.server.namenode.FSEditLog.getJournalClass(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Ljava/lang/Class;	methodLines:	1827:1844
blockLines:	1838:-1
paras:	null
TaintedStat:	NORMAL getJournalClass:conditional branch(ne, to iindex=63) 16,13 Node: < Application, Lorg/apache/hadoop/hdfs/server/namenode/FSEditLog, getJournalClass(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Ljava/lang/Class; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/server/namenode/FSEditLog, getJournalClass(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Ljava/lang/Class; > Context: Everywhere[15]16 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getClass(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Class; > 1,12,13,14 @28 exception:15
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/hdfs/server/namenode/FSEditLog, getJournalClass(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Ljava/lang/Class; > Context: Everywhere[15]16 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getClass(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Class; > 1,12,13,14 @28 exception:15
NORMAL getJournalClass:conditional branch(ne, to iindex=63) 16,13 Node: < Application, Lorg/apache/hadoop/hdfs/server/namenode/FSEditLog, getJournalClass(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;)Ljava/lang/Class; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
                               String uriScheme) {
    String key
      = DFSConfigKeys.DFS_NAMENODE_EDITS_PLUGIN_PREFIX + "." + uriScheme;
    Class <? extends JournalManager> clazz = null;
    try {
      clazz = conf.getClass(key, null, JournalManager.class);
    } catch (RuntimeException re) {
      throw new IllegalArgumentException(
          "Invalid class specified for " + uriScheme, re);
    }
      
    if (clazz == null) {
      LOG.warn("No class configured for " +uriScheme
               + ", " + key + " is empty");
      throw new IllegalArgumentException(
          "No class configured for " + uriScheme);
    }
    return clazz;
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/hdfs/server/namenode/FSEditLog, createJournal(Ljava/net/URI;)Lorg/apache/hadoop/hdfs/server/namenode/JournalManager; > Context: Everywhere, blocks=[BB[SSA:4..4]3 - org.apache.hadoop.hdfs.server.namenode.FSEditLog.createJournal(Ljava/net/URI;)Lorg/apache/hadoop/hdfs/server/namenode/JournalManager;, BB[SSA:2..3]2 - org.apache.hadoop.hdfs.server.namenode.FSEditLog.createJournal(Ljava/net/URI;)Lorg/apache/hadoop/hdfs/server/namenode/JournalManager;, BB[SSA:5..8]4 - org.apache.hadoop.hdfs.server.namenode.FSEditLog.createJournal(Ljava/net/URI;)Lorg/apache/hadoop/hdfs/server/namenode/JournalManager;, BB[SSA:-1..-2]61 - org.apache.hadoop.hdfs.server.namenode.FSEditLog.createJournal(Ljava/net/URI;)Lorg/apache/hadoop/hdfs/server/namenode/JournalManager;], numberOfBasicBlocks=4, firstLineNumber=1856, lastLineNumber=1860, firstMethodNumber=1855, lastMethodNumber=1877, isFirstLineValid=true, methodSrcCode=
  JournalManager createJournal(URI uri) {
    Class<? extends JournalManager> clazz
      = getJournalClass(conf, uri.getScheme());

    try {
      Constructor<? extends JournalManager> cons
        = clazz.getConstructor(Configuration.class, URI.class,
            NamespaceInfo.class, String.class);
      String nameServiceId = conf.get(DFSConfigKeys.DFS_NAMESERVICE_ID);
      return cons.newInstance(conf, uri, storage.getNamespaceInfo(),
          nameServiceId);
    } catch (NoSuchMethodException ne) {
      try {
        Constructor<? extends JournalManager> cons
            = clazz.getConstructor(Configuration.class, URI.class,
            NamespaceInfo.class);
        return cons.newInstance(conf, uri, storage.getNamespaceInfo());
      } catch (Exception e) {
        throw new IllegalArgumentException("Unable to construct journal, "
            + uri, e);
      }
    } catch (Exception e) {
      throw new IllegalArgumentException("Unable to construct journal, "
                                         + uri, e);
}
