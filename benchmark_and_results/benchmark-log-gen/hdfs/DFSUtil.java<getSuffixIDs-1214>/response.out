```java
String nameserviceId = null;
String namenodeId = null;
int found = 0;

Collection<String> nsIds = DFSUtilClient.getNameServiceIds(conf);
for (String nsId : DFSUtilClient.emptyAsSingletonNull(nsIds)) {
    if (knownNsId != null && !knownNsId.equals(nsId)) {
        continue;
    }

    Collection<String> nnIds = DFSUtilClient.getNameNodeIds(conf, nsId);
    for (String nnId : DFSUtilClient.emptyAsSingletonNull(nnIds)) {
        if (LOG.isTraceEnabled()) {
            LOG.trace(String.format("addressKey: %s nsId: %s nnId: %s",
                    addressKey, nsId, nnId));
        }
        if (knownNNId != null && !knownNNId.equals(nnId)) {
            // ConfLogger Skipped
            continue;
        }
        String key = addKeySuffixes(addressKey, nsId, nnId);
        String addr = conf.get(key);
        if (addr == null) {
            // ConfLogger Inserted Start
            logger.warn("Address is null for key: " + key + ". Please check the configuration for nsId: " + nsId + " and nnId: " + nnId);
            // ConfLogger Inserted End
            continue;
        }
        InetSocketAddress s = null;
        try {
            s = NetUtils.createSocketAddr(addr);
        } catch (Exception e) {
            LOG.warn("Exception in creating socket address " + addr, e); // ConfLogger Commented: Not Informative
            // ConfLogger Inserted Start
            logger.warn("Failed to create socket address for addr: " + addr + ". Exception: " + e.getMessage());
            // ConfLogger Inserted End
            continue;
        }
        if (!s.isUnresolved() && matcher.match(s)) {
            nameserviceId = nsId;
            namenodeId = nnId;
            found++;
        }
    }
}
if (found > 1) { // Only one address must match the local address
    String msg = "Configuration has multiple addresses that match "
            + "local node's address. Please configure the system with "
            + DFS_NAMESERVICE_ID + " and "
            + DFS_HA_NAMENODE_ID_KEY;
    throw new HadoopIllegalArgumentException(msg);
}
return new String[] { nameserviceId, namenodeId };
```