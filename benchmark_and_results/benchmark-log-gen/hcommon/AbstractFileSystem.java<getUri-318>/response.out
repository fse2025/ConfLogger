```java
checkScheme(uri, supportedScheme);
// A file system implementation that requires authority must always
// specify default port
if (defaultPort < 0 && authorityNeeded) {
    // ConfLogger Inserted Start
    logger.error("Configuration Error: FileSystem implementation error - default port is not valid. defaultPort: " + defaultPort + ", authorityNeeded: " + authorityNeeded);
    // ConfLogger Inserted End
    throw new HadoopIllegalArgumentException(
        "FileSystem implementation error -  default port " + defaultPort
        + " is not valid");
}
String authority = uri.getAuthority();
if (authority == null) {
    if (authorityNeeded) {
        // ConfLogger Inserted Start
        logger.error("Configuration Error: Uri without authority. uri: " + uri + ", authorityNeeded: " + authorityNeeded);
        // ConfLogger Inserted End
        throw new HadoopIllegalArgumentException("Uri without authority: " + uri);
    } else {
        return new URI(supportedScheme + ":///");
    }
}
// authority is non null  - AuthorityNeeded may be true or false.
int port = uri.getPort();
port = (port == -1 ? defaultPort : port);
if (port == -1) { // no port supplied and default port is not specified
    // ConfLogger Inserted Start
    logger.warn("Configuration Warning: No port supplied and default port is not specified. Returning URI with default scheme and authority. supportedScheme: " + supportedScheme + ", authority: " + authority);
    // ConfLogger Inserted End
    return new URI(supportedScheme, authority, "/", null);
}
return new URI(supportedScheme + "://" + uri.getHost() + ":" + port);
```
