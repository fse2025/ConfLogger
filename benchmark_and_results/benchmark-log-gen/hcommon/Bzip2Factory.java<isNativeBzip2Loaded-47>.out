====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	Bzip2Factory.java	methodSinagture:	org.apache.hadoop.io.compress.bzip2.Bzip2Factory.isNativeBzip2Loaded(Lorg/apache/hadoop/conf/Configuration;)Z	methodLines:	47:69
blockLines:	50:-1
paras:	io.compression.codec.bzip2.library
TaintedStat:	NORMAL isNativeBzip2Loaded:conditional branch(ne, to iindex=56) 9,10 Node: < Application, Lorg/apache/hadoop/io/compress/bzip2/Bzip2Factory, isNativeBzip2Loaded(Lorg/apache/hadoop/conf/Configuration;)Z > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/io/compress/bzip2/Bzip2Factory, isNativeBzip2Loaded(Lorg/apache/hadoop/conf/Configuration;)Z > Context: Everywhere[3]6 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 1,3,4 @5 exception:5
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/io/compress/bzip2/Bzip2Factory, isNativeBzip2Loaded(Lorg/apache/hadoop/conf/Configuration;)Z > Context: Everywhere[3]6 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 1,3,4 @5 exception:5
NORMAL isNativeBzip2Loaded:9 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 7,6 @13 exception:8 Node: < Application, Lorg/apache/hadoop/io/compress/bzip2/Bzip2Factory, isNativeBzip2Loaded(Lorg/apache/hadoop/conf/Configuration;)Z > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/String, equals(Ljava/lang/Object;)Z > Context: Everywhere
NORMAL equals:conditional branch(ne, to iindex=5) 1,2 Node: < Primordial, Ljava/lang/String, equals(Ljava/lang/Object;)Z > Context: Everywhere
NORMAL equals:return 22 Node: < Primordial, Ljava/lang/String, equals(Ljava/lang/Object;)Z > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/lang/String, equals(Ljava/lang/Object;)Z > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/io/compress/bzip2/Bzip2Factory, isNativeBzip2Loaded(Lorg/apache/hadoop/conf/Configuration;)Z > Context: Everywhere[7]9 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 7,6 @13 exception:8
NORMAL isNativeBzip2Loaded:conditional branch(ne, to iindex=56) 9,10 Node: < Application, Lorg/apache/hadoop/io/compress/bzip2/Bzip2Factory, isNativeBzip2Loaded(Lorg/apache/hadoop/conf/Configuration;)Z > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  public static synchronized boolean isNativeBzip2Loaded(Configuration conf) {
    String libname = conf.get("io.compression.codec.bzip2.library", 
                              "system-native");
    if (!bzip2LibraryName.equals(libname)) {
      nativeBzip2Loaded = false;
      bzip2LibraryName = libname;
      if (libname.equals("java-builtin")) {
        LOG.info("Using pure-Java version of bzip2 library");
      } else if (NativeCodeLoader.isNativeCodeLoaded()) {
        try {
          // Initialize the native library.
          Bzip2Compressor.initSymbols(libname);
          Bzip2Decompressor.initSymbols(libname);
          nativeBzip2Loaded = true;
          LOG.info("Successfully loaded & initialized native-bzip2 library " +
                   libname);
        } catch (Throwable t) {
          LOG.warn("Failed to load/initialize native-bzip2 library " + 
                   libname + ", will use pure-Java version");
        }
      }
    }
    return nativeBzip2Loaded;
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/io/compress/bzip2/Bzip2Factory, getBzip2DecompressorType(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class; > Context: Everywhere, blocks=[BB[SSA:0..1]1 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2DecompressorType(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class;, BB[SSA:-1..-2]0 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2DecompressorType(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class;, BB[SSA:2..3]2 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2DecompressorType(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class;, BB[SSA:-1..-2]7 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2DecompressorType(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class;], numberOfBasicBlocks=4, firstLineNumber=110, lastLineNumber=111, firstMethodNumber=110, lastMethodNumber=111, isFirstLineValid=false, methodSrcCode=
  getBzip2DecompressorType(Configuration conf) {
    return  isNativeBzip2Loaded(conf) ? 
      Bzip2Decompressor.class : BZip2DummyDecompressor.class;
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/io/compress/bzip2/Bzip2Factory, getBzip2Compressor(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/io/compress/Compressor; > Context: Everywhere, blocks=[BB[SSA:0..1]1 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2Compressor(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/io/compress/Compressor;, BB[SSA:-1..-2]0 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2Compressor(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/io/compress/Compressor;, BB[SSA:2..3]2 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2Compressor(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/io/compress/Compressor;, BB[SSA:-1..-2]9 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2Compressor(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/io/compress/Compressor;], numberOfBasicBlocks=4, firstLineNumber=98, lastLineNumber=99, firstMethodNumber=98, lastMethodNumber=99, isFirstLineValid=false, methodSrcCode=
  public static Compressor getBzip2Compressor(Configuration conf) {
    return isNativeBzip2Loaded(conf)? 
      new Bzip2Compressor(conf) : new BZip2DummyCompressor();
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/io/compress/bzip2/Bzip2Factory, getBzip2Decompressor(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/io/compress/Decompressor; > Context: Everywhere, blocks=[BB[SSA:0..1]1 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2Decompressor(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/io/compress/Decompressor;, BB[SSA:-1..-2]0 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2Decompressor(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/io/compress/Decompressor;, BB[SSA:2..3]2 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2Decompressor(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/io/compress/Decompressor;, BB[SSA:-1..-2]9 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2Decompressor(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/io/compress/Decompressor;], numberOfBasicBlocks=4, firstLineNumber=121, lastLineNumber=122, firstMethodNumber=121, lastMethodNumber=122, isFirstLineValid=false, methodSrcCode=
  public static Decompressor getBzip2Decompressor(Configuration conf) {
    return isNativeBzip2Loaded(conf) ? 
      new Bzip2Decompressor() : new BZip2DummyDecompressor();
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/util/NativeLibraryChecker, main([Ljava/lang/String;)V > Context: Everywhere, blocks=[BB[SSA:53..63]24 - org.apache.hadoop.util.NativeLibraryChecker.main([Ljava/lang/String;)V, BB[SSA:51..52]23 - org.apache.hadoop.util.NativeLibraryChecker.main([Ljava/lang/String;)V, BB[SSA:64..87]25 - org.apache.hadoop.util.NativeLibraryChecker.main([Ljava/lang/String;)V, BB[SSA:-1..-2]126 - org.apache.hadoop.util.NativeLibraryChecker.main([Ljava/lang/String;)V], numberOfBasicBlocks=4, firstLineNumber=66, lastLineNumber=85, firstMethodNumber=45, lastMethodNumber=156, isFirstLineValid=true, methodSrcCode=
  public static void main(String[] args) {
    String usage = "NativeLibraryChecker [-a|-h]\n"
        + "  -a  use -a to check all libraries are available\n"
        + "      by default just check hadoop library (and\n"
        + "      winutils.exe on Windows OS) is available\n"
        + "      exit with error code 1 if check failed\n"
        + "  -h  print this message\n";
    if (args.length > 1 ||
        (args.length == 1 &&
            !(args[0].equals("-a") || args[0].equals("-h")))) {
      System.err.println(usage);
      ExitUtil.terminate(1);
    }
    boolean checkAll = false;
    if (args.length == 1) {
      if (args[0].equals("-h")) {
        System.out.println(usage);
        return;
      }
      checkAll = true;
    }
    Configuration conf = new Configuration();
    boolean nativeHadoopLoaded = NativeCodeLoader.isNativeCodeLoaded();
    boolean zlibLoaded = false;
    boolean isalLoaded = false;
    boolean zStdLoaded = false;
    boolean pmdkLoaded = false;
    boolean bzip2Loaded = Bzip2Factory.isNativeBzip2Loaded(conf);
    boolean openSslLoaded = false;
    boolean winutilsExists = false;

    String openSslDetail = "";
    String hadoopLibraryName = "";
    String zlibLibraryName = "";
    String isalDetail = "";
    String pmdkDetail = "";
    String zstdLibraryName = "";
    String bzip2LibraryName = "";
    String winutilsPath = null;

    if (nativeHadoopLoaded) {
      hadoopLibraryName = NativeCodeLoader.getLibraryName();
      zlibLoaded = ZlibFactory.isNativeZlibLoaded(conf);
      if (zlibLoaded) {
        zlibLibraryName = ZlibFactory.getLibraryName();
      }
      zStdLoaded = NativeCodeLoader.buildSupportsZstd() &&
        ZStandardCodec.isNativeCodeLoaded();
      if (zStdLoaded && NativeCodeLoader.buildSupportsZstd()) {
        zstdLibraryName = ZStandardCodec.getLibraryName();
      }

      isalDetail = ErasureCodeNative.getLoadingFailureReason();
      if (isalDetail != null) {
        isalLoaded = false;
      } else {
        isalDetail = ErasureCodeNative.getLibraryName();
        isalLoaded = true;
      }

      pmdkDetail = NativeIO.POSIX.getPmdkSupportStateMessage();
      pmdkLoaded = NativeIO.POSIX.isPmdkAvailable();
      if (pmdkLoaded) {
        pmdkDetail = NativeIO.POSIX.Pmem.getPmdkLibPath();
      }

      openSslDetail = OpensslCipher.getLoadingFailureReason();
      if (openSslDetail != null) {
        openSslLoaded = false;
      } else {
        openSslDetail = OpensslCipher.getLibraryName();
        openSslLoaded = true;
      }

      if (bzip2Loaded) {
        bzip2LibraryName = Bzip2Factory.getLibraryName(conf);
      }
    }

    if (Shell.WINDOWS) {
      // winutils.exe is required on Windows
      try {
        winutilsPath = Shell.getWinUtilsFile().getCanonicalPath();
        winutilsExists = true;
      } catch (IOException e) {
        LOG.debug("No Winutils: ", e);
        winutilsPath = e.getMessage();
        winutilsExists = false;
      }
      System.out.printf("winutils: %b %s%n", winutilsExists, winutilsPath);
    }

    System.out.println("Native library checking:");
    System.out.printf("hadoop:  %b %s%n", nativeHadoopLoaded, hadoopLibraryName);
    System.out.printf("zlib:    %b %s%n", zlibLoaded, zlibLibraryName);
    System.out.printf("zstd  :  %b %s%n", zStdLoaded, zstdLibraryName);
    System.out.printf("bzip2:   %b %s%n", bzip2Loaded, bzip2LibraryName);
    System.out.printf("openssl: %b %s%n", openSslLoaded, openSslDetail);
    System.out.printf("ISA-L:   %b %s%n", isalLoaded, isalDetail);
    System.out.printf("PMDK:    %b %s%n", pmdkLoaded, pmdkDetail);

    if (Shell.WINDOWS) {
      System.out.printf("winutils: %b %s%n", winutilsExists, winutilsPath);
    }

    if ((!nativeHadoopLoaded) || (Shell.WINDOWS && (!winutilsExists)) ||
        (checkAll && !(zlibLoaded && bzip2Loaded
            && isalLoaded && zStdLoaded))) {
      // return 1 to indicated check failed
      ExitUtil.terminate(1);
    }
  }
}
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/io/compress/bzip2/Bzip2Factory, getBzip2CompressorType(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class; > Context: Everywhere, blocks=[BB[SSA:0..1]1 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2CompressorType(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class;, BB[SSA:-1..-2]0 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2CompressorType(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class;, BB[SSA:2..3]2 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2CompressorType(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class;, BB[SSA:-1..-2]7 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getBzip2CompressorType(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class;], numberOfBasicBlocks=4, firstLineNumber=87, lastLineNumber=88, firstMethodNumber=87, lastMethodNumber=88, isFirstLineValid=false, methodSrcCode=
  getBzip2CompressorType(Configuration conf) {
    return isNativeBzip2Loaded(conf) ? 
      Bzip2Compressor.class : BZip2DummyCompressor.class;
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/io/compress/bzip2/Bzip2Factory, getLibraryName(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String; > Context: Everywhere, blocks=[BB[SSA:0..1]1 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getLibraryName(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;, BB[SSA:-1..-2]0 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getLibraryName(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;, BB[SSA:2..3]2 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getLibraryName(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;, BB[SSA:-1..-2]6 - org.apache.hadoop.io.compress.bzip2.Bzip2Factory.getLibraryName(Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/String;], numberOfBasicBlocks=4, firstLineNumber=72, lastLineNumber=73, firstMethodNumber=72, lastMethodNumber=76, isFirstLineValid=false, methodSrcCode=
  public static String getLibraryName(Configuration conf) {
    if (isNativeBzip2Loaded(conf)) {
      return Bzip2Compressor.getLibraryName();
    } else {
      return bzip2LibraryName;
    }
}
