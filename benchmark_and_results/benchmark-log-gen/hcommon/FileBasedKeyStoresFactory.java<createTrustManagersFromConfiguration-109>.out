====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	FileBasedKeyStoresFactory.java	methodSinagture:	org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory.createTrustManagersFromConfiguration(Lorg/apache/hadoop/security/ssl/SSLFactory$Mode;Ljava/lang/String;Ljava/lang/String;J)V	methodLines:	109:150
blockLines:	136:-1
paras:	null
TaintedStat:	NORMAL createTrustManagersFromConfiguration:conditional branch(le, to iindex=76) 54,16 Node: < Application, Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory, createTrustManagersFromConfiguration(Lorg/apache/hadoop/security/ssl/SSLFactory$Mode;Ljava/lang/String;Ljava/lang/String;J)V > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory, createTrustManagersFromConfiguration(Lorg/apache/hadoop/security/ssl/SSLFactory$Mode;Ljava/lang/String;Ljava/lang/String;J)V > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere][23]24 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getLong(Ljava/lang/String;J)J > 19,22,5 @45 exception:23
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory, createTrustManagersFromConfiguration(Lorg/apache/hadoop/security/ssl/SSLFactory$Mode;Ljava/lang/String;Ljava/lang/String;J)V > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere][23]24 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getLong(Ljava/lang/String;J)J > 19,22,5 @45 exception:23
NORMAL createTrustManagersFromConfiguration:54 = compare 24,53 opcode=cmp Node: < Application, Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory, createTrustManagersFromConfiguration(Lorg/apache/hadoop/security/ssl/SSLFactory$Mode;Ljava/lang/String;Ljava/lang/String;J)V > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]
NORMAL createTrustManagersFromConfiguration:conditional branch(le, to iindex=76) 54,16 Node: < Application, Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory, createTrustManagersFromConfiguration(Lorg/apache/hadoop/security/ssl/SSLFactory$Mode;Ljava/lang/String;Ljava/lang/String;J)V > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
      throws IOException, GeneralSecurityException {
    String passwordProperty = resolvePropertyName(mode,
        SSL_TRUSTSTORE_PASSWORD_TPL_KEY);
    String truststorePassword = getPassword(conf, passwordProperty, "");
    if (truststorePassword.isEmpty()) {
      // An empty trust store password is legal; the trust store password
      // is only required when writing to a trust store. Otherwise it's
      // an optional integrity check.
      truststorePassword = null;
    }

    // Check if obsolete truststore specific reload interval is present for backward compatible
    long truststoreReloadInterval =
        conf.getLong(
            resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),
            storesReloadInterval);

    if (LOG.isDebugEnabled()) {
      LOG.debug(mode.toString() + " TrustStore: " + truststoreLocation +
          ", reloading at " + truststoreReloadInterval + " millis.");
    }

    trustManager = new ReloadingX509TrustManager(
        truststoreType,
        truststoreLocation,
        truststorePassword);

    if (truststoreReloadInterval > 0) {
      fileMonitoringTimer.schedule(
          new FileMonitoringTimerTask(
              Paths.get(truststoreLocation),
              path -> trustManager.loadFrom(path),
              exception -> LOG.error(ReloadingX509TrustManager.RELOAD_ERROR_MESSAGE, exception)),
          truststoreReloadInterval,
          truststoreReloadInterval);
    }

    if (LOG.isDebugEnabled()) {
      LOG.debug(mode.toString() + " Loaded TrustStore: " + truststoreLocation);
    }
    trustManagers = new TrustManager[]{trustManager};
  }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory, init(Lorg/apache/hadoop/security/ssl/SSLFactory$Mode;)V > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/security/ssl/FileBasedKeyStoresFactory, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:81..86]30 - org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory.init(Lorg/apache/hadoop/security/ssl/SSLFactory$Mode;)V, BB[SSA:79..80]29 - org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory.init(Lorg/apache/hadoop/security/ssl/SSLFactory$Mode;)V, BB[SSA:87..87]31 - org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory.init(Lorg/apache/hadoop/security/ssl/SSLFactory$Mode;)V, BB[SSA:-1..-2]43 - org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory.init(Lorg/apache/hadoop/security/ssl/SSLFactory$Mode;)V], numberOfBasicBlocks=4, firstLineNumber=291, lastLineNumber=292, firstMethodNumber=255, lastMethodNumber=300, isFirstLineValid=true, methodSrcCode=

    boolean requireClientCert =
      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,
          SSLFactory.SSL_REQUIRE_CLIENT_CERT_DEFAULT);

    long storesReloadInterval = conf.getLong(
        resolvePropertyName(mode, SSL_STORES_RELOAD_INTERVAL_TPL_KEY),
        DEFAULT_SSL_STORES_RELOAD_INTERVAL);

    fileMonitoringTimer = new Timer(SSL_MONITORING_THREAD_NAME, true);

    // certificate store
    String keystoreType =
        conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),
                 DEFAULT_KEYSTORE_TYPE);

    if (requireClientCert || mode == SSLFactory.Mode.SERVER) {
      createKeyManagersFromConfiguration(mode, keystoreType, storesReloadInterval);
    } else {
      KeyStore keystore = KeyStore.getInstance(keystoreType);
      keystore.load(null, null);
      KeyManagerFactory keyMgrFactory = KeyManagerFactory
              .getInstance(SSLFactory.SSLCERTIFICATE);

      keyMgrFactory.init(keystore, null);
      keyManagers = keyMgrFactory.getKeyManagers();
    }

    //trust store
    String truststoreType =
      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),
               DEFAULT_KEYSTORE_TYPE);

    String locationProperty =
      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);
    String truststoreLocation = conf.get(locationProperty, "");
    if (!truststoreLocation.isEmpty()) {
      createTrustManagersFromConfiguration(mode, truststoreType, truststoreLocation, storesReloadInterval);
    } else {
      if (LOG.isDebugEnabled()) {
        LOG.debug("The property '" + locationProperty + "' has not been set, " +
            "no TrustStore will be loaded");
      }
      trustManagers = null;
    }
  }

}
