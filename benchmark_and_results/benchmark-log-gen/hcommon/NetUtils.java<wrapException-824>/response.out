```java
if (exception instanceof BindException) {
    return wrapWithMessage(exception,
        "Problem binding to ["
        + localHost
        + ":"
        + localPort
        + "] "
        + exception
        + ";"
        + see("BindException"));
} else if (exception instanceof ConnectException) {
    // Check if client was trying to connect to an unspecified IPv4 address
    // (0.0.0.0) or IPv6 address(0:0:0:0:0:0:0:0 or ::)
    if ((destHost != null && (destHost.equals("0.0.0.0") ||
    destHost.equals("0:0:0:0:0:0:0:0") || destHost.equals("::")))
    || destPort == 0) {
        // ConfLogger Inserted Start
        logger.error("Configuration error: destHost is set to an unspecified address (0.0.0.0, 0:0:0:0:0:0:0:0, or ::) or destPort is 0. destHost: " + destHost + ", destPort: " + destPort);
        // ConfLogger Inserted End
        return wrapWithMessage(exception, "Your endpoint configuration" +
        " is wrong;" + see("UnsetHostnameOrPort"));
    } else {
        // connection refused; include the host:port in the error
        return wrapWithMessage(exception,
            "Call From "
            + localHost
            + " to "
            + destHost
            + ":"
            + destPort
            + " failed on connection exception: "
            + exception
            + ";"
            + see("ConnectionRefused"));
    }
} else if (exception instanceof UnknownHostException) {
    return wrapWithMessage(exception,
        "Invalid host name: "
        + getHostDetailsAsString(destHost, destPort, localHost)
        + exception
        + ";"
        + see("UnknownHost"));
} else if (exception instanceof SocketTimeoutException) {
    return wrapWithMessage(exception,
        "Call From "
        + localHost + " to " + destHost + ":" + destPort
        + " failed on socket timeout exception: " + exception
        + ";"
        + see("SocketTimeout"));
} else if (exception instanceof NoRouteToHostException) {
    return wrapWithMessage(exception,
        "No Route to Host from  "
        + localHost + " to " + destHost + ":" + destPort
        + " failed on socket timeout exception: " + exception
        + ";"
        + see("NoRouteToHost"));
} else if (exception instanceof EOFException) {
    return wrapWithMessage(exception,
        "End of File Exception between "
        + getHostDetailsAsString(destHost, destPort, localHost)
        + ": " + exception
        + ";"
        + see("EOFException"));
} else if (exception instanceof SocketException) {
    // Many of the predecessor exceptions are subclasses of SocketException,
    // so must be handled before this
    return wrapWithMessage(exception,
        "Call From "
        + localHost + " to " + destHost + ":" + destPort
        + " failed on socket exception: " + exception
        + ";"
        + see("SocketException"));
} else if (exception instanceof AccessControlException) {
    return wrapWithMessage(exception,
        "Call From "
        + localHost + " to " + destHost + ":" + destPort
        + " failed: " + exception.getMessage());
} else {
    // 1. Return instance of same type with exception msg if Exception has a
    // String constructor.
    // 2. Return instance of same type if Exception doesn't have a String
    // constructor.
    // Related HADOOP-16453.
    return wrapWithMessage(exception,
        "DestHost:destPort " + destHost + ":" + destPort
        + " , LocalHost:localPort " + localHost
        + ":" + localPort + ". Failed on local exception: " +
        exception);

}
} catch (IOException ex) {
    return (IOException) new IOException("Failed on local exception: "
    + exception + "; Host Details : "
```