====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	FileUtil.java	methodSinagture:	org.apache.hadoop.fs.FileUtil.setPermission(Ljava/io/File;Lorg/apache/hadoop/fs/permission/FsPermission;)V	methodLines:	1449:1486
blockLines:	1456:-1
paras:	null
TaintedStat:	NORMAL setPermission:conditional branch(ne, to iindex=18) 11,12 Node: < Application, Lorg/apache/hadoop/fs/FileUtil, setPermission(Ljava/io/File;Lorg/apache/hadoop/fs/permission/FsPermission;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/fs/FileUtil, setPermission(Ljava/io/File;Lorg/apache/hadoop/fs/permission/FsPermission;)V > Context: Everywhere[7]9 = invokevirtual < Application, Lorg/apache/hadoop/fs/permission/FsPermission, getOtherAction()Lorg/apache/hadoop/fs/permission/FsAction; > 2 @11 exception:8
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/fs/FileUtil, setPermission(Ljava/io/File;Lorg/apache/hadoop/fs/permission/FsPermission;)V > Context: Everywhere[7]9 = invokevirtual < Application, Lorg/apache/hadoop/fs/permission/FsPermission, getOtherAction()Lorg/apache/hadoop/fs/permission/FsAction; > 2 @11 exception:8
NORMAL setPermission:conditional branch(ne, to iindex=18) 7,9 Node: < Application, Lorg/apache/hadoop/fs/FileUtil, setPermission(Ljava/io/File;Lorg/apache/hadoop/fs/permission/FsPermission;)V > Context: Everywhere
NORMAL setPermission:conditional branch(ne, to iindex=18) 11,12 Node: < Application, Lorg/apache/hadoop/fs/FileUtil, setPermission(Ljava/io/File;Lorg/apache/hadoop/fs/permission/FsPermission;)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
                                   ) throws IOException {
    FsAction user = permission.getUserAction();
    FsAction group = permission.getGroupAction();
    FsAction other = permission.getOtherAction();

    // use the native/fork if the group/other permissions are different
    // or if the native is available or on Windows
    if (group != other || NativeIO.isAvailable() || Shell.WINDOWS) {
      execSetPermission(f, permission);
      return;
    }

    boolean rv = true;

    // read perms
    rv = f.setReadable(group.implies(FsAction.READ), false);
    checkReturnValue(rv, f, permission);
    if (group.implies(FsAction.READ) != user.implies(FsAction.READ)) {
      rv = f.setReadable(user.implies(FsAction.READ), true);
      checkReturnValue(rv, f, permission);
    }

    // write perms
    rv = f.setWritable(group.implies(FsAction.WRITE), false);
    checkReturnValue(rv, f, permission);
    if (group.implies(FsAction.WRITE) != user.implies(FsAction.WRITE)) {
      rv = f.setWritable(user.implies(FsAction.WRITE), true);
      checkReturnValue(rv, f, permission);
    }

    // exec perms
    rv = f.setExecutable(group.implies(FsAction.EXECUTE), false);
    checkReturnValue(rv, f, permission);
    if (group.implies(FsAction.EXECUTE) != user.implies(FsAction.EXECUTE)) {
      rv = f.setExecutable(user.implies(FsAction.EXECUTE), true);
      checkReturnValue(rv, f, permission);
    }
  }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/security/alias/LocalKeyStoreProvider, flush()V > Context: Everywhere, blocks=[BB[SSA:47..48]29 - org.apache.hadoop.security.alias.LocalKeyStoreProvider.flush()V, BB[SSA:44..46]28 - org.apache.hadoop.security.alias.LocalKeyStoreProvider.flush()V, BB[SSA:49..49]30 - org.apache.hadoop.security.alias.LocalKeyStoreProvider.flush()V, BB[SSA:-1..-2]31 - org.apache.hadoop.security.alias.LocalKeyStoreProvider.flush()V], numberOfBasicBlocks=4, firstLineNumber=156, lastLineNumber=160, firstMethodNumber=144, lastMethodNumber=160, isFirstLineValid=true, methodSrcCode=
  public void flush() throws IOException {
    super.flush();
    if (LOG.isDebugEnabled()) {
      LOG.debug("Resetting permissions to '" + permissions + "'");
    }
    if (!Shell.WINDOWS) {
      Files.setPosixFilePermissions(Paths.get(file.getCanonicalPath()),
          permissions);
    } else {
      // FsPermission expects a 10-character string because of the leading
      // directory indicator, i.e. "drwx------". The JDK toString method returns
      // a 9-character string, so prepend a leading character.
      FsPermission fsPermission = FsPermission.valueOf(
          "-" + PosixFilePermissions.toString(permissions));
      FileUtil.setPermission(file, fsPermission);
    }
  }

}
