====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	FileUtil.java	methodSinagture:	org.apache.hadoop.fs.FileUtil.checkDest(Ljava/lang/String;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/Path;	methodLines:	608:627
blockLines:	613:-1
paras:	null
TaintedStat:	NORMAL checkDest:conditional branch(eq, to iindex=58) 9,11 Node: < Application, Lorg/apache/hadoop/fs/FileUtil, checkDest(Ljava/lang/String;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/Path; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/fs/FileUtil, checkDest(Ljava/lang/String;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/Path; > Context: Everywhere[2]7 = invokevirtual < Application, Lorg/apache/hadoop/fs/FileSystem, getFileStatus(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus; > 2,3 @2 exception:6
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/fs/FileUtil, checkDest(Ljava/lang/String;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/Path; > Context: Everywhere[2]7 = invokevirtual < Application, Lorg/apache/hadoop/fs/FileSystem, getFileStatus(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus; > 2,3 @2 exception:6
PHI Node: < Application, Lorg/apache/hadoop/fs/FileUtil, checkDest(Ljava/lang/String;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/Path; > Context: Everywhere:11 = phi  7,9
NORMAL checkDest:conditional branch(eq, to iindex=58) 9,11 Node: < Application, Lorg/apache/hadoop/fs/FileUtil, checkDest(Ljava/lang/String;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/Path; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    try {
      sdst = dstFS.getFileStatus(dst);
    } catch (FileNotFoundException e) {
      sdst = null;
    }
    if (null != sdst) {
      if (sdst.isDirectory()) {
        if (null == srcName) {
          if (overwrite) {
            return dst;
          }
          throw new PathIsDirectoryException(dst.toString());
        }
        return checkDest(null, dstFS, new Path(dst, srcName), overwrite);
      } else if (!overwrite) {
        throw new PathExistsException(dst.toString(),
            "Target " + dst + " already exists");
      }
    }
    return dst;
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/FileUtil, copy(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/FileStatus;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;ZZLorg/apache/hadoop/conf/Configuration;)Z > Context: Everywhere, blocks=[BB[SSA:5..8]3 - org.apache.hadoop.fs.FileUtil.copy(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/FileStatus;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;ZZLorg/apache/hadoop/conf/Configuration;)Z, BB[SSA:2..4]2 - org.apache.hadoop.fs.FileUtil.copy(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/FileStatus;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;ZZLorg/apache/hadoop/conf/Configuration;)Z, BB[SSA:9..11]4 - org.apache.hadoop.fs.FileUtil.copy(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/FileStatus;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;ZZLorg/apache/hadoop/conf/Configuration;)Z, BB[SSA:-1..-2]44 - org.apache.hadoop.fs.FileUtil.copy(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/FileStatus;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;ZZLorg/apache/hadoop/conf/Configuration;)Z], numberOfBasicBlocks=4, firstLineNumber=465, lastLineNumber=467, firstMethodNumber=464, lastMethodNumber=499, isFirstLineValid=true, methodSrcCode=
                             Configuration conf) throws IOException {
    Path src = srcStatus.getPath();
    dst = checkDest(src.getName(), dstFS, dst, overwrite);
    if (srcStatus.isDirectory()) {
      checkDependencies(srcFS, src, dstFS, dst);
      if (!dstFS.mkdirs(dst)) {
        return false;
      }
      RemoteIterator<FileStatus> contents = srcFS.listStatusIterator(src);
      while (contents.hasNext()) {
        FileStatus next = contents.next();
        copy(srcFS, next, dstFS,
            new Path(dst, next.getPath().getName()),
            deleteSource, overwrite, conf);
      }
    } else {
      InputStream in = null;
      OutputStream out = null;
      try {
        in = awaitFuture(srcFS.openFile(src)
            .opt(FS_OPTION_OPENFILE_READ_POLICY,
                FS_OPTION_OPENFILE_READ_POLICY_WHOLE_FILE)
            .optLong(FS_OPTION_OPENFILE_LENGTH,
                srcStatus.getLen())   // file length hint for object stores
            .build());
        out = dstFS.create(dst, overwrite);
        IOUtils.copyBytes(in, out, conf, true);
      } catch (IOException e) {
        IOUtils.cleanupWithLogger(LOG, in, out);
        throw e;
      }
    }
    if (deleteSource) {
      return srcFS.delete(src, true);
    } else {
      return true;
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/FileUtil, checkDest(Ljava/lang/String;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/Path; > Context: Everywhere, blocks=[BB[SSA:36..37]16 - org.apache.hadoop.fs.FileUtil.checkDest(Ljava/lang/String;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/Path;, BB[SSA:32..35]15 - org.apache.hadoop.fs.FileUtil.checkDest(Ljava/lang/String;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/Path;, BB[SSA:38..38]17 - org.apache.hadoop.fs.FileUtil.checkDest(Ljava/lang/String;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/Path;, BB[SSA:-1..-2]30 - org.apache.hadoop.fs.FileUtil.checkDest(Ljava/lang/String;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Z)Lorg/apache/hadoop/fs/Path;], numberOfBasicBlocks=4, firstLineNumber=621, lastLineNumber=621, firstMethodNumber=608, lastMethodNumber=627, isFirstLineValid=true, methodSrcCode=
    try {
      sdst = dstFS.getFileStatus(dst);
    } catch (FileNotFoundException e) {
      sdst = null;
    }
    if (null != sdst) {
      if (sdst.isDirectory()) {
        if (null == srcName) {
          if (overwrite) {
            return dst;
          }
          throw new PathIsDirectoryException(dst.toString());
        }
        return checkDest(null, dstFS, new Path(dst, srcName), overwrite);
      } else if (!overwrite) {
        throw new PathExistsException(dst.toString(),
            "Target " + dst + " already exists");
      }
    }
    return dst;
  }
}
