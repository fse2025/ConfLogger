====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	Server.java	methodSinagture:	org.apache.hadoop.ipc.Server.setPurgeIntervalNanos(I)V	methodLines:	539:547
blockLines:	542:-1
paras:	ipc.server.purge.interval
TaintedStat:	NORMAL setPurgeIntervalNanos:conditional branch(le, to iindex=7) 2,5 Node: < Application, Lorg/apache/hadoop/ipc/Server, setPurgeIntervalNanos(I)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/ipc/Server, <init>(Ljava/lang/String;ILjava/lang/Class;IIILorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Lorg/apache/hadoop/security/token/SecretManager;Ljava/lang/String;)V > Context: Everywhere[209]90 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getInt(Ljava/lang/String;I)I > 8,87,88 @417 exception:89
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/ipc/Server, <init>(Ljava/lang/String;ILjava/lang/Class;IIILorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Lorg/apache/hadoop/security/token/SecretManager;Ljava/lang/String;)V > Context: Everywhere[209]90 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getInt(Ljava/lang/String;I)I > 8,87,88 @417 exception:89
PARAM_CALLER:Node: < Application, Lorg/apache/hadoop/ipc/Server, <init>(Ljava/lang/String;ILjava/lang/Class;IIILorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Lorg/apache/hadoop/security/token/SecretManager;Ljava/lang/String;)V > Context: Everywhere[210]invokespecial < Application, Lorg/apache/hadoop/ipc/Server, setPurgeIntervalNanos(I)V > 1,90 @420 exception:91 v90
PARAM_CALLEE:Node: < Application, Lorg/apache/hadoop/ipc/Server, setPurgeIntervalNanos(I)V > Context: Everywhere v2
NORMAL setPurgeIntervalNanos:conditional branch(le, to iindex=7) 2,5 Node: < Application, Lorg/apache/hadoop/ipc/Server, setPurgeIntervalNanos(I)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  private void setPurgeIntervalNanos(int purgeInterval) {
    int tmpPurgeInterval = CommonConfigurationKeysPublic.
        IPC_SERVER_PURGE_INTERVAL_MINUTES_DEFAULT;
    if (purgeInterval > 0) {
      tmpPurgeInterval = purgeInterval;
    }
    this.purgeIntervalNanos = TimeUnit.NANOSECONDS.convert(
            tmpPurgeInterval, TimeUnit.MINUTES);
  }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/ipc/Server, <init>(Ljava/lang/String;ILjava/lang/Class;IIILorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Lorg/apache/hadoop/security/token/SecretManager;Ljava/lang/String;)V > Context: Everywhere, blocks=[BB[SSA:210..210]83 - org.apache.hadoop.ipc.Server.<init>(Ljava/lang/String;ILjava/lang/Class;IIILorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Lorg/apache/hadoop/security/token/SecretManager;Ljava/lang/String;)V, BB[SSA:205..209]82 - org.apache.hadoop.ipc.Server.<init>(Ljava/lang/String;ILjava/lang/Class;IIILorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Lorg/apache/hadoop/security/token/SecretManager;Ljava/lang/String;)V, BB[SSA:211..212]84 - org.apache.hadoop.ipc.Server.<init>(Ljava/lang/String;ILjava/lang/Class;IIILorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Lorg/apache/hadoop/security/token/SecretManager;Ljava/lang/String;)V, BB[SSA:-1..-2]120 - org.apache.hadoop.ipc.Server.<init>(Ljava/lang/String;ILjava/lang/Class;IIILorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Lorg/apache/hadoop/security/token/SecretManager;Ljava/lang/String;)V], numberOfBasicBlocks=4, firstLineNumber=3225, lastLineNumber=3230, firstMethodNumber=3161, lastMethodNumber=3248, isFirstLineValid=true, methodSrcCode=
      String portRangeConfig)
    throws IOException {
    this.bindAddress = bindAddress;
    this.conf = conf;
    this.portRangeConfig = portRangeConfig;
    this.port = port;
    this.rpcRequestClass = rpcRequestClass; 
    this.handlerCount = handlerCount;
    this.socketSendBufferSize = 0;
    this.serverName = serverName;
    this.auxiliaryListenerMap = null;
    this.maxDataLength = conf.getInt(CommonConfigurationKeys.IPC_MAXIMUM_DATA_LENGTH,
        CommonConfigurationKeys.IPC_MAXIMUM_DATA_LENGTH_DEFAULT);
    if (queueSizePerHandler != -1) {
      this.maxQueueSize = handlerCount * queueSizePerHandler;
    } else {
      this.maxQueueSize = handlerCount * conf.getInt(
          CommonConfigurationKeys.IPC_SERVER_HANDLER_QUEUE_SIZE_KEY,
          CommonConfigurationKeys.IPC_SERVER_HANDLER_QUEUE_SIZE_DEFAULT);      
    }
    this.maxRespSize = conf.getInt(
        CommonConfigurationKeys.IPC_SERVER_RPC_MAX_RESPONSE_SIZE_KEY,
        CommonConfigurationKeys.IPC_SERVER_RPC_MAX_RESPONSE_SIZE_DEFAULT);
    if (numReaders != -1) {
      this.readThreads = numReaders;
    } else {
      this.readThreads = conf.getInt(
          CommonConfigurationKeys.IPC_SERVER_RPC_READ_THREADS_KEY,
          CommonConfigurationKeys.IPC_SERVER_RPC_READ_THREADS_DEFAULT);
    }
    this.readerPendingConnectionQueue = conf.getInt(
        CommonConfigurationKeys.IPC_SERVER_RPC_READ_CONNECTION_QUEUE_SIZE_KEY,
        CommonConfigurationKeys.IPC_SERVER_RPC_READ_CONNECTION_QUEUE_SIZE_DEFAULT);

    // Setup appropriate callqueue
    final String prefix = getQueueClassPrefix();
    this.callQueue = new CallQueueManager<Call>(getQueueClass(prefix, conf),
        getSchedulerClass(prefix, conf),
        getClientBackoffEnable(prefix, conf), maxQueueSize, prefix, conf);

    this.secretManager = (SecretManager<TokenIdentifier>) secretManager;
    this.authorize = 
      conf.getBoolean(CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, 
                      false);

    // configure supported authentications
    this.enabledAuthMethods = getAuthMethods(secretManager, conf);
    this.negotiateResponse = buildNegotiateResponse(enabledAuthMethods);
    
    // Start the listener here and let it bind to the port
    listener = new Listener(port);
    // set the server port to the default listener port.
    this.port = listener.getAddress().getPort();
    connectionManager = new ConnectionManager();
    this.rpcMetrics = RpcMetrics.create(this, conf);
    this.rpcDetailedMetrics = RpcDetailedMetrics.create(this.port);
    this.tcpNoDelay = conf.getBoolean(
        CommonConfigurationKeysPublic.IPC_SERVER_TCPNODELAY_KEY,
        CommonConfigurationKeysPublic.IPC_SERVER_TCPNODELAY_DEFAULT);

    this.setLogSlowRPC(conf.getBoolean(
        CommonConfigurationKeysPublic.IPC_SERVER_LOG_SLOW_RPC,
        CommonConfigurationKeysPublic.IPC_SERVER_LOG_SLOW_RPC_DEFAULT));

    this.setPurgeIntervalNanos(conf.getInt(
        CommonConfigurationKeysPublic.IPC_SERVER_PURGE_INTERVAL_MINUTES_KEY,
        CommonConfigurationKeysPublic.IPC_SERVER_PURGE_INTERVAL_MINUTES_DEFAULT));

    // Create the responder here
    responder = new Responder();
    
    if (secretManager != null || UserGroupInformation.isSecurityEnabled()) {
      SaslRpcServer.init(conf);
      saslPropsResolver = SaslPropertiesResolver.getInstance(conf);
    }
    
    this.exceptionsHandler.addTerseLoggingExceptions(StandbyException.class);
    this.exceptionsHandler.addTerseLoggingExceptions(
        HealthCheckFailedException.class);
    this.metricsUpdaterInterval =
        conf.getLong(CommonConfigurationKeysPublic.IPC_SERVER_METRICS_UPDATE_RUNNER_INTERVAL,
            CommonConfigurationKeysPublic.IPC_SERVER_METRICS_UPDATE_RUNNER_INTERVAL_DEFAULT);
    this.scheduledExecutorService = new ScheduledThreadPoolExecutor(1,
        new ThreadFactoryBuilder().setDaemon(true).setNameFormat("Hadoop-Metrics-Updater-%d")
            .build());
    this.scheduledExecutorService.scheduleWithFixedDelay(new MetricsUpdateRunner(),
        metricsUpdaterInterval, metricsUpdaterInterval, TimeUnit.MILLISECONDS);
  }

}
