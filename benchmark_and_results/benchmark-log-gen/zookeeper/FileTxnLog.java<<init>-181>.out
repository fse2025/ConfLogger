====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	FileTxnLog.java	methodSinagture:	org.apache.zookeeper.server.persistence.FileTxnLog.<init>(Ljava/io/File;)V	methodLines:	181:184
blockLines:	155:-1
paras:	zookeeper.forceSync
TaintedStat:	NORMAL <init>:conditional branch(ne, to iindex=18) 12,13 Node: < Application, Lorg/apache/zookeeper/server/persistence/FileTxnLog, <init>(Ljava/io/File;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/persistence/FileTxnLog, <init>(Ljava/io/File;)V > Context: Everywhere[11]9 = invokestatic < Application, Ljava/lang/System, getProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 6,7 @19 exception:8
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/persistence/FileTxnLog, <init>(Ljava/io/File;)V > Context: Everywhere[11]9 = invokestatic < Application, Ljava/lang/System, getProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 6,7 @19 exception:8
NORMAL <init>:12 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 9,10 @24 exception:11 Node: < Application, Lorg/apache/zookeeper/server/persistence/FileTxnLog, <init>(Ljava/io/File;)V > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/String, equals(Ljava/lang/Object;)Z > Context: Everywhere
NORMAL equals:conditional branch(ne, to iindex=5) 1,2 Node: < Primordial, Ljava/lang/String, equals(Ljava/lang/Object;)Z > Context: Everywhere
NORMAL equals:return 22 Node: < Primordial, Ljava/lang/String, equals(Ljava/lang/Object;)Z > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/lang/String, equals(Ljava/lang/Object;)Z > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/persistence/FileTxnLog, <init>(Ljava/io/File;)V > Context: Everywhere[13]12 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 9,10 @24 exception:11
NORMAL <init>:conditional branch(ne, to iindex=18) 12,13 Node: < Application, Lorg/apache/zookeeper/server/persistence/FileTxnLog, <init>(Ljava/io/File;)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
     */
    public FileTxnLog(File logDir) {
        this.logDir = logDir;
    }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/persistence/FileTxnLog, getLastLoggedZxid()J > Context: Everywhere, blocks=[BB[SSA:28..28]14 - org.apache.zookeeper.server.persistence.FileTxnLog.getLastLoggedZxid()J, BB[SSA:25..27]13 - org.apache.zookeeper.server.persistence.FileTxnLog.getLastLoggedZxid()J, BB[SSA:29..32]15 - org.apache.zookeeper.server.persistence.FileTxnLog.getLastLoggedZxid()J, BB[SSA:-1..-2]40 - org.apache.zookeeper.server.persistence.FileTxnLog.getLastLoggedZxid()J], numberOfBasicBlocks=4, firstLineNumber=369, lastLineNumber=369, firstMethodNumber=362, lastMethodNumber=380, isFirstLineValid=true, methodSrcCode=
    public long getLastLoggedZxid() {
        File[] files = getLogFiles(logDir.listFiles(), 0);
        long maxLog = files.length > 0 ? Util.getZxidFromName(files[files.length - 1].getName(), LOG_FILE_PREFIX) : -1;

        // if a log file is more recent we must scan it to find
        // the highest zxid
        long zxid = maxLog;
        try (FileTxnLog txn = new FileTxnLog(logDir); TxnIterator itr = txn.read(maxLog)) {
            while (true) {
                if (!itr.next()) {
                    break;
                }
                TxnHeader hdr = itr.getHeader();
                zxid = hdr.getZxid();
            }
        } catch (IOException e) {
            LOG.warn("Unexpected exception", e);
        }
        return zxid;
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/persistence/FileTxnSnapLog, <init>(Ljava/io/File;Ljava/io/File;)V > Context: Everywhere, blocks=[BB[SSA:187..187]104 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.<init>(Ljava/io/File;Ljava/io/File;)V, BB[SSA:184..186]103 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.<init>(Ljava/io/File;Ljava/io/File;)V, BB[SSA:188..188]105 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.<init>(Ljava/io/File;Ljava/io/File;)V, BB[SSA:-1..-2]114 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.<init>(Ljava/io/File;Ljava/io/File;)V], numberOfBasicBlocks=4, firstLineNumber=169, lastLineNumber=174, firstMethodNumber=111, lastMethodNumber=174, isFirstLineValid=true, methodSrcCode=
     */
    public FileTxnSnapLog(File dataDir, File snapDir) throws IOException {
        LOG.debug("Opening datadir:{} snapDir:{}", dataDir, snapDir);

        this.dataDir = new File(dataDir, version + VERSION);
        this.snapDir = new File(snapDir, version + VERSION);

        // by default create snap/log dirs, but otherwise complain instead
        // See ZOOKEEPER-1161 for more details
        boolean enableAutocreate = Boolean.parseBoolean(
            System.getProperty(ZOOKEEPER_DATADIR_AUTOCREATE, ZOOKEEPER_DATADIR_AUTOCREATE_DEFAULT));

        trustEmptySnapshot = Boolean.getBoolean(ZOOKEEPER_SNAPSHOT_TRUST_EMPTY);
        LOG.info("{} : {}", ZOOKEEPER_SNAPSHOT_TRUST_EMPTY, trustEmptySnapshot);

        if (!this.dataDir.exists()) {
            if (!enableAutocreate) {
                throw new DatadirException(String.format(
                    "Missing data directory %s, automatic data directory creation is disabled (%s is false)."
                    + " Please create this directory manually.",
                    this.dataDir,
                    ZOOKEEPER_DATADIR_AUTOCREATE));
            }

            if (!this.dataDir.mkdirs() && !this.dataDir.exists()) {
                throw new DatadirException("Unable to create data directory " + this.dataDir);
            }
        }
        if (!this.dataDir.canWrite()) {
            throw new DatadirException("Cannot write to data directory " + this.dataDir);
        }

        if (!this.snapDir.exists()) {
            // by default create this directory, but otherwise complain instead
            // See ZOOKEEPER-1161 for more details
            if (!enableAutocreate) {
                throw new DatadirException(String.format(
                    "Missing snap directory %s, automatic data directory creation is disabled (%s is false)."
                    + "Please create this directory manually.",
                    this.snapDir,
                    ZOOKEEPER_DATADIR_AUTOCREATE));
            }

            if (!this.snapDir.mkdirs() && !this.snapDir.exists()) {
                throw new DatadirException("Unable to create snap directory " + this.snapDir);
            }
        }
        if (!this.snapDir.canWrite()) {
            throw new DatadirException("Cannot write to snap directory " + this.snapDir);
        }

        // check content of transaction log and snapshot dirs if they are two different directories
        // See ZOOKEEPER-2967 for more details
        if (!this.dataDir.getPath().equals(this.snapDir.getPath())) {
            checkLogDir();
            checkSnapDir();
        }

        txnLog = new FileTxnLog(this.dataDir);
        snapLog = new FileSnap(this.snapDir);

        autoCreateDB = Boolean.parseBoolean(
            System.getProperty(ZOOKEEPER_DB_AUTOCREATE, ZOOKEEPER_DB_AUTOCREATE_DEFAULT));
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/persistence/FileTxnSnapLog, restore(Lorg/apache/zookeeper/server/DataTree;Ljava/util/Map;Lorg/apache/zookeeper/server/persistence/FileTxnSnapLog$PlayBackListener;)J > Context: Everywhere, blocks=[BB[SSA:18..18]10 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.restore(Lorg/apache/zookeeper/server/DataTree;Ljava/util/Map;Lorg/apache/zookeeper/server/persistence/FileTxnSnapLog$PlayBackListener;)J, BB[SSA:15..17]9 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.restore(Lorg/apache/zookeeper/server/DataTree;Ljava/util/Map;Lorg/apache/zookeeper/server/persistence/FileTxnSnapLog$PlayBackListener;)J, BB[SSA:19..20]11 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.restore(Lorg/apache/zookeeper/server/DataTree;Ljava/util/Map;Lorg/apache/zookeeper/server/persistence/FileTxnSnapLog$PlayBackListener;)J, BB[SSA:-1..-2]43 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.restore(Lorg/apache/zookeeper/server/DataTree;Ljava/util/Map;Lorg/apache/zookeeper/server/persistence/FileTxnSnapLog$PlayBackListener;)J], numberOfBasicBlocks=4, firstLineNumber=256, lastLineNumber=258, firstMethodNumber=252, lastMethodNumber=312, isFirstLineValid=true, methodSrcCode=
    public long restore(DataTree dt, Map<Long, Integer> sessions, PlayBackListener listener) throws IOException {
        long snapLoadingStartTime = Time.currentElapsedTime();
        long deserializeResult = snapLog.deserialize(dt, sessions);
        ServerMetrics.getMetrics().STARTUP_SNAP_LOAD_TIME.add(Time.currentElapsedTime() - snapLoadingStartTime);
        FileTxnLog txnLog = new FileTxnLog(dataDir);
        boolean trustEmptyDB;
        File initFile = new File(dataDir.getParent(), "initialize");
        if (Files.deleteIfExists(initFile.toPath())) {
            LOG.info("Initialize file found, an empty database will not block voting participation");
            trustEmptyDB = true;
        } else {
            trustEmptyDB = autoCreateDB;
        }

        RestoreFinalizer finalizer = () -> {
            long highestZxid = fastForwardFromEdits(dt, sessions, listener);
            // The snapshotZxidDigest will reset after replaying the txn of the
            // zxid in the snapshotZxidDigest, if it's not reset to null after
            // restoring, it means either there are not enough txns to cover that
            // zxid or that txn is missing
            DataTree.ZxidDigest snapshotZxidDigest = dt.getDigestFromLoadedSnapshot();
            if (snapshotZxidDigest != null) {
                LOG.warn(
                        "Highest txn zxid 0x{} is not covering the snapshot digest zxid 0x{}, "
                                + "which might lead to inconsistent state",
                        Long.toHexString(highestZxid),
                        Long.toHexString(snapshotZxidDigest.getZxid()));
            }
            return highestZxid;
        };

        if (-1L == deserializeResult) {
            /* this means that we couldn't find any snapshot, so we need to
             * initialize an empty database (reported in ZOOKEEPER-2325) */
            if (txnLog.getLastLoggedZxid() != -1) {
                // ZOOKEEPER-3056: provides an escape hatch for users upgrading
                // from old versions of zookeeper (3.4.x, pre 3.5.3).
                if (!trustEmptySnapshot) {
                    throw new IOException(EMPTY_SNAPSHOT_WARNING + "Something is broken!");
                } else {
                    LOG.warn("{}This should only be allowed during upgrading.", EMPTY_SNAPSHOT_WARNING);
                    return finalizer.run();
                }
            }

            if (trustEmptyDB) {
                /* TODO: (br33d) we should either put a ConcurrentHashMap on restore()
                 *       or use Map on save() */
                save(dt, (ConcurrentHashMap<Long, Integer>) sessions, false);

                /* return a zxid of 0, since we know the database is empty */
                return 0L;
            } else {
                /* return a zxid of -1, since we are possibly missing data */
                LOG.warn("Unexpected empty data tree, setting zxid to -1");
                dt.lastProcessedZxid = -1L;
                return -1L;
            }
        }

        return finalizer.run();
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/persistence/FileTxnSnapLog, getLastLoggedZxid()J > Context: Everywhere, blocks=[BB[SSA:4..4]3 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.getLastLoggedZxid()J, BB[SSA:1..3]2 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.getLastLoggedZxid()J, BB[SSA:5..7]4 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.getLastLoggedZxid()J, BB[SSA:-1..-2]6 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.getLastLoggedZxid()J], numberOfBasicBlocks=4, firstLineNumber=461, lastLineNumber=462, firstMethodNumber=460, lastMethodNumber=462, isFirstLineValid=true, methodSrcCode=
    public long getLastLoggedZxid() {
        FileTxnLog txnLog = new FileTxnLog(dataDir);
        return txnLog.getLastLoggedZxid();
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/persistence/FileTxnSnapLog, truncateLog(J)Z > Context: Everywhere, blocks=[BB[SSA:6..6]4 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.truncateLog(J)Z, BB[SSA:3..5]3 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.truncateLog(J)Z, BB[SSA:7..10]5 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.truncateLog(J)Z, BB[SSA:-1..-2]22 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.truncateLog(J)Z, BB[SSA:17..17]8 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.truncateLog(J)Z, BB[SSA:14..16]7 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.truncateLog(J)Z, BB[SSA:18..18]9 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.truncateLog(J)Z], numberOfBasicBlocks=7, firstLineNumber=526, lastLineNumber=526, firstMethodNumber=515, lastMethodNumber=533, isFirstLineValid=true, methodSrcCode=
            // close the existing txnLog and snapLog
            close();

            // truncate it
            try (FileTxnLog truncLog = new FileTxnLog(dataDir)) {
                boolean truncated = truncLog.truncate(zxid);

                // re-open the txnLog and snapLog
                // I'd rather just close/reopen this object itself, however that
                // would have a big impact outside ZKDatabase as there are other
                // objects holding a reference to this object.
                txnLog = new FileTxnLog(dataDir);
                snapLog = new FileSnap(snapDir);

                return truncated;
            }
        } catch (IOException e) {
            LOG.error("Unable to truncate Txn log", e);
            return false;
        }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/persistence/FileTxnSnapLog, readTxnLog(JZ)Lorg/apache/zookeeper/server/persistence/TxnLog$TxnIterator; > Context: Everywhere, blocks=[BB[SSA:4..4]3 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.readTxnLog(JZ)Lorg/apache/zookeeper/server/persistence/TxnLog$TxnIterator;, BB[SSA:1..3]2 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.readTxnLog(JZ)Lorg/apache/zookeeper/server/persistence/TxnLog$TxnIterator;, BB[SSA:5..9]4 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.readTxnLog(JZ)Lorg/apache/zookeeper/server/persistence/TxnLog$TxnIterator;, BB[SSA:-1..-2]6 - org.apache.zookeeper.server.persistence.FileTxnSnapLog.readTxnLog(JZ)Lorg/apache/zookeeper/server/persistence/TxnLog$TxnIterator;], numberOfBasicBlocks=4, firstLineNumber=401, lastLineNumber=402, firstMethodNumber=400, lastMethodNumber=402, isFirstLineValid=true, methodSrcCode=
    public TxnIterator readTxnLog(long zxid, boolean fastForward) throws IOException {
        FileTxnLog txnLog = new FileTxnLog(dataDir);
        return txnLog.read(zxid, fastForward);
    }
}
