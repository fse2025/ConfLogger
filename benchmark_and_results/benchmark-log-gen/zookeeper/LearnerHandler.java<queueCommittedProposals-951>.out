====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	LearnerHandler.java	methodSinagture:	org.apache.zookeeper.server.quorum.LearnerHandler.queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J	methodLines:	951:1041
blockLines:	967:-1
paras:	null
TaintedStat:	NORMAL queueCommittedProposals:conditional branch(ge, to iindex=44) 26,11 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[36]26 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZKDatabase, getDataTreeLastProcessedZxid()J > 13 @71 exception:25
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[36]26 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZKDatabase, getDataTreeLastProcessedZxid()J > 13 @71 exception:25
PHI Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere:51 = phi  22,26
NORMAL syncFollower:138 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 51 @330 exception:137 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL valueOf:conditional branch(lt, to iindex=19) 5,6 Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL valueOf:return 9 Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[198]92 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 52 @407 exception:91
PARAM_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[201]96 = invokevirtual < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > 1,81,2,92,94 @415 exception:95 v92
PARAM_CALLEE:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere v4
NORMAL queueCommittedProposals:conditional branch(eq, to iindex=36) 4,22 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere
NORMAL queueCommittedProposals:conditional branch(ge, to iindex=44) 26,11 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	LearnerHandler.java	methodSinagture:	org.apache.zookeeper.server.quorum.LearnerHandler.queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J	methodLines:	951:1041
blockLines:	962:-1
paras:	null
TaintedStat:	NORMAL queueCommittedProposals:conditional branch(eq, to iindex=36) 4,22 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[33]24 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZKDatabase, getminCommittedLog()J > 13 @64 exception:23
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[33]24 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZKDatabase, getminCommittedLog()J > 13 @64 exception:23
PHI Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere:52 = phi  24,26
NORMAL syncFollower:92 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 52 @407 exception:91 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL valueOf:conditional branch(lt, to iindex=19) 5,6 Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL valueOf:return 9 Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[198]92 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 52 @407 exception:91
PARAM_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[201]96 = invokevirtual < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > 1,81,2,92,94 @415 exception:95 v92
PARAM_CALLEE:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere v4
NORMAL queueCommittedProposals:conditional branch(eq, to iindex=36) 4,22 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	LearnerHandler.java	methodSinagture:	org.apache.zookeeper.server.quorum.LearnerHandler.queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J	methodLines:	951:1041
blockLines:	1029:-1
paras:	null
TaintedStat:	NORMAL queueCommittedProposals:conditional branch(eq, to iindex=175) 98,11 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[293]169 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZKDatabase, getDataTreeLastProcessedZxid()J > 13 @609 exception:168
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[293]169 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZKDatabase, getDataTreeLastProcessedZxid()J > 13 @609 exception:168
PHI Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere:170 = phi  166,169
PARAM_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[307]181 = invokevirtual < Application, Lorg/apache/zookeeper/server/quorum/LearnerMaster, startForwarding(Lorg/apache/zookeeper/server/quorum/LearnerHandler;J)J > 3,1,170 @642 exception:180 v170
PARAM_CALLEE:Node: < Application, Lorg/apache/zookeeper/server/quorum/ObserverMaster, startForwarding(Lorg/apache/zookeeper/server/quorum/LearnerHandler;J)J > Context: Everywhere v3
NORMAL startForwarding:64 = binaryop(sub) 63 , 3 Node: < Application, Lorg/apache/zookeeper/server/quorum/ObserverMaster, startForwarding(Lorg/apache/zookeeper/server/quorum/LearnerHandler;J)J > Context: Everywhere
NORMAL startForwarding:66 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 64 @243 exception:65 Node: < Application, Lorg/apache/zookeeper/server/quorum/ObserverMaster, startForwarding(Lorg/apache/zookeeper/server/quorum/LearnerHandler;J)J > Context: Everywhere
METHOD_ENTRY:Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL valueOf:conditional branch(lt, to iindex=19) 5,6 Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL valueOf:return 9 Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[198]92 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 52 @407 exception:91
PARAM_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere[201]96 = invokevirtual < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > 1,81,2,92,94 @415 exception:95 v92
PARAM_CALLEE:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere v4
NORMAL queueCommittedProposals:conditional branch(eq, to iindex=36) 4,22 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere
NORMAL queueCommittedProposals:conditional branch(le, to iindex=36) 25,11 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere
NORMAL queueCommittedProposals:conditional branch(eq, to iindex=175) 98,11 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	LearnerHandler.java	methodSinagture:	org.apache.zookeeper.server.quorum.LearnerHandler.queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J	methodLines:	951:1041
blockLines:	977:-1
paras:	null
TaintedStat:	NORMAL queueCommittedProposals:conditional branch(ne, to iindex=71) 29,11 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere[24]21 = invokevirtual < Application, Lorg/apache/zookeeper/server/quorum/Leader$Proposal, getZxid()J > 19 @47 exception:20
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere[24]21 = invokevirtual < Application, Lorg/apache/zookeeper/server/quorum/Leader$Proposal, getZxid()J > 19 @47 exception:20
NORMAL queueCommittedProposals:29 = compare 21,3 opcode=cmp Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere
NORMAL queueCommittedProposals:conditional branch(ne, to iindex=71) 29,11 Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, queueCommittedProposals(Ljava/util/Iterator;JLjava/lang/Long;Ljava/lang/Long;)J > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    protected long queueCommittedProposals(Iterator<Proposal> itr, long peerLastZxid, Long maxZxid, Long lastCommittedZxid) {
        boolean isPeerNewEpochZxid = (peerLastZxid & 0xffffffffL) == 0;
        long queuedZxid = peerLastZxid;
        // as we look through proposals, this variable keeps track of previous
        // proposal Id.
        long prevProposalZxid = -1;
        while (itr.hasNext()) {
            Proposal propose = itr.next();

            long packetZxid = propose.getZxid();
            // abort if we hit the limit
            if ((maxZxid != null) && (packetZxid > maxZxid)) {
                break;
            }

            // skip the proposals the peer already has
            if (packetZxid < peerLastZxid) {
                prevProposalZxid = packetZxid;
                continue;
            }

            // If we are sending the first packet, figure out whether to trunc
            // or diff
            if (needOpPacket) {

                // Send diff when we see the follower's zxid in our history
                if (packetZxid == peerLastZxid) {
                    LOG.info(
                        "Sending DIFF zxid=0x{}  for peer sid: {}",
                        Long.toHexString(lastCommittedZxid),
                        getSid());
                    queueOpPacket(Leader.DIFF, lastCommittedZxid);
                    needOpPacket = false;
                    continue;
                }

                if (isPeerNewEpochZxid) {
                    // Send diff and fall through if zxid is of a new-epoch
                    LOG.info(
                        "Sending DIFF zxid=0x{}  for peer sid: {}",
                        Long.toHexString(lastCommittedZxid),
                        getSid());
                    queueOpPacket(Leader.DIFF, lastCommittedZxid);
                    needOpPacket = false;
                } else if (packetZxid > peerLastZxid) {
                    // Peer have some proposals that the learnerMaster hasn't seen yet
                    // it may used to be a leader
                    if (ZxidUtils.getEpochFromZxid(packetZxid) != ZxidUtils.getEpochFromZxid(peerLastZxid)) {
                        // We cannot send TRUNC that cross epoch boundary.
                        // The learner will crash if it is asked to do so.
                        // We will send snapshot this those cases.
                        LOG.warn("Cannot send TRUNC to peer sid: " + getSid() + " peer zxid is from different epoch");
                        return queuedZxid;
                    }

                    LOG.info(
                        "Sending TRUNC zxid=0x{}  for peer sid: {}",
                        Long.toHexString(prevProposalZxid),
                        getSid());
                    queueOpPacket(Leader.TRUNC, prevProposalZxid);
                    needOpPacket = false;
                }
            }

            if (packetZxid <= queuedZxid) {
                // We can get here, if we don't have op packet to queue
                // or there is a duplicate txn in a given iterator
                continue;
            }

            // Since this is already a committed proposal, we need to follow
            // it by a commit packet
            queuePacket(propose.getQuorumPacket());
            queueOpPacket(Leader.COMMIT, packetZxid);
            queuedZxid = packetZxid;

        }

        if (needOpPacket && isPeerNewEpochZxid) {
            // We will send DIFF for this kind of zxid in any case. This if-block
            // is the catch when our history older than learner and there is
            // no new txn since then. So we need an empty diff
            LOG.info(
                "Sending DIFF zxid=0x{}  for peer sid: {}",
                Long.toHexString(lastCommittedZxid),
                getSid());
            queueOpPacket(Leader.DIFF, lastCommittedZxid);
            needOpPacket = false;
        }

        return queuedZxid;
    }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerHandler, syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z > Context: Everywhere, blocks=[BB[SSA:163..163]58 - org.apache.zookeeper.server.quorum.LearnerHandler.syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z, BB[SSA:156..162]57 - org.apache.zookeeper.server.quorum.LearnerHandler.syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z, BB[SSA:164..167]59 - org.apache.zookeeper.server.quorum.LearnerHandler.syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z, BB[SSA:201..201]71 - org.apache.zookeeper.server.quorum.LearnerHandler.syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z, BB[SSA:199..200]70 - org.apache.zookeeper.server.quorum.LearnerHandler.syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z, BB[SSA:202..207]72 - org.apache.zookeeper.server.quorum.LearnerHandler.syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z, BB[SSA:239..239]85 - org.apache.zookeeper.server.quorum.LearnerHandler.syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z, BB[SSA:232..238]84 - org.apache.zookeeper.server.quorum.LearnerHandler.syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z, BB[SSA:240..242]86 - org.apache.zookeeper.server.quorum.LearnerHandler.syncFollower(JLorg/apache/zookeeper/server/quorum/LearnerMaster;)Z], numberOfBasicBlocks=9, firstLineNumber=898, lastLineNumber=900, firstMethodNumber=791, lastMethodNumber=937, isFirstLineValid=true, methodSrcCode=
         */
        boolean isPeerNewEpochZxid = (peerLastZxid & 0xffffffffL) == 0;
        // Keep track of the latest zxid which already queued
        long currentZxid = peerLastZxid;
        boolean needSnap = true;
        ZKDatabase db = learnerMaster.getZKDatabase();
        boolean txnLogSyncEnabled = db.isTxnLogSyncEnabled();
        ReentrantReadWriteLock lock = db.getLogLock();
        ReadLock rl = lock.readLock();
        try {
            rl.lock();
            long maxCommittedLog = db.getmaxCommittedLog();
            long minCommittedLog = db.getminCommittedLog();
            long lastProcessedZxid = db.getDataTreeLastProcessedZxid();

            LOG.info("Synchronizing with Learner sid: {} maxCommittedLog=0x{}"
                     + " minCommittedLog=0x{} lastProcessedZxid=0x{}"
                     + " peerLastZxid=0x{}",
                     getSid(),
                     Long.toHexString(maxCommittedLog),
                     Long.toHexString(minCommittedLog),
                     Long.toHexString(lastProcessedZxid),
                     Long.toHexString(peerLastZxid));

            if (db.getCommittedLog().isEmpty()) {
                /*
                 * It is possible that committedLog is empty. In that case
                 * setting these value to the latest txn in learnerMaster db
                 * will reduce the case that we need to handle
                 *
                 * Here is how each case handle by the if block below
                 * 1. lastProcessZxid == peerZxid -> Handle by (2)
                 * 2. lastProcessZxid < peerZxid -> Handle by (3)
                 * 3. lastProcessZxid > peerZxid -> Handle by (5)
                 */
                minCommittedLog = lastProcessedZxid;
                maxCommittedLog = lastProcessedZxid;
            }

            /*
             * Here are the cases that we want to handle
             *
             * 1. Force sending snapshot (for testing purpose)
             * 2. Peer and learnerMaster is already sync, send empty diff
             * 3. Follower has txn that we haven't seen. This may be old leader
             *    so we need to send TRUNC. However, if peer has newEpochZxid,
             *    we cannot send TRUNC since the follower has no txnlog
             * 4. Follower is within committedLog range or already in-sync.
             *    We may need to send DIFF or TRUNC depending on follower's zxid
             *    We always send empty DIFF if follower is already in-sync
             * 5. Follower missed the committedLog. We will try to use on-disk
             *    txnlog + committedLog to sync with follower. If that fail,
             *    we will send snapshot
             */

            if (forceSnapSync) {
                // Force learnerMaster to use snapshot to sync with follower
                LOG.warn("Forcing snapshot sync - should not see this in production");
            } else if (lastProcessedZxid == peerLastZxid) {
                // Follower is already sync with us, send empty diff
                LOG.info(
                    "Sending DIFF zxid=0x{} for peer sid: {}",
                    Long.toHexString(peerLastZxid),
                    getSid());
                queueOpPacket(Leader.DIFF, peerLastZxid);
                needOpPacket = false;
                needSnap = false;
            } else if (peerLastZxid > maxCommittedLog && !isPeerNewEpochZxid) {
                // Newer than committedLog, send trunc and done
                LOG.debug(
                    "Sending TRUNC to follower zxidToSend=0x{} for peer sid:{}",
                    Long.toHexString(maxCommittedLog),
                    getSid());
                queueOpPacket(Leader.TRUNC, maxCommittedLog);
                currentZxid = maxCommittedLog;
                needOpPacket = false;
                needSnap = false;
            } else if ((maxCommittedLog >= peerLastZxid) && (minCommittedLog <= peerLastZxid)) {
                // Follower is within commitLog range
                LOG.info("Using committedLog for peer sid: {}", getSid());
                Iterator<Proposal> itr = db.getCommittedLog().iterator();
                currentZxid = queueCommittedProposals(itr, peerLastZxid, null, maxCommittedLog);
                needSnap = false;
            } else if (peerLastZxid < minCommittedLog && txnLogSyncEnabled) {
                // Use txnlog and committedLog to sync

                // Calculate sizeLimit that we allow to retrieve txnlog from disk
                long sizeLimit = db.calculateTxnLogSizeLimit();
                // This method can return empty iterator if the requested zxid
                // is older than on-disk txnlog
                Iterator<Proposal> txnLogItr = db.getProposalsFromTxnLog(peerLastZxid, sizeLimit);
                if (txnLogItr.hasNext()) {
                    LOG.info("Use txnlog and committedLog for peer sid: {}", getSid());
                    currentZxid = queueCommittedProposals(txnLogItr, peerLastZxid, minCommittedLog, maxCommittedLog);

                    if (currentZxid < minCommittedLog) {
                        LOG.info(
                            "Detected gap between end of txnlog: 0x{} and start of committedLog: 0x{}",
                            Long.toHexString(currentZxid),
                            Long.toHexString(minCommittedLog));
                        currentZxid = peerLastZxid;
                        // Clear out currently queued requests and revert
                        // to sending a snapshot.
                        queuedPackets.clear();
                        needOpPacket = true;
                    } else {
                        LOG.debug("Queueing committedLog 0x{}", Long.toHexString(currentZxid));
                        Iterator<Proposal> committedLogItr = db.getCommittedLog().iterator();
                        currentZxid = queueCommittedProposals(committedLogItr, currentZxid, null, maxCommittedLog);
                        needSnap = false;
                    }
                }
                // closing the resources
                if (txnLogItr instanceof TxnLogProposalIterator) {
                    TxnLogProposalIterator txnProposalItr = (TxnLogProposalIterator) txnLogItr;
                    txnProposalItr.close();
                }
            } else {
                LOG.warn(
                    "Unhandled scenario for peer sid: {} maxCommittedLog=0x{}"
                        + " minCommittedLog=0x{} lastProcessedZxid=0x{}"
                        + " peerLastZxid=0x{} txnLogSyncEnabled={}",
                    getSid(),
                    Long.toHexString(maxCommittedLog),
                    Long.toHexString(minCommittedLog),
                    Long.toHexString(lastProcessedZxid),
                    Long.toHexString(peerLastZxid),
                    txnLogSyncEnabled);
            }
            if (needSnap) {
                currentZxid = db.getDataTreeLastProcessedZxid();
            }

            LOG.debug("Start forwarding 0x{} for peer sid: {}", Long.toHexString(currentZxid), getSid());
            leaderLastZxid = learnerMaster.startForwarding(this, currentZxid);
        } finally {
            rl.unlock();
        }

        if (needOpPacket && !needSnap) {
            // This should never happen, but we should fall back to sending
            // snapshot just in case.
            LOG.error("Unhandled scenario for peer sid: {} fall back to use snapshot",  getSid());
            needSnap = true;
        }

        return needSnap;
    }
}
