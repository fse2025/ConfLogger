<code-whole>
public ZooKeeperSaslClient(final String serverPrincipal, ZKClientConfig clientConfig, AtomicReference<Login> loginRef) throws LoginException {
/**
* ZOOKEEPER-1373: allow system property to specify the JAAS
* configuration section that the zookeeper client should use.
* Default to "Client".
*/
String clientSection = clientConfig.getProperty(ZKClientConfig.LOGIN_CONTEXT_NAME_KEY, ZKClientConfig.LOGIN_CONTEXT_NAME_KEY_DEFAULT);
this.clientConfig = clientConfig;
// Note that 'Configuration' here refers to javax.security.auth.login.Configuration.
AppConfigurationEntry[] entries = null;
RuntimeException runtimeException = null;
try {
entries = Configuration.getConfiguration().getAppConfigurationEntry(clientSection);
} catch (SecurityException e) {
// handle below: might be harmless if the user doesn't intend to use JAAS authentication.
runtimeException = e;
} catch (IllegalArgumentException e) {
// third party customized getAppConfigurationEntry could throw IllegalArgumentException when JAAS
// configuration isn't set. We can reevaluate whether to catch RuntimeException instead when more
// different types of RuntimeException found
runtimeException = e;
}
if (entries != null) {
this.configStatus = "Will attempt to SASL-authenticate using Login Context section '" + clientSection + "'";
this.saslClient = createSaslClient(serverPrincipal, clientSection, loginRef);
this.login = loginRef.get();
} else {
// Handle situation of clientSection's being null: it might simply because the client does not intend to
// use SASL, so not necessarily an error.
saslState = SaslState.FAILED;
String explicitClientSection = clientConfig.getProperty(ZKClientConfig.LOGIN_CONTEXT_NAME_KEY);
if (explicitClientSection != null) {
// If the user explicitly overrides the default Login Context, they probably expected SASL to
// succeed. But if we got here, SASL failed.
if (runtimeException != null) {
throw new LoginException("Zookeeper client cannot authenticate using the "
+ explicitClientSection
+ " section of the supplied JAAS configuration: '"
+ clientConfig.getJaasConfKey()
+ "' because of a "
+ "RuntimeException: "
+ runtimeException);
} else {
throw new LoginException("Client cannot SASL-authenticate because the specified JAAS configuration "
+ "section '"
+ explicitClientSection
+ "' could not be found.");
}
} else {
// The user did not override the default context. It might be that they just don't intend to use SASL,
// so log at INFO, not WARN, since they don't expect any SASL-related information.
String msg = "Will not attempt to authenticate using SASL ";
if (runtimeException != null) {
msg += "(" + runtimeException + ")";
} else {
msg += "(unknown error)";
}
this.configStatus = msg;
this.isSASLConfigured = false;
}
if (clientConfig.getJaasConfKey() != null) {
// Again, the user explicitly set something SASL-related, so
// they probably expected SASL to succeed.
if (runtimeException != null) {
throw new LoginException("Zookeeper client cannot authenticate using the '"
+ clientConfig.getProperty(ZKClientConfig.LOGIN_CONTEXT_NAME_KEY, ZKClientConfig.LOGIN_CONTEXT_NAME_KEY_DEFAULT)
+ "' section of the supplied JAAS configuration: '"
+ clientConfig.getJaasConfKey()
+ "' because of a "
+ "RuntimeException: "
+ runtimeException);
} else {
throw new LoginException("No JAAS configuration section named '"
+ clientConfig.getProperty(ZKClientConfig.LOGIN_CONTEXT_NAME_KEY, ZKClientConfig.LOGIN_CONTEXT_NAME_KEY_DEFAULT)
+ "' was found in specified JAAS configuration file: '"
+ clientConfig.getJaasConfKey()
+ "'.");
}
}
}
}
</code-whole>

<code-specified>
if (explicitClientSection != null) {
// If the user explicitly overrides the default Login Context, they probably expected SASL to
// succeed. But if we got here, SASL failed.
if (runtimeException != null) {
throw new LoginException("Zookeeper client cannot authenticate using the "
+ explicitClientSection
+ " section of the supplied JAAS configuration: '"
+ clientConfig.getJaasConfKey()
+ "' because of a "
+ "RuntimeException: "
+ runtimeException);
} else {
throw new LoginException("Client cannot SASL-authenticate because the specified JAAS configuration "
+ "section '"
+ explicitClientSection
+ "' could not be found.");
}
} else {
// The user did not override the default context. It might be that they just don't intend to use SASL,
// so log at INFO, not WARN, since they don't expect any SASL-related information.
String msg = "Will not attempt to authenticate using SASL ";
if (runtimeException != null) {
msg += "(" + runtimeException + ")";
} else {
msg += "(unknown error)";
}
this.configStatus = msg;
this.isSASLConfigured = false;
}
</code-specified>
<code-specified>
if (clientConfig.getJaasConfKey() != null) {
// Again, the user explicitly set something SASL-related, so
// they probably expected SASL to succeed.
if (runtimeException != null) {
throw new LoginException("Zookeeper client cannot authenticate using the '"
+ clientConfig.getProperty(ZKClientConfig.LOGIN_CONTEXT_NAME_KEY, ZKClientConfig.LOGIN_CONTEXT_NAME_KEY_DEFAULT)
+ "' section of the supplied JAAS configuration: '"
+ clientConfig.getJaasConfKey()
+ "' because of a "
+ "RuntimeException: "
+ runtimeException);
} else {
throw new LoginException("No JAAS configuration section named '"
+ clientConfig.getProperty(ZKClientConfig.LOGIN_CONTEXT_NAME_KEY, ZKClientConfig.LOGIN_CONTEXT_NAME_KEY_DEFAULT)
+ "' was found in specified JAAS configuration file: '"
+ clientConfig.getJaasConfKey()
+ "'.");
}
}
</code-specified>