====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	SyncRequestProcessor.java	methodSinagture:	org.apache.zookeeper.server.SyncRequestProcessor.shouldFlush()Z	methodLines:	125:131
blockLines:	128:-1
paras:	null
TaintedStat:	NORMAL shouldFlush:conditional branch(le, to iindex=22) 11,12 Node: < Application, Lorg/apache/zookeeper/server/SyncRequestProcessor, shouldFlush()Z > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/SyncRequestProcessor, shouldFlush()Z > Context: Everywhere[2]5 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZooKeeperServer, getFlushDelay()J > 3 @4 exception:4
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/SyncRequestProcessor, shouldFlush()Z > Context: Everywhere[2]5 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZooKeeperServer, getFlushDelay()J > 3 @4 exception:4
NORMAL shouldFlush:11 = compare 5,10 opcode=cmp Node: < Application, Lorg/apache/zookeeper/server/SyncRequestProcessor, shouldFlush()Z > Context: Everywhere
NORMAL shouldFlush:conditional branch(le, to iindex=22) 11,12 Node: < Application, Lorg/apache/zookeeper/server/SyncRequestProcessor, shouldFlush()Z > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	SyncRequestProcessor.java	methodSinagture:	org.apache.zookeeper.server.SyncRequestProcessor.shouldFlush()Z	methodLines:	125:131
blockLines:	131:-1
paras:	null
TaintedStat:	NORMAL shouldFlush:conditional branch(le, to iindex=37) 16,12 Node: < Application, Lorg/apache/zookeeper/server/SyncRequestProcessor, shouldFlush()Z > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/SyncRequestProcessor, shouldFlush()Z > Context: Everywhere[6]8 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZooKeeperServer, getMaxBatchSize()I > 6 @12 exception:7
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/SyncRequestProcessor, shouldFlush()Z > Context: Everywhere[6]8 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZooKeeperServer, getMaxBatchSize()I > 6 @12 exception:7
NORMAL shouldFlush:9 = conversion(J) 8 Node: < Application, Lorg/apache/zookeeper/server/SyncRequestProcessor, shouldFlush()Z > Context: Everywhere
NORMAL shouldFlush:16 = compare 9,10 opcode=cmp Node: < Application, Lorg/apache/zookeeper/server/SyncRequestProcessor, shouldFlush()Z > Context: Everywhere
NORMAL shouldFlush:conditional branch(le, to iindex=37) 16,12 Node: < Application, Lorg/apache/zookeeper/server/SyncRequestProcessor, shouldFlush()Z > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    private boolean shouldFlush() {
        long flushDelay = zks.getFlushDelay();
        long maxBatchSize = zks.getMaxBatchSize();
        if ((flushDelay > 0) && (getRemainingDelay() == 0)) {
            return true;
        }
        return (maxBatchSize > 0) && (toFlush.size() >= maxBatchSize);
    }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/SyncRequestProcessor, run()V > Context: Everywhere, blocks=[BB[SSA:113..115]65 - org.apache.zookeeper.server.SyncRequestProcessor.run()V, BB[SSA:111..112]64 - org.apache.zookeeper.server.SyncRequestProcessor.run()V, BB[SSA:116..117]66 - org.apache.zookeeper.server.SyncRequestProcessor.run()V], numberOfBasicBlocks=3, firstLineNumber=215, lastLineNumber=216, firstMethodNumber=159, lastMethodNumber=225, isFirstLineValid=true, methodSrcCode=
            // in the ensemble take a snapshot at the same time
            resetSnapshotStats();
            lastFlushTime = Time.currentElapsedTime();
            while (true) {
                ServerMetrics.getMetrics().SYNC_PROCESSOR_QUEUE_SIZE.add(queuedRequests.size());

                long pollTime = Math.min(zks.getMaxWriteQueuePollTime(), getRemainingDelay());
                Request si = queuedRequests.poll(pollTime, TimeUnit.MILLISECONDS);
                if (si == null) {
                    /* We timed out looking for more writes to batch, go ahead and flush immediately */
                    flush();
                    si = queuedRequests.take();
                }

                if (si == REQUEST_OF_DEATH) {
                    break;
                }

                long startProcessTime = Time.currentElapsedTime();
                ServerMetrics.getMetrics().SYNC_PROCESSOR_QUEUE_TIME.add(startProcessTime - si.syncQueueStartTime);

                // track the number of records written to the log
                if (!si.isThrottled() && zks.getZKDatabase().append(si)) {
                    if (shouldSnapshot()) {
                        resetSnapshotStats();
                        // roll the log
                        zks.getZKDatabase().rollLog();
                        // take a snapshot
                        if (!snapThreadMutex.tryAcquire()) {
                            LOG.warn("Too busy to snap, skipping");
                        } else {
                            new ZooKeeperThread("Snapshot Thread") {
                                public void run() {
                                    try {
                                        zks.takeSnapshot();
                                    } catch (Exception e) {
                                        LOG.warn("Unexpected exception", e);
                                    } finally {
                                        snapThreadMutex.release();
                                    }
                                }
                            }.start();
                        }
                    }
                } else if (toFlush.isEmpty()) {
                    // optimization for read heavy workloads
                    // iff this is a read or a throttled request(which doesn't need to be written to the disk),
                    // and there are no pending flushes (writes), then just pass this to the next processor
                    if (nextProcessor != null) {
                        nextProcessor.processRequest(si);
                        if (nextProcessor instanceof Flushable) {
                            ((Flushable) nextProcessor).flush();
                        }
                    }
                    continue;
                }
                toFlush.add(si);
                if (shouldFlush()) {
                    flush();
                }
                ServerMetrics.getMetrics().SYNC_PROCESS_TIME.add(Time.currentElapsedTime() - startProcessTime);
            }
        } catch (Throwable t) {
            handleException(this.getName(), t);
        }
        LOG.info("SyncRequestProcessor exited!");
    }

}
