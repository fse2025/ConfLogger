```java
public static final int TXNLOG_MAGIC = ByteBuffer.wrap("ZKLG".getBytes()).getInt();

public static final int VERSION = 2;

public static final String LOG_FILE_PREFIX = "log";

static final String FSYNC_WARNING_THRESHOLD_MS_PROPERTY = "fsync.warningthresholdms";
static final String ZOOKEEPER_FSYNC_WARNING_THRESHOLD_MS_PROPERTY = "zookeeper." + FSYNC_WARNING_THRESHOLD_MS_PROPERTY;

/** Maximum time we allow for elapsed fsync before WARNing */
private static final long fsyncWarningThresholdMS;

/**
* This parameter limit the size of each txnlog to a given limit (KB).
* It does not affect how often the system will take a snapshot [zookeeper.snapCount]
* We roll the txnlog when either of the two limits are reached.
* Also since we only roll the logs at transaction boundaries, actual file size can exceed
* this limit by the maximum size of a serialized transaction.
* The feature is disabled by default (-1)
*/
private static final String txnLogSizeLimitSetting = "zookeeper.txnLogSizeLimitInKb";

/**
* The actual txnlog size limit in bytes.
*/
private static long txnLogSizeLimit = -1;

static {
LOG = LoggerFactory.getLogger(FileTxnLog.class);

/** Local variable to read fsync.warningthresholdms into */
Long fsyncWarningThreshold;
if ((fsyncWarningThreshold = Long.getLong(ZOOKEEPER_FSYNC_WARNING_THRESHOLD_MS_PROPERTY)) == null) {
    // ConfLogger Inserted Start
    logger.info("Configuration parameter '{}' not set, defaulting to '{}'", ZOOKEEPER_FSYNC_WARNING_THRESHOLD_MS_PROPERTY, FSYNC_WARNING_THRESHOLD_MS_PROPERTY);
    // ConfLogger Inserted End
    fsyncWarningThreshold = Long.getLong(FSYNC_WARNING_THRESHOLD_MS_PROPERTY, 1000);
}
fsyncWarningThresholdMS = fsyncWarningThreshold;

Long logSize = Long.getLong(txnLogSizeLimitSetting, -1);
if (logSize > 0) {
    // ConfLogger Skipped
    LOG.info("{} = {}", txnLogSizeLimitSetting, logSize);

    // Convert to bytes
    logSize = logSize * 1024;
    txnLogSizeLimit = logSize;
}
}
```