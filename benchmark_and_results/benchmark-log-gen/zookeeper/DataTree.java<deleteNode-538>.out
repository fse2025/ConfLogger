====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	DataTree.java	methodSinagture:	org.apache.zookeeper.server.DataTree.deleteNode(Ljava/lang/String;J)V	methodLines:	538:630
blockLines:	556:-1
paras:	null
TaintedStat:	NORMAL deleteNode:conditional branch(le, to iindex=51) 26,8 Node: < Application, Lorg/apache/zookeeper/server/DataTree, deleteNode(Ljava/lang/String;J)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/ZooKeeperServer, lambda$loadData$1(Ljava/lang/Long;)V > Context: Everywhere[5]8 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZKDatabase, getDataTreeLastProcessedZxid()J > 6 @9 exception:7
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/ZooKeeperServer, lambda$loadData$1(Ljava/lang/Long;)V > Context: Everywhere[5]8 = invokevirtual < Application, Lorg/apache/zookeeper/server/ZKDatabase, getDataTreeLastProcessedZxid()J > 6 @9 exception:7
PARAM_CALLER:Node: < Application, Lorg/apache/zookeeper/server/ZooKeeperServer, lambda$loadData$1(Ljava/lang/Long;)V > Context: Everywhere[6]invokevirtual < Application, Lorg/apache/zookeeper/server/ZooKeeperServer, killSession(JJ)V > 1,5,8 @12 exception:9 v8
PARAM_CALLEE:Node: < Application, Lorg/apache/zookeeper/server/ZooKeeperServer, killSession(JJ)V > Context: Everywhere v3
PARAM_CALLER:Node: < Application, Lorg/apache/zookeeper/server/ZooKeeperServer, killSession(JJ)V > Context: Everywhere[4]invokevirtual < Application, Lorg/apache/zookeeper/server/ZKDatabase, killSession(JJ)V > 5,2,3 @6 exception:6 v3
PARAM_CALLEE:Node: < Application, Lorg/apache/zookeeper/server/ZKDatabase, killSession(JJ)V > Context: Everywhere v3
PARAM_CALLER:Node: < Application, Lorg/apache/zookeeper/server/ZKDatabase, killSession(JJ)V > Context: Everywhere[4]invokevirtual < Application, Lorg/apache/zookeeper/server/DataTree, killSession(JJ)V > 5,2,3 @6 exception:6 v3
PARAM_CALLEE:Node: < Application, Lorg/apache/zookeeper/server/DataTree, killSession(JJ)V > Context: Everywhere v3
PARAM_CALLER:Node: < Application, Lorg/apache/zookeeper/server/DataTree, killSession(JJ)V > Context: Everywhere[10]invokevirtual < Application, Lorg/apache/zookeeper/server/DataTree, killSession(JJLjava/util/Set;Ljava/util/List;)V > 1,2,3,10,11 @20 exception:12 v3
PARAM_CALLEE:Node: < Application, Lorg/apache/zookeeper/server/DataTree, killSession(JJLjava/util/Set;Ljava/util/List;)V > Context: Everywhere v3
PARAM_CALLER:Node: < Application, Lorg/apache/zookeeper/server/DataTree, killSession(JJLjava/util/Set;Ljava/util/List;)V > Context: Everywhere[7]invokevirtual < Application, Lorg/apache/zookeeper/server/DataTree, deleteNodes(JJLjava/lang/Iterable;)V > 1,2,3,5 @10 exception:8 v3
PARAM_CALLEE:Node: < Application, Lorg/apache/zookeeper/server/DataTree, deleteNodes(JJLjava/lang/Iterable;)V > Context: Everywhere v3
PARAM_CALLER:Node: < Application, Lorg/apache/zookeeper/server/DataTree, deleteNodes(JJLjava/lang/Iterable;)V > Context: Everywhere[26]invokevirtual < Application, Lorg/apache/zookeeper/server/DataTree, deleteNode(Ljava/lang/String;J)V > 1,13,3 @63 exception:25 v3
PARAM_CALLEE:Node: < Application, Lorg/apache/zookeeper/server/DataTree, deleteNode(Ljava/lang/String;J)V > Context: Everywhere v3
NORMAL deleteNode:26 = compare 3,25 opcode=cmp Node: < Application, Lorg/apache/zookeeper/server/DataTree, deleteNode(Ljava/lang/String;J)V > Context: Everywhere
NORMAL deleteNode:conditional branch(le, to iindex=51) 26,8 Node: < Application, Lorg/apache/zookeeper/server/DataTree, deleteNode(Ljava/lang/String;J)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    public void deleteNode(String path, long zxid) throws NoNodeException {
        int lastSlash = path.lastIndexOf('/');
        String parentName = path.substring(0, lastSlash);
        String childName = path.substring(lastSlash + 1);

        // The child might already be deleted during taking fuzzy snapshot,
        // but we still need to update the pzxid here before throw exception
        // for no such child
        DataNode parent = nodes.get(parentName);
        if (parent == null) {
            throw new NoNodeException();
        }
        synchronized (parent) {
            nodes.preChange(parentName, parent);
            parent.removeChild(childName);
            // Only update pzxid when the zxid is larger than the current pzxid,
            // otherwise we might override some higher pzxid set by a CreateTxn,
            // which could cause the cversion and pzxid inconsistent
            if (zxid > parent.stat.getPzxid()) {
                parent.stat.setPzxid(zxid);
            }
            nodes.postChange(parentName, parent);
        }

        DataNode node = nodes.get(path);
        if (node == null) {
            throw new NoNodeException();
        }
        List<ACL> acl;
        nodes.remove(path);
        synchronized (node) {
            acl = getACL(node);
            aclCache.removeUsage(node.acl);
            nodeDataSize.addAndGet(-getNodeSize(path, node.data));
        }

        // Synchronized to sync the containers and ttls change, probably
        // only need to sync on containers and ttls, will update it in a
        // separate patch.
        List<ACL> parentAcl;
        synchronized (parent) {
            parentAcl = getACL(parent);
            long owner = node.stat.getEphemeralOwner();
            EphemeralType ephemeralType = EphemeralType.get(owner);
            if (ephemeralType == EphemeralType.CONTAINER) {
                containers.remove(path);
            } else if (ephemeralType == EphemeralType.TTL) {
                ttls.remove(path);
            } else if (owner != 0) {
                Set<String> nodes = ephemerals.get(owner);
                if (nodes != null) {
                    synchronized (nodes) {
                        nodes.remove(path);
                    }
                }
            }
        }

        if (parentName.startsWith(procZookeeper) && Quotas.limitNode.equals(childName)) {
            // delete the node in the trie.
            // we need to update the trie as well
            pTrie.deletePath(Quotas.trimQuotaPath(parentName));
        }

        // also check to update the quotas for this node
        String lastPrefix = getMaxPrefixWithQuota(path);
        if (lastPrefix != null) {
            // ok we have some match and need to update
            long bytes;
            synchronized (node) {
                bytes = (node.data == null ? 0 : -(node.data.length));
            }
            updateQuotaStat(lastPrefix, bytes, -1);
        }

        updateWriteStat(path, 0L);

        if (LOG.isTraceEnabled()) {
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.EVENT_DELIVERY_TRACE_MASK,
                "dataWatches.triggerWatch " + path);
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.EVENT_DELIVERY_TRACE_MASK,
                "childWatches.triggerWatch " + parentName);
        }

        WatcherOrBitSet processed = dataWatches.triggerWatch(path, EventType.NodeDeleted, zxid, acl);
        childWatches.triggerWatch(path, EventType.NodeDeleted, zxid, acl, processed);
        childWatches.triggerWatch("".equals(parentName) ? "/" : parentName,
            EventType.NodeChildrenChanged, zxid, parentAcl);
    }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/DataTree, processTxn(Lorg/apache/zookeeper/txn/TxnHeader;Lorg/apache/jute/Record;Z)Lorg/apache/zookeeper/server/DataTree$ProcessTxnResult; > Context: Everywhere, blocks=[BB[SSA:175..175]85 - org.apache.zookeeper.server.DataTree.processTxn(Lorg/apache/zookeeper/txn/TxnHeader;Lorg/apache/jute/Record;Z)Lorg/apache/zookeeper/server/DataTree$ProcessTxnResult;, BB[SSA:173..174]84 - org.apache.zookeeper.server.DataTree.processTxn(Lorg/apache/zookeeper/txn/TxnHeader;Lorg/apache/jute/Record;Z)Lorg/apache/zookeeper/server/DataTree$ProcessTxnResult;, BB[SSA:176..176]86 - org.apache.zookeeper.server.DataTree.processTxn(Lorg/apache/zookeeper/txn/TxnHeader;Lorg/apache/jute/Record;Z)Lorg/apache/zookeeper/server/DataTree$ProcessTxnResult;, BB[SSA:-1..-2]292 - org.apache.zookeeper.server.DataTree.processTxn(Lorg/apache/zookeeper/txn/TxnHeader;Lorg/apache/jute/Record;Z)Lorg/apache/zookeeper/server/DataTree$ProcessTxnResult;], numberOfBasicBlocks=4, firstLineNumber=933, lastLineNumber=934, firstMethodNumber=860, lastMethodNumber=1123, isFirstLineValid=true, methodSrcCode=
    public ProcessTxnResult processTxn(TxnHeader header, Record txn, boolean isSubTxn) {
        ProcessTxnResult rc = new ProcessTxnResult();

        try {
            rc.clientId = header.getClientId();
            rc.cxid = header.getCxid();
            rc.zxid = header.getZxid();
            rc.type = header.getType();
            rc.err = 0;
            rc.multiResult = null;
            switch (header.getType()) {
            case OpCode.create:
                CreateTxn createTxn = (CreateTxn) txn;
                rc.path = createTxn.getPath();
                createNode(
                    createTxn.getPath(),
                    createTxn.getData(),
                    createTxn.getAcl(),
                    createTxn.getEphemeral() ? header.getClientId() : 0,
                    createTxn.getParentCVersion(),
                    header.getZxid(),
                    header.getTime(),
                    null);
                break;
            case OpCode.create2:
                CreateTxn create2Txn = (CreateTxn) txn;
                rc.path = create2Txn.getPath();
                Stat stat = new Stat();
                createNode(
                    create2Txn.getPath(),
                    create2Txn.getData(),
                    create2Txn.getAcl(),
                    create2Txn.getEphemeral() ? header.getClientId() : 0,
                    create2Txn.getParentCVersion(),
                    header.getZxid(),
                    header.getTime(),
                    stat);
                rc.stat = stat;
                break;
            case OpCode.createTTL:
                CreateTTLTxn createTtlTxn = (CreateTTLTxn) txn;
                rc.path = createTtlTxn.getPath();
                stat = new Stat();
                createNode(
                    createTtlTxn.getPath(),
                    createTtlTxn.getData(),
                    createTtlTxn.getAcl(),
                    EphemeralType.TTL.toEphemeralOwner(createTtlTxn.getTtl()),
                    createTtlTxn.getParentCVersion(),
                    header.getZxid(),
                    header.getTime(),
                    stat);
                rc.stat = stat;
                break;
            case OpCode.createContainer:
                CreateContainerTxn createContainerTxn = (CreateContainerTxn) txn;
                rc.path = createContainerTxn.getPath();
                stat = new Stat();
                createNode(
                    createContainerTxn.getPath(),
                    createContainerTxn.getData(),
                    createContainerTxn.getAcl(),
                    EphemeralType.CONTAINER_EPHEMERAL_OWNER,
                    createContainerTxn.getParentCVersion(),
                    header.getZxid(),
                    header.getTime(),
                    stat);
                rc.stat = stat;
                break;
            case OpCode.delete:
            case OpCode.deleteContainer:
                DeleteTxn deleteTxn = (DeleteTxn) txn;
                rc.path = deleteTxn.getPath();
                deleteNode(deleteTxn.getPath(), header.getZxid());
                break;
            case OpCode.reconfig:
            case OpCode.setData:
                SetDataTxn setDataTxn = (SetDataTxn) txn;
                rc.path = setDataTxn.getPath();
                rc.stat = setData(
                    setDataTxn.getPath(),
                    setDataTxn.getData(),
                    setDataTxn.getVersion(),
                    header.getZxid(),
                    header.getTime());
                break;
            case OpCode.setACL:
                SetACLTxn setACLTxn = (SetACLTxn) txn;
                rc.path = setACLTxn.getPath();
                rc.stat = setACL(setACLTxn.getPath(), setACLTxn.getAcl(), setACLTxn.getVersion());
                break;
            case OpCode.closeSession:
                long sessionId = header.getClientId();
                if (txn != null) {
                    killSession(sessionId, header.getZxid(),
                            ephemerals.remove(sessionId),
                            ((CloseSessionTxn) txn).getPaths2Delete());
                } else {
                    killSession(sessionId, header.getZxid());
                }
                break;
            case OpCode.error:
                ErrorTxn errTxn = (ErrorTxn) txn;
                rc.err = errTxn.getErr();
                break;
            case OpCode.check:
                CheckVersionTxn checkTxn = (CheckVersionTxn) txn;
                rc.path = checkTxn.getPath();
                break;
            case OpCode.multi:
                MultiTxn multiTxn = (MultiTxn) txn;
                List<Txn> txns = multiTxn.getTxns();
                rc.multiResult = new ArrayList<>();
                boolean failed = false;
                for (Txn subtxn : txns) {
                    if (subtxn.getType() == OpCode.error) {
                        failed = true;
                        break;
                    }
                }

                boolean post_failed = false;
                for (Txn subtxn : txns) {
                    ByteBuffer bb = ByteBuffer.wrap(subtxn.getData());
                    Record record;
                    switch (subtxn.getType()) {
                    case OpCode.create:
                    case OpCode.create2:
                        record = new CreateTxn();
                        break;
                    case OpCode.createTTL:
                        record = new CreateTTLTxn();
                        break;
                    case OpCode.createContainer:
                        record = new CreateContainerTxn();
                        break;
                    case OpCode.delete:
                    case OpCode.deleteContainer:
                        record = new DeleteTxn();
                        break;
                    case OpCode.setData:
                        record = new SetDataTxn();
                        break;
                    case OpCode.error:
                        record = new ErrorTxn();
                        post_failed = true;
                        break;
                    case OpCode.check:
                        record = new CheckVersionTxn();
                        break;
                    default:
                        throw new IOException("Invalid type of op: " + subtxn.getType());
                    }

                    assert record != null;

                    ByteBufferInputStream.byteBuffer2Record(bb, record);

                    if (failed && subtxn.getType() != OpCode.error) {
                        int ec = post_failed ? Code.RUNTIMEINCONSISTENCY.intValue() : Code.OK.intValue();

                        subtxn.setType(OpCode.error);
                        record = new ErrorTxn(ec);
                    }

                    assert !failed || (subtxn.getType() == OpCode.error);

                    TxnHeader subHdr = new TxnHeader(
                        header.getClientId(),
                        header.getCxid(),
                        header.getZxid(),
                        header.getTime(),
                        subtxn.getType());
                    ProcessTxnResult subRc = processTxn(subHdr, record, true);
                    rc.multiResult.add(subRc);
                    if (subRc.err != 0 && rc.err == 0) {
                        rc.err = subRc.err;
                    }
                }
                break;
            }
        } catch (KeeperException e) {
            LOG.debug("Failed: {}:{}", header, txn, e);
            rc.err = e.code().intValue();
        } catch (IOException e) {
            LOG.debug("Failed: {}:{}", header, txn, e);
        }

        /*
         * Snapshots are taken lazily. When serializing a node, it's data
         * and children copied in a synchronization block on that node,
         * which means newly created node won't be in the snapshot, so
         * we won't have mismatched cversion and pzxid when replaying the
         * createNode txn.
         *
         * But there is a tricky scenario that if the child is deleted due
         * to session close and re-created in a different global session
         * after that the parent is serialized, then when replay the txn
         * because the node belongs to a different session, replay the
         * closeSession txn won't delete it anymore, and we'll get NODEEXISTS
         * error when replay the createNode txn. In this case, we need to
         * update the cversion and pzxid to the new value.
         *
         * Note, such failures on DT should be seen only during
         * restore.
         */
        if (header.getType() == OpCode.create && rc.err == Code.NODEEXISTS.intValue()) {
            LOG.debug("Adjusting parent cversion for Txn: {} path: {} err: {}", header.getType(), rc.path, rc.err);
            int lastSlash = rc.path.lastIndexOf('/');
            String parentName = rc.path.substring(0, lastSlash);
            CreateTxn cTxn = (CreateTxn) txn;
            try {
                setCversionPzxid(parentName, cTxn.getParentCVersion(), header.getZxid());
            } catch (NoNodeException e) {
                LOG.error("Failed to set parent cversion for: {}", parentName, e);
                rc.err = e.code().intValue();
            }
        } else if (rc.err != Code.OK.intValue()) {
            LOG.debug("Ignoring processTxn failure hdr: {} : error: {}", header.getType(), rc.err);
        }

        /*
         * Things we can only update after the whole txn is applied to data
         * tree.
         *
         * If we update the lastProcessedZxid with the first sub txn in multi
         * and there is a snapshot in progress, it's possible that the zxid
         * associated with the snapshot only include partial of the multi op.
         *
         * When loading snapshot, it will only load the txns after the zxid
         * associated with snapshot file, which could cause data inconsistency
         * due to missing sub txns.
         *
         * To avoid this, we only update the lastProcessedZxid when the whole
         * multi-op txn is applied to DataTree.
         */
        if (!isSubTxn) {
            /*
             * A snapshot might be in progress while we are modifying the data
             * tree. If we set lastProcessedZxid prior to making corresponding
             * change to the tree, then the zxid associated with the snapshot
             * file will be ahead of its contents. Thus, while restoring from
             * the snapshot, the restore method will not apply the transaction
             * for zxid associated with the snapshot file, since the restore
             * method assumes that transaction to be present in the snapshot.
             *
             * To avoid this, we first apply the transaction and then modify
             * lastProcessedZxid.  During restore, we correctly handle the
             * case where the snapshot contains data ahead of the zxid associated
             * with the file.
             */
            if (rc.zxid > lastProcessedZxid) {
                lastProcessedZxid = rc.zxid;
            }

            if (digestFromLoadedSnapshot != null) {
                compareSnapshotDigests(rc.zxid);
            } else {
                // only start recording digest when we're not in fuzzy state
                logZxidDigest(rc.zxid, getTreeDigest());
            }
        }

        return rc;
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/DataTree, deleteNodes(JJLjava/lang/Iterable;)V > Context: Everywhere, blocks=[BB[SSA:22..26]13 - org.apache.zookeeper.server.DataTree.deleteNodes(JJLjava/lang/Iterable;)V, BB[SSA:21..21]12 - org.apache.zookeeper.server.DataTree.deleteNodes(JJLjava/lang/Iterable;)V, BB[SSA:27..33]14 - org.apache.zookeeper.server.DataTree.deleteNodes(JJLjava/lang/Iterable;)V, BB[SSA:-1..-2]27 - org.apache.zookeeper.server.DataTree.deleteNodes(JJLjava/lang/Iterable;)V], numberOfBasicBlocks=4, firstLineNumber=1166, lastLineNumber=1170, firstMethodNumber=1163, lastMethodNumber=1188, isFirstLineValid=true, methodSrcCode=
    void deleteNodes(long session, long zxid, Iterable<String> paths2Delete) {
        for (String path : paths2Delete) {
            boolean deleted = false;
            String sessionHex = "0x" + Long.toHexString(session);
            try {
                deleteNode(path, zxid);
                deleted = true;
                LOG.debug("Deleting ephemeral node {} for session {}", path, sessionHex);
            } catch (NoNodeException e) {
                LOG.warn(
                    "Ignoring NoNodeException for path {} while removing ephemeral for dead session {}",
                        path, sessionHex);
            }
            if (ZKAuditProvider.isAuditEnabled()) {
                if (deleted) {
                    ZKAuditProvider.log(ZKAuditProvider.getZKUser(),
                            AuditConstants.OP_DEL_EZNODE_EXP, path, null, null,
                            sessionHex, null, Result.SUCCESS);
                } else {
                    ZKAuditProvider.log(ZKAuditProvider.getZKUser(),
                            AuditConstants.OP_DEL_EZNODE_EXP, path, null, null,
                            sessionHex, null, Result.FAILURE);
                }
            }
        }
    }

}
