====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	MBeanRegistry.java	methodSinagture:	org.apache.zookeeper.jmx.MBeanRegistry.unregister(Lorg/apache/zookeeper/jmx/ZKMBeanInfo;)V	methodLines:	145:157
blockLines:	146:-1
paras:	null
TaintedStat:	NORMAL unregister:conditional branch(ne, to iindex=4) 2,4 Node: < Application, Lorg/apache/zookeeper/jmx/MBeanRegistry, unregister(Lorg/apache/zookeeper/jmx/ZKMBeanInfo;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote; > Context: Everywhere[387]170 = invokevirtual < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, getVoteTracker(Ljava/util/Map;Lorg/apache/zookeeper/server/quorum/Vote;)Lorg/apache/zookeeper/server/quorum/SyncedLearnerTracker; > 1,23,161 @886 exception:169
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote; > Context: Everywhere[387]170 = invokevirtual < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, getVoteTracker(Ljava/util/Map;Lorg/apache/zookeeper/server/quorum/Vote;)Lorg/apache/zookeeper/server/quorum/SyncedLearnerTracker; > 1,23,161 @886 exception:169
PHI Node: < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote; > Context: Everywhere:278 = phi  281,281,281,281,170,170,281,281,281,281,281,281
PHI Node: < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote; > Context: Everywhere:281 = phi  278,18
PARAM_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote; > Context: Everywhere[129]225 = invokeinterface < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumVerifier, revalidateVoteset(Lorg/apache/zookeeper/server/quorum/SyncedLearnerTracker;Z)Z > 221,281,223 @274 exception:224 v281
PARAM_CALLEE:Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateVoteset(Lorg/apache/zookeeper/server/quorum/SyncedLearnerTracker;Z)Z > Context: Everywhere v2
NORMAL revalidateVoteset:conditional branch(eq, to iindex=12) 2,5 Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateVoteset(Lorg/apache/zookeeper/server/quorum/SyncedLearnerTracker;Z)Z > Context: Everywhere
PHI Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateVoteset(Lorg/apache/zookeeper/server/quorum/SyncedLearnerTracker;Z)Z > Context: Everywhere:10 = phi  9,8
NORMAL revalidateVoteset:return 10 Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateVoteset(Lorg/apache/zookeeper/server/quorum/SyncedLearnerTracker;Z)Z > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj, revalidateVoteset(Lorg/apache/zookeeper/server/quorum/SyncedLearnerTracker;Z)Z > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote; > Context: Everywhere[129]225 = invokeinterface < Application, Lorg/apache/zookeeper/server/quorum/flexible/QuorumVerifier, revalidateVoteset(Lorg/apache/zookeeper/server/quorum/SyncedLearnerTracker;Z)Z > 221,281,223 @274 exception:224
NORMAL lookForLeader:conditional branch(eq, to iindex=184) 225,56 Node: < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote; > Context: Everywhere
NORMAL lookForLeader:conditional branch(eq, to iindex=165) 403,18 Node: < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote; > Context: Everywhere
NORMAL lookForLeader:407 = getfield < Application, Lorg/apache/zookeeper/server/quorum/QuorumPeer, jmxLeaderElectionBean, <Application,Lorg/apache/zookeeper/server/quorum/LeaderElectionBean> > 406 Node: < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote; > Context: Everywhere
PARAM_CALLER:Node: < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote; > Context: Everywhere[164]invokevirtual < Application, Lorg/apache/zookeeper/jmx/MBeanRegistry, unregister(Lorg/apache/zookeeper/jmx/ZKMBeanInfo;)V > 405,407 @350 exception:408 v407
PARAM_CALLEE:Node: < Application, Lorg/apache/zookeeper/jmx/MBeanRegistry, unregister(Lorg/apache/zookeeper/jmx/ZKMBeanInfo;)V > Context: Everywhere v2
NORMAL unregister:conditional branch(ne, to iindex=4) 2,4 Node: < Application, Lorg/apache/zookeeper/jmx/MBeanRegistry, unregister(Lorg/apache/zookeeper/jmx/ZKMBeanInfo;)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    public void unregister(ZKMBeanInfo bean) {
        if (bean == null) {
            return;
        }
        String path = mapBean2Path.remove(bean);
        try {
            unregister(path, bean);
        } catch (JMException e) {
            LOG.warn("Error during unregister of [{}]", bean.getName(), e);
        } catch (Throwable t) {
            LOG.error("Unexpected exception during unregister of [{}]. It should be reviewed and fixed.", bean.getName(), t);
        }
    }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerZooKeeperServer, unregisterJMX(Lorg/apache/zookeeper/server/quorum/Learner;)V > Context: Everywhere, blocks=[BB[SSA:7..7]5 - org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.unregisterJMX(Lorg/apache/zookeeper/server/quorum/Learner;)V, BB[SSA:5..6]4 - org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.unregisterJMX(Lorg/apache/zookeeper/server/quorum/Learner;)V, BB[SSA:8..8]6 - org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.unregisterJMX(Lorg/apache/zookeeper/server/quorum/Learner;)V, BB[SSA:-1..-2]10 - org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.unregisterJMX(Lorg/apache/zookeeper/server/quorum/Learner;)V], numberOfBasicBlocks=4, firstLineNumber=146, lastLineNumber=150, firstMethodNumber=144, lastMethodNumber=152, isFirstLineValid=true, methodSrcCode=
        try {
            if (jmxServerBean != null) {
                MBeanRegistry.getInstance().unregister(jmxServerBean);
            }
        } catch (Exception e) {
            LOG.warn("Failed to unregister with JMX", e);
        }
        jmxServerBean = null;
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/LeaderZooKeeperServer, unregisterJMX(Lorg/apache/zookeeper/server/quorum/Leader;)V > Context: Everywhere, blocks=[BB[SSA:7..7]5 - org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.unregisterJMX(Lorg/apache/zookeeper/server/quorum/Leader;)V, BB[SSA:5..6]4 - org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.unregisterJMX(Lorg/apache/zookeeper/server/quorum/Leader;)V, BB[SSA:8..8]6 - org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.unregisterJMX(Lorg/apache/zookeeper/server/quorum/Leader;)V, BB[SSA:-1..-2]10 - org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.unregisterJMX(Lorg/apache/zookeeper/server/quorum/Leader;)V], numberOfBasicBlocks=4, firstLineNumber=275, lastLineNumber=279, firstMethodNumber=273, lastMethodNumber=281, isFirstLineValid=true, methodSrcCode=
        try {
            if (jmxServerBean != null) {
                MBeanRegistry.getInstance().unregister(jmxServerBean);
            }
        } catch (Exception e) {
            LOG.warn("Failed to unregister with JMX", e);
        }
        jmxServerBean = null;
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/QuorumPeer, run()V > Context: Everywhere, blocks=[BB[SSA:396..396]190 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:392..395]189 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:397..399]191 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:-1..-2]228 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:400..400]192 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:397..399]191 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:401..402]193 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:-1..-2]228 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:413..416]201 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:412..412]200 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:417..417]202 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:-1..-2]228 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:437..437]210 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:433..436]209 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:438..440]211 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:-1..-2]228 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:441..441]212 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:438..440]211 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:442..443]213 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:-1..-2]228 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:454..457]221 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:453..453]220 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:458..458]222 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V, BB[SSA:-1..-2]228 - org.apache.zookeeper.server.quorum.QuorumPeer.run()V], numberOfBasicBlocks=24, firstLineNumber=1589, lastLineNumber=1591, firstMethodNumber=1428, lastMethodNumber=1597, isFirstLineValid=true, methodSrcCode=
    public void run() {
        updateThreadName();

        LOG.debug("Starting quorum peer");
        try {
            jmxQuorumBean = new QuorumBean(this);
            MBeanRegistry.getInstance().register(jmxQuorumBean, null);
            for (QuorumServer s : getView().values()) {
                ZKMBeanInfo p;
                if (getMyId() == s.id) {
                    p = jmxLocalPeerBean = new LocalPeerBean(this);
                    try {
                        MBeanRegistry.getInstance().register(p, jmxQuorumBean);
                    } catch (Exception e) {
                        LOG.warn("Failed to register with JMX", e);
                        jmxLocalPeerBean = null;
                    }
                } else {
                    RemotePeerBean rBean = new RemotePeerBean(this, s);
                    try {
                        MBeanRegistry.getInstance().register(rBean, jmxQuorumBean);
                        jmxRemotePeerBean.put(s.id, rBean);
                    } catch (Exception e) {
                        LOG.warn("Failed to register with JMX", e);
                    }
                }
            }
        } catch (Exception e) {
            LOG.warn("Failed to register with JMX", e);
            jmxQuorumBean = null;
        }

        try {
            /*
             * Main loop
             */
            while (running) {
                if (unavailableStartTime == 0) {
                    unavailableStartTime = Time.currentElapsedTime();
                }

                switch (getPeerState()) {
                case LOOKING:
                    LOG.info("LOOKING");
                    ServerMetrics.getMetrics().LOOKING_COUNT.add(1);

                    if (Boolean.getBoolean("readonlymode.enabled")) {
                        LOG.info("Attempting to start ReadOnlyZooKeeperServer");

                        // Create read-only server but don't start it immediately
                        final ReadOnlyZooKeeperServer roZk = new ReadOnlyZooKeeperServer(logFactory, this, this.zkDb);

                        // Instead of starting roZk immediately, wait some grace
                        // period before we decide we're partitioned.
                        //
                        // Thread is used here because otherwise it would require
                        // changes in each of election strategy classes which is
                        // unnecessary code coupling.
                        Thread roZkMgr = new Thread() {
                            public void run() {
                                try {
                                    // lower-bound grace period to 2 secs
                                    sleep(Math.max(2000, tickTime));
                                    if (ServerState.LOOKING.equals(getPeerState())) {
                                        roZk.startup();
                                    }
                                } catch (InterruptedException e) {
                                    LOG.info("Interrupted while attempting to start ReadOnlyZooKeeperServer, not started");
                                } catch (Exception e) {
                                    LOG.error("FAILED to start ReadOnlyZooKeeperServer", e);
                                }
                            }
                        };
                        try {
                            roZkMgr.start();
                            reconfigFlagClear();
                            if (shuttingDownLE) {
                                shuttingDownLE = false;
                                startLeaderElection();
                            }
                            setCurrentVote(makeLEStrategy().lookForLeader());
                            checkSuspended();
                        } catch (Exception e) {
                            LOG.warn("Unexpected exception", e);
                            setPeerState(ServerState.LOOKING);
                        } finally {
                            // If the thread is in the the grace period, interrupt
                            // to come out of waiting.
                            roZkMgr.interrupt();
                            roZk.shutdown();
                        }
                    } else {
                        try {
                            reconfigFlagClear();
                            if (shuttingDownLE) {
                                shuttingDownLE = false;
                                startLeaderElection();
                            }
                            setCurrentVote(makeLEStrategy().lookForLeader());
                        } catch (Exception e) {
                            LOG.warn("Unexpected exception", e);
                            setPeerState(ServerState.LOOKING);
                        }
                    }
                    break;
                case OBSERVING:
                    try {
                        LOG.info("OBSERVING");
                        setObserver(makeObserver(logFactory));
                        observer.observeLeader();
                    } catch (Exception e) {
                        LOG.warn("Unexpected exception", e);
                    } finally {
                        observer.shutdown();
                        setObserver(null);
                        updateServerState();

                        // Add delay jitter before we switch to LOOKING
                        // state to reduce the load of ObserverMaster
                        if (isRunning()) {
                            Observer.waitForObserverElectionDelay();
                        }
                    }
                    break;
                case FOLLOWING:
                    try {
                        LOG.info("FOLLOWING");
                        setFollower(makeFollower(logFactory));
                        follower.followLeader();
                    } catch (Exception e) {
                        LOG.warn("Unexpected exception", e);
                    } finally {
                        follower.shutdown();
                        setFollower(null);
                        updateServerState();
                    }
                    break;
                case LEADING:
                    LOG.info("LEADING");
                    try {
                        setLeader(makeLeader(logFactory));
                        leader.lead();
                        setLeader(null);
                    } catch (Exception e) {
                        LOG.warn("Unexpected exception", e);
                    } finally {
                        if (leader != null) {
                            leader.shutdown("Forcing shutdown");
                            setLeader(null);
                        }
                        updateServerState();
                    }
                    break;
                }
            }
        } finally {
            LOG.warn("QuorumPeer main thread exited");
            MBeanRegistry instance = MBeanRegistry.getInstance();
            instance.unregister(jmxQuorumBean);
            instance.unregister(jmxLocalPeerBean);

            for (RemotePeerBean remotePeerBean : jmxRemotePeerBean.values()) {
                instance.unregister(remotePeerBean);
            }

            jmxQuorumBean = null;
            jmxLocalPeerBean = null;
            jmxRemotePeerBean = null;
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer, unregisterJMX(Lorg/apache/zookeeper/server/ZooKeeperServer;)V > Context: Everywhere, blocks=[BB[SSA:7..7]5 - org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer.unregisterJMX(Lorg/apache/zookeeper/server/ZooKeeperServer;)V, BB[SSA:5..6]4 - org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer.unregisterJMX(Lorg/apache/zookeeper/server/ZooKeeperServer;)V, BB[SSA:8..8]6 - org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer.unregisterJMX(Lorg/apache/zookeeper/server/ZooKeeperServer;)V, BB[SSA:-1..-2]10 - org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer.unregisterJMX(Lorg/apache/zookeeper/server/ZooKeeperServer;)V], numberOfBasicBlocks=4, firstLineNumber=170, lastLineNumber=174, firstMethodNumber=168, lastMethodNumber=176, isFirstLineValid=true, methodSrcCode=
        try {
            if (jmxServerBean != null) {
                MBeanRegistry.getInstance().unregister(jmxServerBean);
            }
        } catch (Exception e) {
            LOG.warn("Failed to unregister with JMX", e);
        }
        jmxServerBean = null;
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/Leader, unregisterLearnerHandlerBean(Lorg/apache/zookeeper/server/quorum/LearnerHandler;)V > Context: Everywhere, blocks=[BB[SSA:10..11]6 - org.apache.zookeeper.server.quorum.Leader.unregisterLearnerHandlerBean(Lorg/apache/zookeeper/server/quorum/LearnerHandler;)V, BB[SSA:9..9]5 - org.apache.zookeeper.server.quorum.Leader.unregisterLearnerHandlerBean(Lorg/apache/zookeeper/server/quorum/LearnerHandler;)V, BB[SSA:12..12]7 - org.apache.zookeeper.server.quorum.Leader.unregisterLearnerHandlerBean(Lorg/apache/zookeeper/server/quorum/LearnerHandler;)V, BB[SSA:-1..-2]8 - org.apache.zookeeper.server.quorum.Leader.unregisterLearnerHandlerBean(Lorg/apache/zookeeper/server/quorum/LearnerHandler;)V], numberOfBasicBlocks=4, firstLineNumber=1813, lastLineNumber=1815, firstMethodNumber=1810, lastMethodNumber=1815, isFirstLineValid=true, methodSrcCode=
    public void unregisterLearnerHandlerBean(final LearnerHandler learnerHandler) {
        LearnerHandlerBean bean = connectionBeans.remove(learnerHandler);
        if (bean != null) {
            MBeanRegistry.getInstance().unregister(bean);
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer, unregisterJMX()V > Context: Everywhere, blocks=[BB[SSA:7..7]5 - org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer.unregisterJMX()V, BB[SSA:5..6]4 - org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer.unregisterJMX()V, BB[SSA:8..8]6 - org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer.unregisterJMX()V, BB[SSA:-1..-2]10 - org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer.unregisterJMX()V], numberOfBasicBlocks=4, firstLineNumber=158, lastLineNumber=162, firstMethodNumber=156, lastMethodNumber=164, isFirstLineValid=true, methodSrcCode=
        try {
            if (jmxDataTreeBean != null) {
                MBeanRegistry.getInstance().unregister(jmxDataTreeBean);
            }
        } catch (Exception e) {
            LOG.warn("Failed to unregister with JMX", e);
        }
        jmxDataTreeBean = null;
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/ZooKeeperServer, unregisterJMX()V > Context: Everywhere, blocks=[BB[SSA:7..7]5 - org.apache.zookeeper.server.ZooKeeperServer.unregisterJMX()V, BB[SSA:5..6]4 - org.apache.zookeeper.server.ZooKeeperServer.unregisterJMX()V, BB[SSA:8..8]6 - org.apache.zookeeper.server.ZooKeeperServer.unregisterJMX()V, BB[SSA:-1..-2]18 - org.apache.zookeeper.server.ZooKeeperServer.unregisterJMX()V, BB[SSA:21..21]12 - org.apache.zookeeper.server.ZooKeeperServer.unregisterJMX()V, BB[SSA:19..20]11 - org.apache.zookeeper.server.ZooKeeperServer.unregisterJMX()V, BB[SSA:22..22]13 - org.apache.zookeeper.server.ZooKeeperServer.unregisterJMX()V, BB[SSA:-1..-2]18 - org.apache.zookeeper.server.ZooKeeperServer.unregisterJMX()V], numberOfBasicBlocks=8, firstLineNumber=1003, lastLineNumber=1007, firstMethodNumber=994, lastMethodNumber=1010, isFirstLineValid=true, methodSrcCode=
        try {
            if (jmxDataTreeBean != null) {
                MBeanRegistry.getInstance().unregister(jmxDataTreeBean);
            }
        } catch (Exception e) {
            LOG.warn("Failed to unregister with JMX", e);
        }
        try {
            if (jmxServerBean != null) {
                MBeanRegistry.getInstance().unregister(jmxServerBean);
            }
        } catch (Exception e) {
            LOG.warn("Failed to unregister with JMX", e);
        }
        jmxServerBean = null;
        jmxDataTreeBean = null;
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerZooKeeperServer, unregisterJMX()V > Context: Everywhere, blocks=[BB[SSA:7..7]5 - org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.unregisterJMX()V, BB[SSA:5..6]4 - org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.unregisterJMX()V, BB[SSA:8..8]6 - org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.unregisterJMX()V, BB[SSA:-1..-2]10 - org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.unregisterJMX()V], numberOfBasicBlocks=4, firstLineNumber=134, lastLineNumber=138, firstMethodNumber=132, lastMethodNumber=140, isFirstLineValid=true, methodSrcCode=
        try {
            if (jmxDataTreeBean != null) {
                MBeanRegistry.getInstance().unregister(jmxDataTreeBean);
            }
        } catch (Exception e) {
            LOG.warn("Failed to unregister with JMX", e);
        }
        jmxDataTreeBean = null;
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/ServerCnxnFactory, unregisterConnection(Lorg/apache/zookeeper/server/ServerCnxn;)V > Context: Everywhere, blocks=[BB[SSA:10..11]6 - org.apache.zookeeper.server.ServerCnxnFactory.unregisterConnection(Lorg/apache/zookeeper/server/ServerCnxn;)V, BB[SSA:9..9]5 - org.apache.zookeeper.server.ServerCnxnFactory.unregisterConnection(Lorg/apache/zookeeper/server/ServerCnxn;)V, BB[SSA:12..12]7 - org.apache.zookeeper.server.ServerCnxnFactory.unregisterConnection(Lorg/apache/zookeeper/server/ServerCnxn;)V, BB[SSA:-1..-2]8 - org.apache.zookeeper.server.ServerCnxnFactory.unregisterConnection(Lorg/apache/zookeeper/server/ServerCnxn;)V], numberOfBasicBlocks=4, firstLineNumber=209, lastLineNumber=211, firstMethodNumber=206, lastMethodNumber=211, isFirstLineValid=true, methodSrcCode=
    public void unregisterConnection(ServerCnxn serverCnxn) {
        ConnectionBean jmxConnectionBean = connectionBeans.remove(serverCnxn);
        if (jmxConnectionBean != null) {
            MBeanRegistry.getInstance().unregister(jmxConnectionBean);
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/ObserverMaster, unregisterLearnerHandlerBean(Lorg/apache/zookeeper/server/quorum/LearnerHandler;)V > Context: Everywhere, blocks=[BB[SSA:10..11]6 - org.apache.zookeeper.server.quorum.ObserverMaster.unregisterLearnerHandlerBean(Lorg/apache/zookeeper/server/quorum/LearnerHandler;)V, BB[SSA:9..9]5 - org.apache.zookeeper.server.quorum.ObserverMaster.unregisterLearnerHandlerBean(Lorg/apache/zookeeper/server/quorum/LearnerHandler;)V, BB[SSA:12..12]7 - org.apache.zookeeper.server.quorum.ObserverMaster.unregisterLearnerHandlerBean(Lorg/apache/zookeeper/server/quorum/LearnerHandler;)V, BB[SSA:-1..-2]8 - org.apache.zookeeper.server.quorum.ObserverMaster.unregisterLearnerHandlerBean(Lorg/apache/zookeeper/server/quorum/LearnerHandler;)V], numberOfBasicBlocks=4, firstLineNumber=539, lastLineNumber=541, firstMethodNumber=536, lastMethodNumber=541, isFirstLineValid=true, methodSrcCode=
    public void unregisterLearnerHandlerBean(final LearnerHandler learnerHandler) {
        LearnerHandlerBean bean = connectionBeans.remove(learnerHandler);
        if (bean != null) {
            MBeanRegistry.getInstance().unregister(bean);
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/QuorumPeer, updateRemotePeerMXBeans(Ljava/util/Map;)V > Context: Everywhere, blocks=[BB[SSA:126..127]65 - org.apache.zookeeper.server.quorum.QuorumPeer.updateRemotePeerMXBeans(Ljava/util/Map;)V, BB[SSA:124..125]64 - org.apache.zookeeper.server.quorum.QuorumPeer.updateRemotePeerMXBeans(Ljava/util/Map;)V, BB[SSA:128..128]66 - org.apache.zookeeper.server.quorum.QuorumPeer.updateRemotePeerMXBeans(Ljava/util/Map;)V, BB[SSA:-1..-2]70 - org.apache.zookeeper.server.quorum.QuorumPeer.updateRemotePeerMXBeans(Ljava/util/Map;)V], numberOfBasicBlocks=4, firstLineNumber=2350, lastLineNumber=2355, firstMethodNumber=2325, lastMethodNumber=2357, isFirstLineValid=true, methodSrcCode=
    private void updateRemotePeerMXBeans(Map<Long, QuorumServer> newMembers) {
        Set<Long> existingMembers = new HashSet<>(newMembers.keySet());
        existingMembers.retainAll(jmxRemotePeerBean.keySet());
        for (Long id : existingMembers) {
            RemotePeerBean rBean = jmxRemotePeerBean.get(id);
            rBean.setQuorumServer(newMembers.get(id));
        }

        Set<Long> joiningMembers = new HashSet<>(newMembers.keySet());
        joiningMembers.removeAll(jmxRemotePeerBean.keySet());
        joiningMembers.remove(getMyId()); // remove self as it is local bean
        for (Long id : joiningMembers) {
            QuorumServer qs = newMembers.get(id);
            RemotePeerBean rBean = new RemotePeerBean(this, qs);
            try {
                MBeanRegistry.getInstance().register(rBean, jmxQuorumBean);
                jmxRemotePeerBean.put(qs.id, rBean);
            } catch (Exception e) {
                LOG.warn("Failed to register with JMX", e);
            }
        }

        Set<Long> leavingMembers = new HashSet<>(jmxRemotePeerBean.keySet());
        leavingMembers.removeAll(newMembers.keySet());
        for (Long id : leavingMembers) {
            RemotePeerBean rBean = jmxRemotePeerBean.remove(id);
            try {
                MBeanRegistry.getInstance().unregister(rBean);
            } catch (Exception e) {
                LOG.warn("Failed to unregister with JMX", e);
            }
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/LeaderZooKeeperServer, registerJMX(Lorg/apache/zookeeper/server/quorum/LeaderBean;Lorg/apache/zookeeper/server/quorum/LocalPeerBean;)V > Context: Everywhere, blocks=[BB[SSA:9..9]7 - org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.registerJMX(Lorg/apache/zookeeper/server/quorum/LeaderBean;Lorg/apache/zookeeper/server/quorum/LocalPeerBean;)V, BB[SSA:8..8]6 - org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.registerJMX(Lorg/apache/zookeeper/server/quorum/LeaderBean;Lorg/apache/zookeeper/server/quorum/LocalPeerBean;)V, BB[SSA:10..10]8 - org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.registerJMX(Lorg/apache/zookeeper/server/quorum/LeaderBean;Lorg/apache/zookeeper/server/quorum/LocalPeerBean;)V, BB[SSA:-1..-2]19 - org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.registerJMX(Lorg/apache/zookeeper/server/quorum/LeaderBean;Lorg/apache/zookeeper/server/quorum/LocalPeerBean;)V], numberOfBasicBlocks=4, firstLineNumber=232, lastLineNumber=235, firstMethodNumber=229, lastMethodNumber=246, isFirstLineValid=true, methodSrcCode=
        // register with JMX
        if (self.jmxLeaderElectionBean != null) {
            try {
                MBeanRegistry.getInstance().unregister(self.jmxLeaderElectionBean);
            } catch (Exception e) {
                LOG.warn("Failed to register with JMX", e);
            }
            self.jmxLeaderElectionBean = null;
        }

        try {
            jmxServerBean = leaderBean;
            MBeanRegistry.getInstance().register(leaderBean, localPeerBean);
        } catch (Exception e) {
            LOG.warn("Failed to register with JMX", e);
            jmxServerBean = null;
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/FastLeaderElection, lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote; > Context: Everywhere, blocks=[BB[SSA:164..164]84 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:163..163]83 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:165..165]85 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:-1..-2]339 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:459..459]233 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:458..458]232 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:460..460]234 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:-1..-2]339 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:508..508]256 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:507..507]255 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:509..509]257 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:-1..-2]339 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:550..550]275 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:549..549]274 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:551..551]276 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:-1..-2]339 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:621..621]313 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:620..620]312 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:622..622]314 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:-1..-2]339 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:651..651]329 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:650..650]328 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:652..652]330 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;, BB[SSA:-1..-2]339 - org.apache.zookeeper.server.quorum.FastLeaderElection.lookForLeader()Lorg/apache/zookeeper/server/quorum/Vote;], numberOfBasicBlocks=24, firstLineNumber=1136, lastLineNumber=1140, firstMethodNumber=914, lastMethodNumber=1143, isFirstLineValid=true, methodSrcCode=
        try {
            self.jmxLeaderElectionBean = new LeaderElectionBean();
            MBeanRegistry.getInstance().register(self.jmxLeaderElectionBean, self.jmxLocalPeerBean);
        } catch (Exception e) {
            LOG.warn("Failed to register with JMX", e);
            self.jmxLeaderElectionBean = null;
        }

        self.start_fle = Time.currentElapsedTime();
        try {
            /*
             * The votes from the current leader election are stored in recvset. In other words, a vote v is in recvset
             * if v.electionEpoch == logicalclock. The current participant uses recvset to deduce on whether a majority
             * of participants has voted for it.
             */
            Map<Long, Vote> recvset = new HashMap<>();

            /*
             * The votes from previous leader elections, as well as the votes from the current leader election are
             * stored in outofelection. Note that notifications in a LOOKING state are not stored in outofelection.
             * Only FOLLOWING or LEADING notifications are stored in outofelection. The current participant could use
             * outofelection to learn which participant is the leader if it arrives late (i.e., higher logicalclock than
             * the electionEpoch of the received notifications) in a leader election.
             */
            Map<Long, Vote> outofelection = new HashMap<>();

            int notTimeout = minNotificationInterval;

            synchronized (this) {
                logicalclock.incrementAndGet();
                updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());
            }

            LOG.info(
                "New election. My id = {}, proposed zxid=0x{}",
                self.getMyId(),
                Long.toHexString(proposedZxid));
            sendNotifications();

            SyncedLearnerTracker voteSet = null;

            /*
             * Loop in which we exchange notifications until we find a leader
             */

            while ((self.getPeerState() == ServerState.LOOKING) && (!stop)) {
                /*
                 * Remove next notification from queue, times out after 2 times
                 * the termination time
                 */
                Notification n = recvqueue.poll(notTimeout, TimeUnit.MILLISECONDS);

                /*
                 * Sends more notifications if haven't received enough.
                 * Otherwise processes new notification.
                 */
                if (n == null) {
                    if (manager.haveDelivered()) {
                        sendNotifications();
                    } else {
                        manager.connectAll();
                    }

                    /*
                     * Exponential backoff
                     */
                    notTimeout = Math.min(notTimeout << 1, maxNotificationInterval);

                    /*
                     * When a leader failure happens on a master, the backup will be supposed to receive the honour from
                     * Oracle and become a leader, but the honour is likely to be delay. We do a re-check once timeout happens
                     *
                     * The leader election algorithm does not provide the ability of electing a leader from a single instance
                     * which is in a configuration of 2 instances.
                     * */
                    if (self.getQuorumVerifier() instanceof QuorumOracleMaj
                            && self.getQuorumVerifier().revalidateVoteset(voteSet, notTimeout != minNotificationInterval)) {
                        setPeerState(proposedLeader, voteSet);
                        Vote endVote = new Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch);
                        leaveInstance(endVote);
                        return endVote;
                    }

                    LOG.info("Notification time out: {} ms", notTimeout);

                } else if (validVoter(n.sid) && validVoter(n.leader)) {
                    /*
                     * Only proceed if the vote comes from a replica in the current or next
                     * voting view for a replica in the current or next voting view.
                     */
                    switch (n.state) {
                    case LOOKING:
                        if (getInitLastLoggedZxid() == -1) {
                            LOG.debug("Ignoring notification as our zxid is -1");
                            break;
                        }
                        if (n.zxid == -1) {
                            LOG.debug("Ignoring notification from member with -1 zxid {}", n.sid);
                            break;
                        }
                        // If notification > current, replace and send messages out
                        if (n.electionEpoch > logicalclock.get()) {
                            logicalclock.set(n.electionEpoch);
                            recvset.clear();
                            if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) {
                                updateProposal(n.leader, n.zxid, n.peerEpoch);
                            } else {
                                updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());
                            }
                            sendNotifications();
                        } else if (n.electionEpoch < logicalclock.get()) {
                                LOG.debug(
                                    "Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x{}, logicalclock=0x{}",
                                    Long.toHexString(n.electionEpoch),
                                    Long.toHexString(logicalclock.get()));
                            break;
                        } else if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) {
                            updateProposal(n.leader, n.zxid, n.peerEpoch);
                            sendNotifications();
                        }

                        LOG.debug(
                            "Adding vote: from={}, proposed leader={}, proposed zxid=0x{}, proposed election epoch=0x{}",
                            n.sid,
                            n.leader,
                            Long.toHexString(n.zxid),
                            Long.toHexString(n.electionEpoch));

                        // don't care about the version if it's in LOOKING state
                        recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));

                        voteSet = getVoteTracker(recvset, new Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch));

                        if (voteSet.hasAllQuorums()) {

                            // Verify if there is any change in the proposed leader
                            while ((n = recvqueue.poll(finalizeWait, TimeUnit.MILLISECONDS)) != null) {
                                if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) {
                                    recvqueue.put(n);
                                    break;
                                }
                            }

                            /*
                             * This predicate is true once we don't read any new
                             * relevant message from the reception queue
                             */
                            if (n == null) {
                                setPeerState(proposedLeader, voteSet);
                                Vote endVote = new Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch);
                                leaveInstance(endVote);
                                return endVote;
                            }
                        }
                        break;
                    case OBSERVING:
                        LOG.debug("Notification from observer: {}", n.sid);
                        break;

                        /*
                        * In ZOOKEEPER-3922, we separate the behaviors of FOLLOWING and LEADING.
                        * To avoid the duplication of codes, we create a method called followingBehavior which was used to
                        * shared by FOLLOWING and LEADING. This method returns a Vote. When the returned Vote is null, it follows
                        * the original idea to break swtich statement; otherwise, a valid returned Vote indicates, a leader
                        * is generated.
                        *
                        * The reason why we need to separate these behaviors is to make the algorithm runnable for 2-node
                        * setting. An extra condition for generating leader is needed. Due to the majority rule, only when
                        * there is a majority in the voteset, a leader will be generated. However, in a configuration of 2 nodes,
                        * the number to achieve the majority remains 2, which means a recovered node cannot generate a leader which is
                        * the existed leader. Therefore, we need the Oracle to kick in this situation. In a two-node configuration, the Oracle
                        * only grants the permission to maintain the progress to one node. The oracle either grants the permission to the
                        * remained node and makes it a new leader when there is a faulty machine, which is the case to maintain the progress.
                        * Otherwise, the oracle does not grant the permission to the remained node, which further causes a service down.
                        *
                        * In the former case, when a failed server recovers and participate in the leader election, it would not locate a
                        * new leader because there does not exist a majority in the voteset. It fails on the containAllQuorum() infinitely due to
                        * two facts. First one is the fact that it does do not have a majority in the voteset. The other fact is the fact that
                        * the oracle would not give the permission since the oracle already gave the permission to the existed leader, the healthy machine.
                        * Logically, when the oracle replies with negative, it implies the existed leader which is LEADING notification comes from is a valid leader.
                        * To threat this negative replies as a permission to generate the leader is the purpose to separate these two behaviors.
                        *
                        *
                        * */
                    case FOLLOWING:
                        /*
                        * To avoid duplicate codes
                        * */
                        Vote resultFN = receivedFollowingNotification(recvset, outofelection, voteSet, n);
                        if (resultFN == null) {
                            break;
                        } else {
                            return resultFN;
                        }
                    case LEADING:
                        /*
                        * In leadingBehavior(), it performs followingBehvior() first. When followingBehavior() returns
                        * a null pointer, ask Oracle whether to follow this leader.
                        * */
                        Vote resultLN = receivedLeadingNotification(recvset, outofelection, voteSet, n);
                        if (resultLN == null) {
                            break;
                        } else {
                            return resultLN;
                        }
                    default:
                        LOG.warn("Notification state unrecognized: {} (n.state), {}(n.sid)", n.state, n.sid);
                        break;
                    }
                } else {
                    if (!validVoter(n.leader)) {
                        LOG.warn("Ignoring notification for non-cluster member sid {} from sid {}", n.leader, n.sid);
                    }
                    if (!validVoter(n.sid)) {
                        LOG.warn("Ignoring notification for sid {} from non-quorum member sid {}", n.leader, n.sid);
                    }
                }
            }
            return null;
        } finally {
            try {
                if (self.jmxLeaderElectionBean != null) {
                    MBeanRegistry.getInstance().unregister(self.jmxLeaderElectionBean);
                }
            } catch (Exception e) {
                LOG.warn("Failed to unregister with JMX", e);
            }
            self.jmxLeaderElectionBean = null;
            LOG.debug("Number of connection processing threads: {}", manager.getConnectionThreadCount());
        }
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/LearnerZooKeeperServer, registerJMX(Lorg/apache/zookeeper/server/ZooKeeperServerBean;Lorg/apache/zookeeper/server/quorum/LocalPeerBean;)V > Context: Everywhere, blocks=[BB[SSA:9..9]7 - org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.registerJMX(Lorg/apache/zookeeper/server/ZooKeeperServerBean;Lorg/apache/zookeeper/server/quorum/LocalPeerBean;)V, BB[SSA:8..8]6 - org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.registerJMX(Lorg/apache/zookeeper/server/ZooKeeperServerBean;Lorg/apache/zookeeper/server/quorum/LocalPeerBean;)V, BB[SSA:10..10]8 - org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.registerJMX(Lorg/apache/zookeeper/server/ZooKeeperServerBean;Lorg/apache/zookeeper/server/quorum/LocalPeerBean;)V, BB[SSA:-1..-2]19 - org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.registerJMX(Lorg/apache/zookeeper/server/ZooKeeperServerBean;Lorg/apache/zookeeper/server/quorum/LocalPeerBean;)V], numberOfBasicBlocks=4, firstLineNumber=113, lastLineNumber=116, firstMethodNumber=110, lastMethodNumber=127, isFirstLineValid=true, methodSrcCode=
        // register with JMX
        if (self.jmxLeaderElectionBean != null) {
            try {
                MBeanRegistry.getInstance().unregister(self.jmxLeaderElectionBean);
            } catch (Exception e) {
                LOG.warn("Failed to register with JMX", e);
            }
            self.jmxLeaderElectionBean = null;
        }

        try {
            jmxServerBean = serverBean;
            MBeanRegistry.getInstance().register(serverBean, localPeerBean);
        } catch (Exception e) {
            LOG.warn("Failed to register with JMX", e);
            jmxServerBean = null;
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/quorum/LeaderZooKeeperServer, unregisterJMX()V > Context: Everywhere, blocks=[BB[SSA:7..7]5 - org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.unregisterJMX()V, BB[SSA:5..6]4 - org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.unregisterJMX()V, BB[SSA:8..8]6 - org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.unregisterJMX()V, BB[SSA:-1..-2]10 - org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.unregisterJMX()V], numberOfBasicBlocks=4, firstLineNumber=263, lastLineNumber=267, firstMethodNumber=261, lastMethodNumber=269, isFirstLineValid=true, methodSrcCode=
        try {
            if (jmxDataTreeBean != null) {
                MBeanRegistry.getInstance().unregister(jmxDataTreeBean);
            }
        } catch (Exception e) {
            LOG.warn("Failed to unregister with JMX", e);
        }
        jmxDataTreeBean = null;
    }

}
