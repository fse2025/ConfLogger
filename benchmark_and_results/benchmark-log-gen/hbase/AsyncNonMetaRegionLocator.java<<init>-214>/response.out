```java
AsyncNonMetaRegionLocator(AsyncConnectionImpl conn) {
    this.conn = conn;
    this.maxConcurrentLocateRequestPerTable = conn.getConfiguration().getInt(
        MAX_CONCURRENT_LOCATE_REQUEST_PER_TABLE, DEFAULT_MAX_CONCURRENT_LOCATE_REQUEST_PER_TABLE);
    this.locatePrefetchLimit =
        conn.getConfiguration().getInt(LOCATE_PREFETCH_LIMIT, DEFAULT_LOCATE_PREFETCH_LIMIT);

    // Get the region locator's meta replica mode.
    this.metaReplicaMode = CatalogReplicaMode.fromString(
        conn.getConfiguration().get(LOCATOR_META_REPLICAS_MODE, CatalogReplicaMode.NONE.toString()));

    switch (this.metaReplicaMode) {
        case LOAD_BALANCE:
            String replicaSelectorClass =
                conn.getConfiguration().get(RegionLocator.LOCATOR_META_REPLICAS_MODE_LOADBALANCE_SELECTOR,
                    CatalogReplicaLoadBalanceSimpleSelector.class.getName());

            this.metaReplicaSelector = CatalogReplicaLoadBalanceSelectorFactory
                .createSelector(replicaSelectorClass, META_TABLE_NAME, conn, () -> {
                    int numOfReplicas = CatalogReplicaLoadBalanceSelector.UNINITIALIZED_NUM_OF_REPLICAS;
                    try {
                        RegionLocations metaLocations = conn.registry.getMetaRegionLocations()
                            .get(conn.connConf.getReadRpcTimeoutNs(), TimeUnit.NANOSECONDS);
                        numOfReplicas = metaLocations.size();
                    } catch (Exception e) {
                        LOG.error("Failed to get table {}'s region replication, ", META_TABLE_NAME, e); // ConfLogger Skipped
                    }
                    return numOfReplicas;
                });
            break;
        case NONE:
            // If user does not configure LOCATOR_META_REPLICAS_MODE, let's check the legacy config.
            boolean useMetaReplicas =
                conn.getConfiguration().getBoolean(USE_META_REPLICAS, DEFAULT_USE_META_REPLICAS);
            if (useMetaReplicas) {
                this.metaReplicaMode = CatalogReplicaMode.HEDGED_READ;
                // ConfLogger Inserted Start
                logger.info("Configuration parameter 'USE_META_REPLICAS' is set to true. Setting 'metaReplicaMode' to HEDGED_READ.");
                // ConfLogger Inserted End
            }
            break;
        default:
            // Doing nothing
    }
}
```