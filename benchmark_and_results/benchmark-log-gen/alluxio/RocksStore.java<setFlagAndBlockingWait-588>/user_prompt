<code-whole>
if (yieldToAnotherCloser && mRocksDbStopServing.getReference()) {
throw new UnavailableRuntimeException(ExceptionMessage.ROCKS_DB_CLOSING.getMessage());
}

int version = mRocksDbStopServing.getStamp();
if (yieldToAnotherCloser) {
if (!mRocksDbStopServing.compareAndSet(false, true, version, version)) {
throw new UnavailableRuntimeException(ExceptionMessage.ROCKS_DB_CLOSING.getMessage());
}
} else {
// Just set the state with no respect to concurrent actions
mRocksDbStopServing.set(true, version);
}

/*
* Wait until:
* 1. Ref count is zero, meaning all concurrent r/w have completed or aborted
* 2. Timeout is reached, meaning we force close/restart without waiting
*
* According to Java doc
* https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html
* In absence of concurrent updates, sum() returns an accurate result.
* But sum() does not see concurrent updates and therefore can miss an update.
*
* The correctness then relies on the 2nd check in checkAndAcquireSharedLock()
* because the reader will see the flag and just abort voluntarily. An example sequence
* of events is like below:
* 1. Reader checks flag, the flag is not set by the closer
* 2. Closer sets flag
* 3. Closer sees refCount=0
* 4. Reader increments refCount
* 5. Closer closes RocksDB
* 6. Reader checks flag again and sees the flag
* 7. Reader decrements refCount aborts in checkAndAcquireSharedLock()
*/
Instant waitStart = Instant.now();
CountingRetry retry = new CountingRetry((int) ROCKS_CLOSE_WAIT_TIMEOUT.getSeconds() * 10);
while (mRefCount.sum() != 0 && retry.attempt()) {
SleepUtils.sleepMs(100);
}
Duration elapsed = Duration.between(waitStart, Instant.now());
LOG.info("Waited {}ms for ongoing read/write to complete/abort", elapsed.toMillis());

/*
* Reset the ref count to forget about the aborted operations
*/
long unclosedOperations = mRefCount.sum();
if (unclosedOperations != 0) {
if (Configuration.getBoolean(PropertyKey.TEST_MODE)) {
throw new RuntimeException(ExceptionMessage.ROCKS_DB_EXCLUSIVE_LOCK_FORCED
.getMessage(unclosedOperations));
}
/*
* Set the flag so shared locks know that the ref count has been reset,
* no need to update the ref count on unlock.
* If one shared lock did not decrement the ref count before this reset, it should not
* decrement the ref count when it is released.
*/
resetRefCounter();
LOG.warn("{} readers/writers fail to complete/abort before we stop/restart the RocksDB",
unclosedOperations);
}
}
</code-whole>

<code-specified>
if (Configuration.getBoolean(PropertyKey.TEST_MODE)) {
throw new RuntimeException(ExceptionMessage.ROCKS_DB_EXCLUSIVE_LOCK_FORCED
.getMessage(unclosedOperations));
}
</code-specified>