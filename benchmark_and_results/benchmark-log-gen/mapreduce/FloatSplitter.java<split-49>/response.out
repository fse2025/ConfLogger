```java
LOG.warn("Generating splits for a floating-point index column. Due to the");
LOG.warn("imprecise representation of floating-point values in Java, this");
LOG.warn("may result in an incomplete import.");
LOG.warn("You are strongly encouraged to choose an integral split column.");

List<InputSplit> splits = new ArrayList<InputSplit>();

if (results.getString(1) == null && results.getString(2) == null) {
// Range is null to null. Return a null split accordingly.
splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(
colName + " IS NULL", colName + " IS NULL"));
return splits;
}

double minVal = results.getDouble(1);
double maxVal = results.getDouble(2);

// Use this as a hint. May need an extra task if the size doesn't
// divide cleanly.
int numSplits = conf.getInt(MRJobConfig.NUM_MAPS, 1);
double splitSize = (maxVal - minVal) / (double) numSplits;

if (splitSize < MIN_INCREMENT) {
    // ConfLogger Inserted Start
    logger.warn("Split size is less than the minimum increment. Adjusting split size to MIN_INCREMENT. Configuration parameter: MRJobConfig.NUM_MAPS, Value: " + numSplits);
    // ConfLogger Inserted End
    splitSize = MIN_INCREMENT;
}

String lowClausePrefix = colName + " >= ";
String highClausePrefix = colName + " < ";

double curLower = minVal;
double curUpper = curLower + splitSize;

while (curUpper < maxVal) {
splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(
lowClausePrefix + Double.toString(curLower),
highClausePrefix + Double.toString(curUpper)));

curLower = curUpper;
curUpper += splitSize;
}

// Catch any overage and create the closed interval for the last split.
if (curLower <= maxVal || splits.size() == 1) {
splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(
lowClausePrefix + Double.toString(curLower),
colName + " <= " + Double.toString(maxVal)));
}

if (results.getString(1) == null || results.getString(2) == null) {
// At least one extrema is null; add a null split.
splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(
colName + " IS NULL", colName + " IS NULL"));
}

return splits;
}
```