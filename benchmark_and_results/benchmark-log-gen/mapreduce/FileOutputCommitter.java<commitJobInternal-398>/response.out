```java
if (hasOutputPath()) {
    Path finalOutput = getOutputPath();
    FileSystem fs = finalOutput.getFileSystem(context.getConfiguration());

    if (algorithmVersion == 1) {
        for (FileStatus stat: getAllCommittedTaskPaths(context)) {
            mergePaths(fs, stat, finalOutput, context);
        }
    }

    if (skipCleanup) {
        LOG.info("Skip cleanup the _temporary folders under job's output " +
        "directory in commitJob.");
    } else {
        // delete the _temporary folder and create a _SUCCESS file in the o/p
        // folder
        try {
            cleanupJob(context);
        } catch (IOException e) {
            if (ignoreCleanupFailures) {
                // swallow exceptions in cleanup as user configure to make sure
                // commitJob could be success even when cleanup get failure.
                LOG.error("Error in cleanup job, manually cleanup is needed.", e);
            } else {
                // throw back exception to fail commitJob.
                throw e;
            }
        }
    }
    // True if the job requires output.dir marked on successful job.
    // Note that by default it is set to true.
    // Create a _SUCCESS file in the o/p folder.
    if (context.getConfiguration().getBoolean(
    SUCCESSFUL_JOB_OUTPUT_DIR_MARKER, true)) {
        Path markerPath = new Path(outputPath, SUCCEEDED_FILE_NAME);
        // If job commit is repeatable and previous/another AM could write
        // mark file already, we need to set overwritten to be true explicitly
        // in case other FS implementations don't overwritten by default.
        if (isCommitJobRepeatable(context)) {
            fs.create(markerPath, true).close();
        } else {
            fs.create(markerPath).close();
        }
        // ConfLogger Inserted Start
        logger.info("Job requires output.dir marked on successful job. Configuration parameter: SUCCESSFUL_JOB_OUTPUT_DIR_MARKER, Value: true");
        // ConfLogger Inserted End
    } else {
        // ConfLogger Inserted Start
        logger.warn("Job does not require output.dir marked on successful job. Configuration parameter: SUCCESSFUL_JOB_OUTPUT_DIR_MARKER, Value: false");
        // ConfLogger Inserted End
    }
} else {
    LOG.warn("Output Path is null in commitJob()");
}
```