====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	JobSubmitter.java	methodSinagture:	org.apache.hadoop.mapreduce.JobSubmitter.readTokensFromFiles(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V	methodLines:	388:417
blockLines:	391:-1
paras:	null
TaintedStat:	NORMAL readTokensFromFiles:conditional branch(eq, to iindex=20) 7,8 Node: < Application, Lorg/apache/hadoop/mapreduce/JobSubmitter, readTokensFromFiles(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/mapreduce/JobSubmitter, readTokensFromFiles(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V > Context: Everywhere[2]7 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 2,5 @3 exception:6
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/mapreduce/JobSubmitter, readTokensFromFiles(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V > Context: Everywhere[2]7 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 2,5 @3 exception:6
NORMAL readTokensFromFiles:conditional branch(eq, to iindex=20) 7,8 Node: < Application, Lorg/apache/hadoop/mapreduce/JobSubmitter, readTokensFromFiles(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	JobSubmitter.java	methodSinagture:	org.apache.hadoop.mapreduce.JobSubmitter.readTokensFromFiles(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V	methodLines:	388:417
blockLines:	400:-1
paras:	null
TaintedStat:	NORMAL readTokensFromFiles:conditional branch(eq, to iindex=83) 20,8 Node: < Application, Lorg/apache/hadoop/mapreduce/JobSubmitter, readTokensFromFiles(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/mapreduce/JobSubmitter, readTokensFromFiles(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V > Context: Everywhere[22]20 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 2,18 @41 exception:19
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/mapreduce/JobSubmitter, readTokensFromFiles(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V > Context: Everywhere[22]20 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 2,18 @41 exception:19
NORMAL readTokensFromFiles:conditional branch(eq, to iindex=83) 20,8 Node: < Application, Lorg/apache/hadoop/mapreduce/JobSubmitter, readTokensFromFiles(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    // add tokens and secrets coming from a token storage file
    String binaryTokenFilename =
      conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);
    if (binaryTokenFilename != null) {
      Credentials binary = Credentials.readTokenStorageFile(
          FileSystem.getLocal(conf).makeQualified(
              new Path(binaryTokenFilename)),
          conf);
      credentials.addAll(binary);
    }
    // add secret keys coming from a json file
    String tokensFileName = conf.get("mapreduce.job.credentials.json");
    if(tokensFileName != null) {
      LOG.info("loading user's secret keys from " + tokensFileName);
      String localFileName = new Path(tokensFileName).toUri().getPath();

      try {
        // read JSON
        Map<String, String> nm = JsonSerialization.mapReader().readValue(
            new File(localFileName));

        for(Map.Entry<String, String> ent: nm.entrySet()) {
          credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()
              .getBytes(Charsets.UTF_8));
        }
      } catch (JsonMappingException | JsonParseException e) {
        LOG.warn("couldn't parse Token Cache JSON file with user secret keys");
      }
    }
  }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/mapreduce/JobSubmitter, populateTokenCache(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V > Context: Everywhere, blocks=[BB[SSA:0..3]1 - org.apache.hadoop.mapreduce.JobSubmitter.populateTokenCache(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V, BB[SSA:-1..-2]0 - org.apache.hadoop.mapreduce.JobSubmitter.populateTokenCache(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V, BB[SSA:4..6]2 - org.apache.hadoop.mapreduce.JobSubmitter.populateTokenCache(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V, BB[SSA:-1..-2]23 - org.apache.hadoop.mapreduce.JobSubmitter.populateTokenCache(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/Credentials;)V], numberOfBasicBlocks=4, firstLineNumber=421, lastLineNumber=424, firstMethodNumber=421, lastMethodNumber=434, isFirstLineValid=false, methodSrcCode=
  throws IOException{
    readTokensFromFiles(conf, credentials);
    // add the delegation tokens from configuration
    String [] nameNodes = conf.getStrings(MRJobConfig.JOB_NAMENODES);
    LOG.debug("adding the following namenodes' delegation tokens:" + 
        Arrays.toString(nameNodes));
    if(nameNodes != null) {
      Path [] ps = new Path[nameNodes.length];
      for(int i=0; i< nameNodes.length; i++) {
        ps[i] = new Path(nameNodes[i]);
      }
      TokenCache.obtainTokensForNamenodes(credentials, ps, conf);
    }
  }

}
