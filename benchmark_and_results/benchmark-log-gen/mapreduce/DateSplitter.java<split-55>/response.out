```java
int sqlDataType = results.getMetaData().getColumnType(1);
minVal = resultSetColToLong(results, 1, sqlDataType);
maxVal = resultSetColToLong(results, 2, sqlDataType);

String lowClausePrefix = colName + " >= ";
String highClausePrefix = colName + " < ";

int numSplits = conf.getInt(MRJobConfig.NUM_MAPS, 1);
if (numSplits < 1) {
    numSplits = 1;
    // ConfLogger Inserted Start
    logger.warn("Configuration parameter 'MRJobConfig.NUM_MAPS' is set to an invalid value: {}. Resetting to 1.", numSplits);
    // ConfLogger Inserted End
}

if (minVal == Long.MIN_VALUE && maxVal == Long.MIN_VALUE) {
    // The range of acceptable dates is NULL to NULL. Just create a single split.
    List<InputSplit> splits = new ArrayList<InputSplit>();
    splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(
        colName + " IS NULL", colName + " IS NULL"));
    return splits;
}

// Gather the split point integers
List<Long> splitPoints = split(numSplits, minVal, maxVal);
List<InputSplit> splits = new ArrayList<InputSplit>();

// Turn the split points into a set of intervals.
long start = splitPoints.get(0);
Date startDate = longToDate(start, sqlDataType);
if (sqlDataType == Types.TIMESTAMP) {
    // The lower bound's nanos value needs to match the actual lower-bound nanos.
    try {
        ((java.sql.Timestamp) startDate).setNanos(results.getTimestamp(1).getNanos());
    } catch (NullPointerException npe) {
        // If the lower bound was NULL, we'll get an NPE; just ignore it and don't set nanos.
    }
}

for (int i = 1; i < splitPoints.size(); i++) {
    long end = splitPoints.get(i);
    Date endDate = longToDate(end, sqlDataType);

    if (i == splitPoints.size() - 1) {
        if (sqlDataType == Types.TIMESTAMP) {
            // The upper bound's nanos value needs to match the actual upper-bound nanos.
            try {
                ((java.sql.Timestamp) endDate).setNanos(results.getTimestamp(2).getNanos());
            } catch (NullPointerException npe) {
                // If the upper bound was NULL, we'll get an NPE; just ignore it and don't set nanos.
            }
        }
        // This is the last one; use a closed interval.
        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(
            lowClausePrefix + dateToString(startDate),
            colName + " <= " + dateToString(endDate)));
    } else {
        // Normal open-interval case.
        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(
            lowClausePrefix + dateToString(startDate),
            highClausePrefix + dateToString(endDate)));
    }

    start = end;
    startDate = endDate;
}

if (minVal == Long.MIN_VALUE || maxVal == Long.MIN_VALUE) {
    // Add an extra split to handle the null case that we saw.
    splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(
        colName + " IS NULL", colName + " IS NULL"));
}

return splits;
}
```